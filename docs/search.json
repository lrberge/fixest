[{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"preamble","dir":"Articles","previous_headings":"","what":"Preamble","title":"`etable`: new features in `fixest` 0.10.2","text":"Version 0.10.2 comes majors changes Latex engine etable. notable one ability transform Latex tables PNG files display either RStudio’s viewer, either directly HTML markdown documents (like tables document). However, requires following software installed work properly user-side: pdflatex (shipped Latex distributions) R package tinytex (likely already installed), imagemagick (convert images) ghostscipt (convert PDF files), R package pdftools. Now ’re good start. Let’s first define global dictionary: rename variables also include pre-defined notes can fetched etable. let’s define global options table. philosophy set style components common across tables thanks setFixest_etable. goal , increase maintainability, use table-specific arguments later calls etable. Hence, table style changed, one modification needed (setFixest_etable), etable calls stay . arguments markdown page.width explained next section. now estimation ’ll use throughout document.","code":"library(fixest) # Let's define a dictionary and set it globally. # We also define notes, not just variable names. # (The function 'dsb()' is like 'glue()' and is not important here.) dict = c(\"(Intercept)\" = \"Constant\",           Petal.Length = \"Petal length\", Petal.Width = \"Petal width\",          Sepal.Length = \"Sepal length\", Sepal.Width = \"Sepal width\",          note1 = dsb(\"*Notes*: This is a note that illustrates how to access notes \",                      \"from the dictionary.\"),          source = \"*Sources*: Somewhere from the net.\") setFixest_dict(dict) # The style of the table my_style = style.tex(\"aer\", model.format = \"(i)\")  # markdown = TRUE is only useful in Rmarkdown documents setFixest_etable(style.tex = my_style, markdown = TRUE, page.width = \"a4\") nm = names(iris) est = feols(.[nm[1]] ~ .[nm[2:4]], iris, fsplit = ~Species)"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"displaying-tables-as-png","dir":"Articles","previous_headings":"","what":"Displaying tables as PNG","title":"`etable`: new features in `fixest` 0.10.2","text":"One major improvement ability generate PNG snapshots Latex tables (wish thank Avishay-Rizi suggestion!). works intuitively: first standalone Latex document compiled generate PDF containing table, imagemagick used convert PDF PNG file. Note image generation instantaneous Latex compilation (output can cached, explained later). images accessible arguments view markdown.","code":""},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"argument-view","dir":"Articles","previous_headings":"Displaying tables as PNG","what":"Argument view","title":"`etable`: new features in `fixest` 0.10.2","text":"call etable (.e. tex = TRUE required), can use view = TRUE display table snapshot Rstudio’s viewer. table fit viewer’s window, large possible without overflowing horizontally vertically. feature , ironically, hard display document since ’s viewer: see work, try ! Using current example, just run etable(est, view = TRUE). Note tables displayed several times, can useful cache PNG outputs avoid compilation run-time. enable caching, use setFixest_etable(view.cache = TRUE). images saved temporary directory algorithm tries find even across sessions – hence enables long-term caching.","code":""},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"argument-markdown","dir":"Articles","previous_headings":"Displaying tables as PNG","what":"Argument markdown","title":"`etable`: new features in `fixest` 0.10.2","text":"peculiar option works within Rmarkdown documents ignored otherwise. markdown = TRUE output becomes always Latex table, even tex = FALSE (default). Second, importantly, output within Rmarkdown document becomes contingent type file generated. document PDF, code regular Latex table returned. document PDF (especially HTML file), : PNG table generated saved images/etable/, successive calls don’t need re-generate PNGs (.e. caching), generated image inserted document <img> tag, <img> tag inserted <div> container class etable. ensures tables whether output PDF HTML document. Since table embedded <div> container, can even add custom CSS customize looks. images tables document generated using markdown = TRUE, set globally setFixest_etable.","code":""},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"argument-page-width","dir":"Articles","previous_headings":"Displaying tables as PNG","what":"Argument page.width","title":"`etable`: new features in `fixest` 0.10.2","text":"mentioned, tables embedded standalone Latex document. main consequence table fits PDF file completely, without margin side. means whatever width table (two twenty columns), always take 100% width PDF. property fine displaying viewer (since usually want see full table), makes tables look odd inconsistent HTML document. Indeed, since tables two columns take width table twenty columns, font look extra large former extra small latter. ’s something usually want document. Hence, comes page.width argument. argument sets width side margins page inserted table. goal argument mimic placement table real PDF document (.e. article). ensures PNG look PDF. instance, page.width = \"a4\" set A4 page width 2cm side margins sides. argument can customized : e.g. 8.5in, 1.1in lead page width 8.5 inches 1.1 inch side margins (constraint unit width unit margin). page.width set , tables HTML document consistent: font across tables. top , also enables couple specific features. First, table narrow, can use tabularx table (argument tabluar) table large “text” width (HTML text hypothetical PDF text). Second, table overflows, can adjust argument adjustbox make fit text width.","code":""},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"new-latex-escaping-mechanism-markdown-markup-and-makecell-support","dir":"Articles","previous_headings":"","what":"New Latex-escaping mechanism: Markdown markup and makecell support","title":"`etable`: new features in `fixest` 0.10.2","text":"Now almost user-added text supports markdown markup italics/bold/bold-italics *, ** ***. , native support makecell: simply using \"\\n\" enables . ’s example:","code":"etable(est, headers = .(\"\\n\\n Short header\" = 2, \"*Very* \\n **long** \\n ***header***\" = 2))"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"support-for-threeparttable-notes","dir":"Articles","previous_headings":"","what":"Support for threeparttable notes","title":"`etable`: new features in `fixest` 0.10.2","text":"native support Latex package threeparttable. option can set via function style.tex(). (also new), can access notes via global dictionary avoid repetitions: table notes now adjusted table width thanks threeparttable notes accessed directly keys. argument notes.tpt.intro inserts Latex code right first \\\\item threeparttable: case, sets font footnotesize. general, advised set value tpt notes.tpt.intro globally. one wants change value notes.tpt.intro, instead typing style.tex = style.tex(notes.tpt.intro = \"stuff\"), first element notes replace notes.tpt.intro starts \"@\":","code":"etable(est,         style.tex = style.tex(tpt = TRUE, notes.tpt.intro = \"\\\\footnotesize\"),        notes = c(\"note1\", \"source\")) # Setting up tpt globally my_style = style.tex(tpt = TRUE,                       notes.tpt.intro = \"\\\\footnotesize\") setFixest_etable(style.tex = my_style)  # Below is identical to:  #  etable(est,  #         style.tex = style.tex(notes.tpt.intro = \"\\\\Large\"), #         notes = \"These notes are large.\") etable(est, notes = c(\"@\\\\Large\", \"These notes are large.\"))"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"support-for-adjustbox","dir":"Articles","previous_headings":"","what":"Support for adjustbox","title":"`etable`: new features in `fixest` 0.10.2","text":"Now native support Latex package adjustbox. nests table adjustbox environment resize image table appropriate dimensions, provided user. especially useful tables overflow can also used force small table fit particular size. default adjustbox = TRUE, adjustbox environment created options width = 1\\\\textwidth, center. argument can equal number, case treated desired text width. Otherwise accepts character string. Let’s example large table otherwise overflow:","code":"# mvsw == 'multiverse' stepwise (thanks to Resul Umit's suggestion) est_many = feols(.[nm[1]] ~ mvsw(.[, nm[2:4]]), iris) etable(est_many, adjustbox = 1.1)"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"highlighting-coefficients","dir":"Articles","previous_headings":"","what":"Highlighting coefficients","title":"`etable`: new features in `fixest` 0.10.2","text":"Highlighting coefficients often useful, especially presentations. now three main ways, natively implemented, highlight coefficients: using frame, coloring cells, giving custom style coefficients. first two can accessed via highlight argument. last implemented coef.style argument.","code":""},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"frame","dir":"Articles","previous_headings":"Highlighting coefficients","what":"Frame","title":"`etable`: new features in `fixest` 0.10.2","text":"default, highlight argument superimposes frame around coefficients interest. done thanks tickz magic barely understand found tex stack exchange. Anyway, back argument. syntax \"options\" = \"coefficients location\". coefficient location can expressed several ways: coefficient name: full row selected. Ex: Petal.L select Petal.Length row. coefficient name followed @ column ranges: coefficient row, selects given columns. Ex: Petal.L@1,3-4 select, row Petal.Length, columns 1, 3 4. vector two coefficient cells: selects full range top-left bottom right. Ex: c(\"Petal.L@2\", \"Petal.W@3\") select range second column Petal.Length third column Petal.Width. Let’s example illustrating three ways select coefficients options. also increase row heights arraystretch facilitate highlighting: five main options: se: whether standard-error included, sep0 sep9: separation coefficients frame (default sep3), thick1 thick6: thickness line frame (default thick6), square: whether frame box square corners, color!alpha: R color followed (optional) alpha value. important emphasize valid R color (Latex). color translated Latex guaranteed work. error handling done R avoid problems appearing Latex compilation time hard debug.","code":"etable(est, arraystretch = 1.5,        highlight = .(\"Sepal@1\",                       \"cyan4, square\" = \"Petal.L@3-4\",                      \"thick5, sep8, darkgreen!90, se\" = \"Petal.W\"))"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"row-colors","dir":"Articles","previous_headings":"Highlighting coefficients","what":"Row colors","title":"`etable`: new features in `fixest` 0.10.2","text":"Instead highlighting coefficients frame, row color highlighting can used. monitored argument highlight fact add option rowcol make work. Let’s replicate previous example row color: opposed previous example, increased transparency colors color!alpha syntax. Contrary frame, options row coloring apart color se include standard-errors.","code":"etable(est, arraystretch = 1.5,        highlight = .(rowcol = \"Sepal@1\",                       \"rowcol, cyan4!70\" = \"Petal.L@3-4\",                      \"rowcol, darkgreen!40, se\" = \"Petal.W\"))"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"style","dir":"Articles","previous_headings":"Highlighting coefficients","what":"Style","title":"`etable`: new features in `fixest` 0.10.2","text":"Using syntax select coefficients, possible completely customize coefficient cells. syntax coef.style = .(\"style\" = \"coefficients location\") style equal Latex code containing tag :coef: replaced coefficient value. Alternatively, using tag :coef_se: apply style coefficient standard-error. replication previous example another highlighting:","code":"etable(est, coef.style = .(\":coef:$\\\\bigstar$\" = \"Sepal@1\",                             \"**:coef:**\" = \"Petal.L@3-4\",                            \"\\\\color{BrickRed} :coef_se:\" = \"Petal.W\"))"},{"path":"https://lrberge.github.io/fixest/articles/etable_new_features.html","id":"css-and-co-","dir":"Articles","previous_headings":"","what":"CSS and co.","title":"`etable`: new features in `fixest` 0.10.2","text":"already said, image table embedded <div> container whose default class etable. can set class <div> manually argument div.class. things like : ’m sure done, least ’s possible!","code":"/* This is CSS code */ .etable_box {   border: 2pt solid;   border-radius: 5px;   box-shadow: 12px 12px 2px 1px rgba(0, 0, 255, .2);   margin: 0 20% 2em 20%;   padding: 1em; } etable(est, div.class = \"etable_box\", page.width = \"fit\",        title = \"CSS illustration.\")"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Exporting estimation tables","text":"Throughout document, use data airquality data base. also set dictionary used rename variables used etable. dictionary set .","code":"library(fixest) data(airquality)  # Setting a dictionary  setFixest_dict(c(Ozone = \"Ozone (ppb)\", Solar.R = \"Solar Radiation (Langleys)\",                  Wind = \"Wind Speed (mph)\", Temp = \"Temperature\"))"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"exporting-multiple-estimations-to-data-frames","dir":"Articles","previous_headings":"","what":"Exporting multiple estimations to data.frames","title":"Exporting estimation tables","text":"Let’s estimate following four models cluster standard-errors Day: default, argument file missing, function etable returns data.frame. Let’s see output previous estimations: can notice? First, variables properly labeled. Second, fixed-effects section details fixed-effects included model. Third, type standard-error reminded dedicated row. Starting table, two elements detailed: ) change look table style.df argument, b) leverage tools packages postprocess.df argument.","code":"# On multiple estimations: see the dedicated vignette est = feols(Ozone ~ Solar.R + sw0(Wind + Temp) | csw(Month, Day),              airquality, cluster = ~Day) etable(est) #>                                       est.1            est.2           est.3 #> Dependent Var.:                 Ozone (ppb)      Ozone (ppb)     Ozone (ppb) #>                                                                              #> Solar Radiation (Langleys) 0.115*** (0.023)   0.052* (0.020) 0.108** (0.033) #> Wind Speed (mph)                            -3.11*** (0.799)                 #> Temperature                                  1.88*** (0.367)                 #> Fixed-Effects:             ---------------- ---------------- --------------- #> Month                                   Yes              Yes             Yes #> Day                                      No               No             Yes #> __________________________ ________________ ________________ _______________ #> S.E.: Clustered                     by: Day          by: Day         by: Day #> Observations                            111              111             111 #> R2                                  0.31974          0.63686         0.58018 #> Within R2                           0.12245          0.53154         0.12074 #>  #>                                       est.4 #> Dependent Var.:                 Ozone (ppb) #>                                             #> Solar Radiation (Langleys)   0.051* (0.024) #> Wind Speed (mph)           -3.29*** (0.778) #> Temperature                 2.05*** (0.242) #> Fixed-Effects:             ---------------- #> Month                                   Yes #> Day                                     Yes #> __________________________ ________________ #> S.E.: Clustered                     by: Day #> Observations                            111 #> R2                                  0.81604 #> Within R2                           0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"changing-the-look-of-the-data-frame-with-style-df","dir":"Articles","previous_headings":"Exporting multiple estimations to data.frames","what":"Changing the look of the data.frame with style.df","title":"Exporting estimation tables","text":"can change many elements data.frame argument style.df whose input must come function style.df. style monitors many elements table, particular titles sections. Let’s example: previous example, dependent variable fixed-effects (FE) headers removed, achieved (explicit) arguments depvar.title fixef.title. Furthermore suffix \"fixed effect\" added fixed-effect variable, indicator FE included model slightly changed. options described style.df documentation.","code":"etable(est, style.df = style.df(depvar.title = \"\", fixef.title = \"\",                                  fixef.suffix = \" fixed effect\", yesNo = \"yes\")) #>                                       est.1            est.2           est.3 #>                                 Ozone (ppb)      Ozone (ppb)     Ozone (ppb) #>                                                                              #> Solar Radiation (Langleys) 0.115*** (0.023)   0.052* (0.020) 0.108** (0.033) #> Wind Speed (mph)                            -3.11*** (0.799)                 #> Temperature                                  1.88*** (0.367)                 #> Month fixed effect                      yes              yes             yes #> Day fixed effect                                                         yes #> __________________________ ________________ ________________ _______________ #> S.E.: Clustered                     by: Day          by: Day         by: Day #> Observations                            111              111             111 #> R2                                  0.31974          0.63686         0.58018 #> Within R2                           0.12245          0.53154         0.12074 #>  #>                                       est.4 #>                                 Ozone (ppb) #>                                             #> Solar Radiation (Langleys)   0.051* (0.024) #> Wind Speed (mph)           -3.29*** (0.778) #> Temperature                 2.05*** (0.242) #> Month fixed effect                      yes #> Day fixed effect                        yes #> __________________________ ________________ #> S.E.: Clustered                     by: Day #> Observations                            111 #> R2                                  0.81604 #> Within R2                           0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"postprocessing-with-external-functions","dir":"Articles","previous_headings":"Exporting multiple estimations to data.frames > Changing the look of the data.frame with style.df","what":"Postprocessing with external functions","title":"Exporting estimation tables","text":"Since output etable data.frame, formatting function handling data.frames can leveraged. easy integrate etable. Let’s example package pander: ? First, called function pandoc.table.return within etable. Second, argument style etable pander’s function. Indeed, arguments postprocessing function caught passed . far good. say: bother using posprocessing function just use piping? ’re right, wait second next section.","code":"library(pander)  etable(est, postprocess.df = pandoc.table.return, style = \"rmarkdown\") #>  #>  #> |           &nbsp;           |      est.1       |      est.2       | #> |:--------------------------:|:----------------:|:----------------:| #> |      Dependent Var.:       |   Ozone (ppb)    |   Ozone (ppb)    | #> |                            |                  |                  | #> | Solar Radiation (Langleys) | 0.115*** (0.023) |  0.052* (0.020)  | #> |      Wind Speed (mph)      |                  | -3.11*** (0.799) | #> |        Temperature         |                  | 1.88*** (0.367)  | #> |       Fixed-Effects:       | ---------------- | ---------------- | #> |           Month            |       Yes        |       Yes        | #> |            Day             |        No        |        No        | #> | __________________________ | ________________ | ________________ | #> |      S.E.: Clustered       |     by: Day      |     by: Day      | #> |        Observations        |       111        |       111        | #> |             R2             |     0.31974      |     0.63686      | #> |         Within R2          |     0.12245      |     0.53154      | #>  #> Table: Table continues below #>  #>   #>  #> |      est.3      |      est.4       | #> |:---------------:|:----------------:| #> |   Ozone (ppb)   |   Ozone (ppb)    | #> |                 |                  | #> | 0.108** (0.033) |  0.051* (0.024)  | #> |                 | -3.29*** (0.778) | #> |                 | 2.05*** (0.242)  | #> | --------------- | ---------------- | #> |       Yes       |       Yes        | #> |       Yes       |       Yes        | #> | _______________ | ________________ | #> |     by: Day     |     by: Day      | #> |       111       |       111        | #> |     0.58018     |     0.81604      | #> |     0.12074     |     0.61471      |"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"setting-etable-default-values","dir":"Articles","previous_headings":"Exporting multiple estimations to data.frames > Changing the look of the data.frame with style.df","what":"Setting etable default values","title":"Exporting estimation tables","text":"One important feature etable can set default values almost arguments. includes postprocessing function. Let’s change default values style.df postprocess.df: Since now pandoc.table.return default postprocessing, arguments added etable. calls like valid even though style caption arguments etable:","code":"my_style = style.df(depvar.title = \"\", fixef.title = \"\",                      fixef.suffix = \" fixed effect\", yesNo = \"yes\") setFixest_etable(style.df = my_style, postprocess.df = pandoc.table.return) etable(est[rhs = 2], style = \"rmarkdown\", caption = \"New default values\") #>  #>  #> |           &nbsp;           |  est[rhs = 2].1  |  est[rhs = 2].2  | #> |:--------------------------:|:----------------:|:----------------:| #> |                            |   Ozone (ppb)    |   Ozone (ppb)    | #> |                            |                  |                  | #> | Solar Radiation (Langleys) |  0.052* (0.020)  |  0.051* (0.024)  | #> |      Wind Speed (mph)      | -3.11*** (0.799) | -3.29*** (0.778) | #> |        Temperature         | 1.88*** (0.367)  | 2.05*** (0.242)  | #> |     Month fixed effect     |       yes        |       yes        | #> |      Day fixed effect      |                  |       yes        | #> | __________________________ | ________________ | ________________ | #> |      S.E.: Clustered       |     by: Day      |     by: Day      | #> |        Observations        |       111        |       111        | #> |             R2             |     0.63686      |     0.81604      | #> |         Within R2          |     0.53154      |     0.61471      | #>  #> Table: New default values"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"exporting-multiple-estimations-to-latex","dir":"Articles","previous_headings":"","what":"Exporting multiple estimations to Latex","title":"Exporting estimation tables","text":"now illustrate exports Latex. First, include sections table, let’s add fifth estimation previous example; new estimation includes variables varying slopes: export Latex, use argument tex = TRUE (note argument argument file missing): previous code produces following table:  style table rather sober, worries: can customized. now illustrate: ) change look table argument style.tex, include custom features argument postproces.tex.","code":"est_slopes = feols(Ozone ~ Solar.R + Wind | Day + Month[Temp], airquality) etable(est, est_slopes, tex = TRUE)"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"changing-the-look-of-the-latex-table-with-style-tex","dir":"Articles","previous_headings":"Exporting multiple estimations to Latex","what":"Changing the look of the Latex table with style.tex","title":"Exporting estimation tables","text":"argument style.tex defines table looks. allows -depth customization table. table split several components, allowing customization. components table associated keywords described following figure:  argument style.tex accepts outputs function style.tex. function documented describes different components can found previous illustration. function style.tex two starting points (argument main), either style first table displayed, either much compact style named “aer”. Let’s show table aer style, without stars beside coefficients, different fit statistics: yields following table:","code":"etable(est, est_slopes, style.tex = style.tex(\"aer\"),         signif.code = NA, fitstat = ~ r2 + n, tex = TRUE)"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"adding-custom-features-with-postprocess-tex","dir":"Articles","previous_headings":"Exporting multiple estimations to Latex","what":"Adding custom features with postprocess.tex","title":"Exporting estimation tables","text":"tex = TRUE etable returns character vector. possible modify argument postprocess.tex. postprocessing function detected, two additional tags added character vector identifying start end table (\"%start:tab\\\\n\" \"%end:tab\\\\n\"). Assume want set rule widths table, write following function: Now can summon function etable: course even convenient set set_rules default postprocessing function.","code":"set_rules = function(x, heavy, light){   # x: the character vector returned by etable      tex2add = \"\"   if(!missing(heavy)){     tex2add = paste0(\"\\\\setlength\\\\heavyrulewidth{\", heavy, \"}\\n\")   }   if(!missing(light)){     tex2add = paste0(tex2add, \"\\\\setlength\\\\lightrulewidth{\", light, \"}\\n\")   }      if(nchar(tex2add) > 0){     x[x == \"%start:tab\\n\"] = tex2add   }      x } etable(est, est_slopes, postprocess.tex = set_rules, heavy = \"0.14em\", tex = TRUE)"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"setting-etable-default-values-latex-edition","dir":"Articles","previous_headings":"Exporting multiple estimations to Latex > Adding custom features with postprocess.tex","what":"Setting etable default values: Latex edition","title":"Exporting estimation tables","text":"set default values, like data.frame output, use setFixest_etable: Now can access directly arguments postprocessing function default style one second table:","code":"setFixest_etable(style.tex = style.tex(\"aer\", signif.code = NA), postprocess.tex = set_rules,                   fitstat = ~ r2 + n) etable(est, heavy = \"0.14em\", tex = TRUE) #> \\begingroup #> \\centering #> \\setlength\\heavyrulewidth{0.14em} #> \\begin{tabular}{lcccc} #>    \\toprule #>     & \\multicolumn{4}{c}{Ozone (ppb)}\\\\ #>                               & (1)           & (2)           & (3)           & (4)\\\\   #>    \\midrule  #>    Solar Radiation (Langleys) & 0.115         & 0.052         & 0.108         & 0.051\\\\    #>                               & (0.023)       & (0.020)       & (0.033)       & (0.024)\\\\    #>    Wind Speed (mph)           &               & -3.11         &               & -3.29\\\\    #>                               &               & (0.799)       &               & (0.778)\\\\    #>    Temperature                &               & 1.88          &               & 2.05\\\\    #>                               &               & (0.367)       &               & (0.242)\\\\    #>     \\\\ #>    R$^2$                      & 0.31974       & 0.63686       & 0.58018       & 0.81604\\\\   #>    Observations               & 111           & 111           & 111           & 111\\\\   #>     \\\\ #>    Month fixed effects        & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$\\\\    #>    Day fixed effects          &               &               & $\\checkmark$  & $\\checkmark$\\\\    #>    \\bottomrule #> \\end{tabular} #> \\par\\endgroup"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"setting-custom-fit-statistics","dir":"Articles","previous_headings":"","what":"Setting custom fit statistics","title":"Exporting estimation tables","text":"often useful include table fit statistics standard, simply may included fixest built-fit statistics. possible include extra line table argument extralines, rather cumbersome possibly error-prone task repeated. avoid kind issue, fixest allows user register custom fit statistics. registered, can seamlessly called via fitstat argument etable. Let’s continue previous example using airquality data set, now let’s display different p-values statistical significance variable Solar.R. p-values vary depending compute VCOV matrix. example shortly explained: function fitstat_register tool add fit statistics fitstat engine. first argument, type, code name statistic summoned. argument alias provides row name statistics: look table. Finally fun argument function computing statistic. function must apply fixest estimation must also return single value. statistics registered, can seamlessly summoned argument fitstat appear order user provide. Note dot fitstat = ~ . + p_s + etc represents default statistics displayed need .","code":"fitstat_register(type = \"p_s\", alias = \"pvalue (standard)\",                  fun = function(x) pvalue(x, vcov = \"iid\")[\"Solar.R\"])  fitstat_register(type = \"p_h\", alias = \"pvalue (Heterosk.)\",                  fun = function(x) pvalue(x, vcov = \"hetero\")[\"Solar.R\"])  fitstat_register(type = \"p_day\", alias = \"pvalue (Day)\",                  fun = function(x) pvalue(x, vcov = ~Day)[\"Solar.R\"])  fitstat_register(type = \"p_month\", alias = \"pvalue (Month)\",                  fun = function(x) pvalue(x, vcov = ~Month)[\"Solar.R\"])  # We first reset the default values set in the previous sections setFixest_etable(reset = TRUE) # Now we display the results with the new fit statistics etable(est, fitstat = ~ . + p_s + p_h + p_day + p_month) #>                                         est.1              est.2 #> Dependent Var.:                   Ozone (ppb)        Ozone (ppb) #>                                                                  #> Solar Radiation (Langleys) 0.1148*** (0.0234)   0.0522* (0.0202) #> Wind Speed (mph)                              -3.109*** (0.7986) #> Temperature                                    1.875*** (0.3671) #> Fixed-Effects:             ------------------ ------------------ #> Month                                     Yes                Yes #> Day                                        No                 No #> __________________________ __________________ __________________ #> S.E.: Clustered                       by: Day            by: Day #> Observations                              111                111 #> R2                                    0.31974            0.63686 #> Within R2                             0.12245            0.53154 #> pvalue (standard)                     0.00022            0.02957 #> pvalue (Heterosk.)                    6.64e-6            0.02268 #> pvalue (Day)                             3e-5            0.01468 #> pvalue (Month)                        0.06066            0.26992 #>  #>                                        est.3              est.4 #> Dependent Var.:                  Ozone (ppb)        Ozone (ppb) #>                                                                 #> Solar Radiation (Langleys) 0.1078** (0.0329)   0.0509* (0.0236) #> Wind Speed (mph)                             -3.289*** (0.7777) #> Temperature                                   2.052*** (0.2415) #> Fixed-Effects:             ----------------- ------------------ #> Month                                    Yes                Yes #> Day                                      Yes                Yes #> __________________________ _________________ __________________ #> S.E.: Clustered                      by: Day            by: Day #> Observations                             111                111 #> R2                                   0.58018            0.81604 #> Within R2                            0.12074            0.61471 #> pvalue (standard)                    0.00196            0.03720 #> pvalue (Heterosk.)                   0.00103            0.02815 #> pvalue (Day)                         0.00263            0.03881 #> pvalue (Month)                       0.02676            0.29967 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/exporting_tables.html","id":"using-external-functions-to-export-multiple-results","dir":"Articles","previous_headings":"","what":"Using external functions to export multiple results","title":"Exporting estimation tables","text":"Thanks contributors (namely Karl Dunkle Werner), fixest objects compatible broom methods. means export functions building broom can leveraged, like instance excellent modelsummary. case use external export tools, tips. Multiple estimations, like object est previous examples, bit special broom methods can’t apply directly. export , first need coerce results list: simply using .list(est). default fixest estimations separated calculation VCOV matrices. ’s problem using etable since, providing argument se cluster, VCOVs calculated . Using tools exportation requires call summary model compute appropriate standard-errors. process can also automatized. function .l() can used coerce several fixest objects summary can applied, example: previous code returns list five estimations standard-errors clustered Month level, can exported external software.","code":"summary(.l(est, est_slopes), cluster = ~ Month)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"simple-example-using-trade-data","dir":"Articles","previous_headings":"","what":"Simple example using trade data","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"example deals international trade, setup usually requires performing estimations many fixed-effects. estimate simple gravity model interested finding negative effect geographic distance trade. sample data consists European trade extracted Eurostat. Let’s load data contained package: data sample bilateral importations EU15 countries 2007 2016. data broken according 20 product categories. sample data: dependent variable estimation level trade two countries independent variable geographic distance two countries. obtain elasticity geographic distance net effects four fixed-effects, estimate following: \\(E\\left(Trade_{,j,p,t}\\right)=\\gamma_{}^{Exporter}\\times\\gamma_{j}^{Importer}\\times\\gamma_{p}^{Product}\\times\\gamma_{t}^{Year}\\times Distance_{ij}^{\\beta}\\), subscripts \\(\\), \\(j\\), \\(p\\) \\(t\\) stand respectively exporting country, importing country, type product year, \\(\\gamma_{v}^{c}\\) fixed-effects groups. \\(\\beta\\) elasticity interest. Note use Poisson/Negative Binomial families, relationship fact linear right hand side exponentialized avoid negative values Poisson parameter. leads equivalent relation:1 \\(E\\left(Trade_{,j,p,t}\\right)=\\exp\\left(\\gamma_{}^{Exporter}+\\gamma_{j}^{Importer}+\\gamma_{p}^{Product}+\\gamma_{t}^{Year}+\\beta\\times \\ln Distance_{ij}\\right)\\).","code":"library(fixest) data(trade)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"estimation","dir":"Articles","previous_headings":"Simple example using trade data","what":"Estimation","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"estimation model using Poisson likelihood follows: function fepois actually alias function feglm family = poisson. results can shown directly print method: print reports coefficient estimates standard-errors well information. Among quality fit information, squared-correlation corresponds correlation dependent variable expected predictor; reflects somehow idea R-square OLS estimations. Note estimation performed using parallel computing can control using argument nthreads (see “multi-threading” section details).","code":"gravity_pois = fepois(Euros ~ log(dist_km) | Origin + Destination + Product + Year, trade) print(gravity_pois) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20,  Year: 10 #> Standard-errors: Clustered (Origin)  #>              Estimate Std. Error t value  Pr(>|t|)     #> log(dist_km) -1.52787   0.115678 -13.208 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.025e+11   Adj. Pseudo R2: 0.764032 #>            BIC:  1.405e+12     Squared Cor.: 0.612021"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"clustering-the-standard-errors","dir":"Articles","previous_headings":"Simple example using trade data","what":"Clustering the standard-errors","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"cluster standard-errors, can simply use argument vcov summary method. Let’s say want cluster standard-errors according first two fixed-effects (.e. Origin Destination variables). just : clustering can done one, two, three four variables. estimation includes fixed-effects, default clustering done using fixed-effects, original order. Origin Destination variables used two-way clustering previous example. , instead, wanted perform one-way clustering Product variable, need provide formula use argument cluster: produce results: Note can always cluster standard-errors, even estimation contained fixed-effect: Finally, standard-errors can also computed estimation time, simply need add vcov argument:","code":"summary(gravity_pois, vcov = \"twoway\") #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20,  Year: 10 #> Standard-errors: Clustered (Origin & Destination)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52787   0.130734 -11.6869 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.025e+11   Adj. Pseudo R2: 0.764032 #>            BIC:  1.405e+12     Squared Cor.: 0.612021 # Three ways to summon clustering on the Product variable summary(gravity_pois, vcov = ~Product) summary(gravity_pois, cluster = \"Product\") summary(gravity_pois, cluster = ~Product) summary(gravity_pois, cluster = ~Product) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20,  Year: 10 #> Standard-errors: Clustered (Product)  #>              Estimate Std. Error t value  Pr(>|t|)     #> log(dist_km) -1.52787   0.098294 -15.544 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.025e+11   Adj. Pseudo R2: 0.764032 #>            BIC:  1.405e+12     Squared Cor.: 0.612021 gravity_simple = fepois(Euros ~ log(dist_km), trade) # We use a formula to specify the variables used for two way clustering # (note that the values of the variables are fetched directly in the original database) summary(gravity_simple, ~Origin + Destination) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Standard-errors: Clustered (Origin & Destination)  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  24.70889   1.124768 21.96798  < 2.2e-16 *** #> log(dist_km) -1.02896   0.158022 -6.51145 7.4429e-11 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -2.426e+12   Adj. Pseudo R2: 0.185023 #>            BIC:  4.852e+12     Squared Cor.: 0.055107 fepois(Euros ~ log(dist_km), trade, vcov = ~Product) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Standard-errors: Clustered (Product)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)  24.70889   0.330044  74.8654 < 2.2e-16 *** #> log(dist_km) -1.02896   0.045954 -22.3909 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -2.426e+12   Adj. Pseudo R2: 0.185023 #>            BIC:  4.852e+12     Squared Cor.: 0.055107"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"other-standard-errors","dir":"Articles","previous_headings":"Simple example using trade data","what":"Other standard-errors","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Talking standard-errors… clustered standard-errors can computed… many ways achieve thing… many shortcuts know. leave don’t forget look section describing use vcov argument!","code":""},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"other-estimation-functions","dir":"Articles","previous_headings":"Simple example using trade data","what":"Other estimation functions","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Now estimate relationship OLS. need put left hand side logarithm (since right-hand-side exponentialized): course can use different families feglm, exactly glm. get estimation fixed-effects Negative Binomial:","code":"gravity_ols = feols(log(Euros) ~ log(dist_km) | Origin + Destination + Product + Year, trade) gravity_negbin = fenegbin(Euros ~ log(dist_km) | Origin + Destination + Product + Year, trade)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"viewing-the-results-in-r","dir":"Articles","previous_headings":"Simple example using trade data","what":"Viewing the results in R","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Now let’s say want compact overview results several estimations. best way use function etable. function summarizes results several fixest estimations data.frame. see fixed-effects results three different likelihoods, just type: added argument vcov=\"twoway\" cluster standard-errors estimations. can seen function gives overview estimates standard-errors, well quality fit measures. argument headers used add information estimation column. previous example, directly added estimation results arguments function etable. function also accepts lists estimations. Let’s give example. Say want see influence introduction fixed-effects estimate elasticity distance. can following code use argument fixef include fixed-effects (instead inserting directly formula): previous code performs 4 estimations increasing number fixed-effects store results list named gravity_subfe. show results 4 estimations, ’s easy: view 4 estimations, reporting two-way clustered standard-errors thanks use argument cluster.","code":"etable(gravity_pois, gravity_negbin, gravity_ols,          vcov = \"twoway\", headers = c(\"Poisson\", \"Negative Binomial\", \"Gaussian\")) gravity_subfe = list() all_FEs = c(\"Year\", \"Destination\", \"Origin\") for(i in 0:3){     gravity_subfe[[i+1]] = fepois(Euros ~ log(dist_km), trade, fixef = all_FEs[0:i]) } etable(gravity_subfe, cluster = ~Origin+Destination)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"multiple-estimations","dir":"Articles","previous_headings":"Simple example using trade data","what":"Multiple estimations","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Note since version 0.8.0, multiple estimations can performed without requiring loops. Let’s replicate previous example using fixest stepwise functions: previous line code performs 4 estimations. function csw0 key , means: cumulative stepwise starting empty element. Starting empty element, new estimation adds new element csw0() function, quite like previous loop. can consider results, res_multi, list results, although specific methods easily access element. Stepwise functions can applied linear right-hand-side fixed-effects, can also multiple dependent variables perform split sample estimations argument split. detailed dedicated vignette: Multiple estimations.","code":"res_multi = fepois(Euros ~ log(dist_km) | csw0(Year, Destination, Origin), trade)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"exporting-the-results-to-latex","dir":"Articles","previous_headings":"Simple example using trade data","what":"Exporting the results to Latex","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"far seen report results multiple estimations R console. Now, using function etable, can also export results high quality Latex tables. just need provide argument tex = TRUE: user can export Latex table directly file (argument file), add title (arg. title) label table (arg. label). Note argument file present, Latex format becomes default (.e. tex = TRUE default). coefficients can renamed easily (arg. dict), can dropped (arg. drop) can easily reordered regular expressions (arg. order). significance codes can easily changed (arg. signifCode) quality fit information can customized (argument fitstat). Among others, number fixed-effect per fixed-effect dimension can also displayed using argument fixef_sizes.","code":"# with two-way clustered SEs etable(res_multi, cluster = ~Origin+Destination, tex = TRUE) #> \\begingroup #> \\centering #> \\begin{tabular}{lcccc} #>    \\tabularnewline \\midrule \\midrule #>    Dependent Variable: & \\multicolumn{4}{c}{Euros}\\\\ #>    Model:              & (1)                   & (2)                   & (3)                   & (4)\\\\   #>    \\midrule #>    \\emph{Variables}\\\\ #>    Constant            & 24.71$^{***}$         &                       &                       &   \\\\    #>                        & (1.125)               &                       &                       &   \\\\    #>    log(dist\\_km)       & -1.029$^{***}$        & -1.029$^{***}$        & -1.226$^{***}$        & -1.518$^{***}$\\\\    #>                        & (0.1580)              & (0.1581)              & (0.2045)              & (0.1282)\\\\    #>    \\midrule #>    \\emph{Fixed-effects}\\\\ #>    Year                &                       & Yes                   & Yes                   & Yes\\\\   #>    Destination         &                       &                       & Yes                   & Yes\\\\   #>    Origin              &                       &                       &                       & Yes\\\\   #>    \\midrule #>    \\emph{Fit statistics}\\\\ #>    Observations        & 38,325                & 38,325                & 38,325                & 38,325\\\\   #>    Squared Correlation & 0.05511               & 0.05711               & 0.16420               & 0.38479\\\\   #>    Pseudo R$^2$        & 0.18502               & 0.18833               & 0.35826               & 0.59312\\\\   #>    BIC                 & $4.85\\times 10^{12}$  & $4.83\\times 10^{12}$  & $3.82\\times 10^{12}$  & $2.42\\times 10^{12}$\\\\    #>    \\midrule \\midrule #>    \\multicolumn{5}{l}{\\emph{Clustered (Origin \\& Destination) standard-errors in parentheses}}\\\\ #>    \\multicolumn{5}{l}{\\emph{Signif. Codes: ***: 0.01, **: 0.05, *: 0.1}}\\\\ #> \\end{tabular} #> \\par\\endgroup"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"an-elaborate-example","dir":"Articles","previous_headings":"Simple example using trade data > Exporting the results to Latex","what":"An elaborate example","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Consider following example exportation two tables: example, two tables containing results 4 estimations directly exported Latex table file “Estimation Tables.tex”. First take notice () need use argument tex=TRUE since argument file present, Latex format becomes default. file re-created first exportation thanks argument replace = TRUE. change variable names Latex table, use argument dict. variable myDict dictionary use rename variables, simply named vector. original name variables correspond names myDict new names variables values vector. variable matches names myDict replaced value. Thus care order appearance variables estimation results. first export, coefficient intercept dropped using drop = \"Const\" (anything grepl(drop[1], \"Constant\") TRUE). second, coefficient distance put intercept (kept) thanks argument order. Note actions performed arguments drop order performed renaming takes place argument dict. Note can completely customize style table using style postprocessing arguments, please look dedicated vignette: Exporting estimation tables.","code":"# we set the dictionary once and for all myDict = c(\"log(dist_km)\" = \"$\\\\ln (Distance)$\", \"(Intercept)\" = \"Constant\") # 1st export: we change the signif code and drop the intercept etable(res_multi, signifCode = c(\"a\" = 0.01, \"b\" = 0.05),        drop = \"Const\", dict = myDict, file = \"Estimation Tables.tex\",         replace = TRUE, title = \"First export -- normal Standard-errors\") # 2nd export: clustered S-E + distance as the first coefficient etable(res_multi, cluster = ~Product, order = \"Dist\",         dict = myDict, file = \"Estimation Tables.tex\",         title = \"Second export -- clustered standard-errors (on Product variable)\")"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"extracting-the-fixed-effects-coefficients","dir":"Articles","previous_headings":"Simple example using trade data","what":"Extracting the fixed-effects coefficients","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"obtain fixed-effects estimation, function fixef must performed results. function returns list containing fixed-effects coefficients dimension. summary method helps quick overview: can see fixed-effects balanced across dimensions. Indeed, apart first dimension, one coefficient per fixed-effect needs set reference (.e. fixed 0) avoid collinearity across different fixed-effects dimensions. ensures fixed-effects coefficients can compared within given fixed-effect dimension. strictly one reference per fixed-effect dimension, interpretation possible . case though, warning message prompted. Note mean values meaningless per se, give reference points compare fixed-effects within dimension. Let’s look specifically Year fixed-effects: Finally, plot method helps distinguish notable fixed-effects:  dimension, fixed-effects first centered, sorted, finally notable (.e. highest lowest) reported. exponential coefficient reported right hand side simplify interpretation models log-link (Poisson model). can see country destination fixed-effects, trade involving France (FR), Italy () Germany (DE) destination countries 2.7 times higher EU15 average. , highest heterogeneity come product category, trade product 4 (dairy products) roughly 2.7 times average product 14 (vegetable plaiting materials) represents negligible fraction average. Note however interpretation fixed-effects must taken extra care. particular, fixed-effects can interpreted perfectly balanced.","code":"fixedEffects = fixef(gravity_pois) summary(fixedEffects) #> Fixed_effects coefficients #>                         Origin Destination Product  Year #> Number of fixed-effects     15          15      20    10 #> Number of references         0           1       1     1 #> Mean                      23.3        3.09  0.0129 0.157 #> Standard-deviation        1.28        1.11    1.36 0.113 #>  #> COEFFICIENTS: #>   Origin:    AT    BE    DE    DK    ES                  #>           22.51 23.56 24.71 23.44 24.97 ... 10 remaining #> ----- #>   Destination:    AT    BE    DE    DK    ES                  #>                2.436 2.696 4.323 2.451 4.043 ... 10 remaining #> ----- #>   Product: 1     2      3     4      5                  #>            0 1.414 0.6562 1.449 -1.521 ... 15 remaining #> ----- #>   Year: 2007    2008     2009    2010  2011                 #>            0 0.06912 0.005225 0.07331 0.163 ... 5 remaining fixedEffects$Year #>        2007        2008        2009        2010        2011        2012  #> 0.000000000 0.069122284 0.005225473 0.073308208 0.163013386 0.192605170  #>        2013        2014        2015        2016  #> 0.230629376 0.242605404 0.282800683 0.310325692 plot(fixedEffects)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"the-vcov-argument","dir":"Articles","previous_headings":"","what":"The vcov argument","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"version 0.10.0 fixest introduced argument vcov. argument highly versatile single-handedly manages standard-errors computed (note can find many example summary.fixest help pages). argument can many things, bear , now, let’s start trying describe !","code":""},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"basics-main-calls-and-shortcuts","dir":"Articles","previous_headings":"The vcov argument","what":"Basics: main calls and shortcuts","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"far (version 0.10.0), six types standard-errors can computed, keywords brief description: iid: assumes error variance spherical, .e. errors homoskedastic correlated (independent identically distributed errors spherical error variance). hetero: assumes errors heteroskedastic (White correction). cluster, twoway: clustered SEs, assumes errors correlated within cluster groups. NW, newey_west: Newey West (1987) SEs time series panel data, assumes heteroskedastic serially correlated errors. DK, driscoll_kraay: Driscoll Kraay (1998) SEs panel data, assumes cross-sectionally serially correlated errors. conley: Conley (1999) SEs cross-sections, assumes spatially correlated errors. basic uses vcov argument : character scalar: vcov = \"vcov_type\" (ex: vcov = \"hetero\"). formula form: vcov = vcov_type ~ variables variables used compute SEs (ex: vcov = DK ~ period). VCOV types need information variables computed. types, one needs use formula inform variables. Let’s give first example: queried Newey-West SEs provided panel identifiers right formula. used keyword , led error: , huh error message says? time variable can deduced? Indeed, ’s thing: algorithm tries hard provide sensible default values user. Let’s now try panel identifiers set estimation time: Oh, now works! However can see shade disappointment eyes: since need add panel.id = ~id + period end typing! Well, ’m done: typically tend make many estimations data set, may useful set characteristics globally. can done setFixest_estimation() function: Although exact two lines code led error paragraphs ago, now works fine. another example implicit deduction: SEs clustered unit identifier panel. Note even fixed-effects present, panel identifier takes precedence clustering: course, panel identifier missing, automatic clustering falls back first fixed-effect present: Talking clustered SEs, note common operation empty keyword equivalent clustered SEs, vcov = ~id + period lead SEs clustered id period: Finally, last example using Conley SEs: case latitude longitude deduced variables names data set used estimation (\"lat\" \"long\"). Note , convenience, automatic distance cutoff deduced data likely appropriate! pass cutoff parameter? ’s ’ll see next section!","code":"data(base_did) est = feols(y ~ x1, base_did) # Note that there is partial matching enabled (newey = newey_west) summary(est, newey ~ id + period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=1)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.174111 11.4223 1.1709e-06 *** #> x1          0.983110   0.052699 18.6551 1.6762e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357 summary(est, \"newey_west\") #> Error in vcov.fixest(object, vcov = vcov, ssc = ssc, forceCovariance = forceCovariance, : To compute the Newey-West VCOV, we need a variable for the time. Since you didn't provide it in the formula, we typically deduce it from the 'panel.id' identifiers. Problem: no 'panel.id' was set in this estimation. Please provide it in the formula. est_panel = feols(y ~ x1, base_did, panel.id = ~id + period) summary(est_panel, \"newey_west\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=1)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.174111 11.4223 1.1709e-06 *** #> x1          0.983110   0.052699 18.6551 1.6762e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357 setFixest_estimation(panel.id = ~id + period) est_implicit = feols(y ~ x1, base_did) summary(est_implicit, \"newey_west\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=1)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.174111 11.4223 1.1709e-06 *** #> x1          0.983110   0.052699 18.6551 1.6762e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357 summary(est_implicit, \"cluster\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Clustered (id)  #>             Estimate Std. Error t value  Pr(>|t|)     #> (Intercept) 1.988753   0.194352 10.2327 < 2.2e-16 *** #> x1          0.983110   0.046789 21.0115 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357 feols(y ~ x1 | period, base_did, \"cluster\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: period: 10 #> Standard-errors: Clustered (id)  #>    Estimate Std. Error t value  Pr(>|t|)     #> x1 0.997536   0.045721  21.818 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.5526     Adj. R2: 0.357059 #>                Within R2: 0.297883 # Removing the panel setFixest_estimation(reset = TRUE) feols(y ~ x1 | period, base_did, \"cluster\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: period: 10 #> Standard-errors: Clustered (period)  #>    Estimate Std. Error t value   Pr(>|t|)     #> x1 0.997536   0.050264 19.8458 9.7207e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.5526     Adj. R2: 0.357059 #>                Within R2: 0.297883 feols(y ~ x1 | period, base_did, ~id + period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: period: 10 #> Standard-errors: Clustered (id & period)  #>    Estimate Std. Error t value   Pr(>|t|)     #> x1 0.997536   0.047498 21.0015 5.8984e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.5526     Adj. R2: 0.357059 #>                Within R2: 0.297883 data(quakes) feols(depth ~ mag, quakes, \"conley\") #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (90km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   110.6727  7.96606 4.4465e-15 *** #> mag         -123.421    20.1746 -6.11765 1.3619e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"using-dedicated-functions","dir":"Articles","previous_headings":"The vcov argument","what":"Using dedicated functions","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"VCOVs require parameters: example Newey-West VCOV, need provide number lags consider. Although automatically deduced via rule thumb, user likely want use (test) values. provide extra parameters, two solutions: use helper functions name VCOV keywords (ex: NW newey_west two functions). use dedicated VCOV functions (ex: vcov_NW). now cover two methods turn. Helper functions can seen supercharged keywords: used place VCOV keywords also accept arguments. two examples: first example, use helper function NW() directly formula, exactly VCOV type . first () argument NW() number lags. right hand side formula, give variables used identify unit time variables, usual. second example, use formula directly helper function conley() provide two arguments: cutoff (first argument) distance computed. latitude longitude still deduced data. deduced, provide formula giving , like previous example. also dedicated VCOV functions work standard way. Let’s redo two examples : Contrary helper functions: ) functions used formula, b) accept variables compute SEs arguments. provide alternative way specify VCOV.","code":"feols(y ~ x1 | period, base_did, NW(2) ~ id + period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: period: 10 #> Standard-errors: Newey-West (L=2)  #>    Estimate Std. Error t value   Pr(>|t|)     #> x1 0.997536   0.049344 20.2159 8.2589e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.5526     Adj. R2: 0.357059 #>                Within R2: 0.297883  feols(depth ~ mag, quakes, conley(200, distance = \"spherical\")) #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (200km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   128.2426  6.87467 1.0937e-11 *** #> mag         -123.421    22.8950 -5.39074 8.7582e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245 feols(y ~ x1 | period, base_did, vcov_NW(\"id\", \"period\", lag = 2)) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: period: 10 #> Standard-errors: Newey-West (L=2)  #>    Estimate Std. Error t value   Pr(>|t|)     #> x1 0.997536   0.049344 20.2159 8.2589e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.5526     Adj. R2: 0.357059 #>                Within R2: 0.297883  feols(depth ~ mag, quakes, vcov_conley(lat = \"lat\", lon = \"long\",                                         cutoff = 200, distance = \"spherical\")) #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (200km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   128.2426  6.87467 1.0937e-11 *** #> mag         -123.421    22.8950 -5.39074 8.7582e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"small-sample-correction","dir":"Articles","previous_headings":"The vcov argument","what":"Small sample correction","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"value SEs can (sometimes quite surprisingly) impacted type small sample correction (SSC) applied. fixest can monitor SSC function ssc(). Details SSCs computed can found dedicated vignette: standard-errors – detail implementation. fixest functions accept ssc argument can readily use. ’s example: Instead providing argument ssc, can instead add ssc call directly within formula vcov. case simply add variable. now replicate previous example using list several VCOVs etable (’s function accepts lists argument vcov): can also tweak iid hetero SEs using formula:","code":"est = feols(y ~ x1 | id, base_did) est_up = feols(y ~ x1 | id, base_did, ssc = ssc(fixef.K = \"full\")) est_down = feols(y ~ x1 | id, base_did, ssc = ssc(adj = FALSE, cluster.adj = FALSE)) etable(est, est_up, est_down) #>                                est             est_up           est_down #> Dependent Var.:                  y                  y                  y #>                                                                          #> x1              0.9615*** (0.0481) 0.9615*** (0.0507) 0.9615*** (0.0478) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> id                             Yes                Yes                Yes #> _______________ __________________ __________________ __________________ #> S.E.: Clustered             by: id             by: id             by: id #> Observations                 1,080              1,080              1,080 #> R2                         0.38715            0.38715            0.38715 #> Within R2                  0.26507            0.26507            0.26507 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 etable(est, vcov = list(~id, ~id + ssc(fixef.K = \"full\"),                          ~id + ssc(adj = FALSE, cluster.adj = FALSE))) #>                                est              est.1              est.2 #> Dependent Var.:                  y                  y                  y #>                                                                          #> x1              0.9615*** (0.0481) 0.9615*** (0.0507) 0.9615*** (0.0478) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> id                             Yes                Yes                Yes #> _______________ __________________ __________________ __________________ #> S.E.: Clustered             by: id             by: id             by: id #> Observations                 1,080              1,080              1,080 #> R2                         0.38715            0.38715            0.38715 #> Within R2                  0.26507            0.26507            0.26507 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 feols(y ~ x1 | id, base_did, iid ~ ssc(adj = FALSE)) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: id: 108 #> Standard-errors: IID  #>    Estimate Std. Error t value  Pr(>|t|)     #> x1 0.961525   0.048741 19.7272 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.46555     Adj. R2: 0.318981 #>                 Within R2: 0.265068 feols(y ~ x1 | id, base_did, hetero ~ ssc(adj = FALSE)) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: id: 108 #> Standard-errors: Heteroskedasticity-robust  #>    Estimate Std. Error t value  Pr(>|t|)     #> x1 0.961525   0.050226 19.1438 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.46555     Adj. R2: 0.318981 #>                 Within R2: 0.265068"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"other-types-of-vcovs","dir":"Articles","previous_headings":"The vcov argument","what":"Other types of VCOVs","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Finally, ’re approaching end tour vcov argument. argument can also accept: matrix, used VCOV (possibly useful specific contexts) function applied fixest object compute VCOV. matrix case needs explanation, let’s lines function. can provide custom functions compute VCOV: argument type argument summary passed directly function vcovHC. Note estimations can still pass functions must accept extra arguments. Hence creating wrapper function may necessary:","code":"summary(est, vcov = sandwich::vcovHC, type = \"HC1\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: id: 108 #> Standard-errors: vcovHC  #>    Estimate Std. Error t value  Pr(>|t|)     #> x1 0.961525   0.050226 19.1438 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.46555     Adj. R2: 0.318981 #>                 Within R2: 0.265068 feols(y ~ x1 | id, base_did, vcov = function(x) sandwich::vcovHC(x, type = \"HC1\")) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: id: 108 #> Standard-errors: vcovHC(x, type = \"HC1\")  #>    Estimate Std. Error t value  Pr(>|t|)     #> x1 0.961525   0.050226 19.1438 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.46555     Adj. R2: 0.318981 #>                 Within R2: 0.265068"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"instrumental-variables","dir":"Articles","previous_headings":"","what":"Instrumental variables","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Two stage least square estimations can performed simply adding formula link endogenous instrumental variables. Let’s example. ’ve just performed two stage least squares estimation. formula coming pipe, x_endo_1 + x_endo_2 ~ x_inst_1 + x_inst_2, describes endogenous variables (left) instruments (right). default, three statistics displayed: F-test first stage (weak instrument test), Wu-Hausman endogeneity test overidentifying restrictions (Sargan) test. Note Sargan statistic appears relevant (.e. # instr. > # endo. vars., case ). can use fitstat command summon kind tests, notably Wald tests first/second stages: Wald test relies given variance-covariance matrix, can pass extra arguments fitstat, argument cluster previous example, specify type VCOV matrix desired. Note can display statistics wish printing changing default print values: previous code, fitstat = ~ . + ivwald2 means want add second stage Wald test existing printed statistics (represented point). Now adding fixed-effects? ’s course possible, need add first right-hand-side, follows: access first stage(s), can use summary method: summary shall return one element, object returned regular fixest object fixest_multi object. kind objects covered vignette: Multiple estimations. can display first second stages table etable: use stage = 1:2 get first stage regressions followed second stage. Using stage = 2:1 done opposite. Now explanations regarding fitstat. suffix concerns IV means following: ’s first stage regression, first-stage F-stat displayed, otherwise ’s second stage F-stat. suffix .p used ivwaldall.p access p-value statistic. Finally, can permanently set fit statistic display etable using setFixest_etable, like example setFixest_etable(fitstat = ~ . + ivfall + ivwaldall.p).","code":"base = iris names(base) = c(\"y\", \"x1\", \"x_endo_1\", \"x_inst_1\", \"fe\") set.seed(2) base$x_inst_2 = 0.2 * base$y + 0.2 * base$x_endo_1 + rnorm(150, sd = 0.5) base$x_endo_2 = 0.2 * base$y - 0.2 * base$x_inst_1 + rnorm(150, sd = 0.5)  est_iv = feols(y ~ x1 | x_endo_1 + x_endo_2 ~ x_inst_1 + x_inst_2, base) est_iv #> TSLS estimation, Dep. Var.: y, Endo.: x_endo_1, x_endo_2, Instr.: x_inst_1, x_inst_2 #> Second stage: Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.831380   0.411435  4.45121 1.6844e-05 *** #> fit_x_endo_1 0.444982   0.022086 20.14744  < 2.2e-16 *** #> fit_x_endo_2 0.639916   0.307376  2.08186 3.9100e-02 *   #> x1           0.565095   0.084715  6.67051 4.9180e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.398842   Adj. R2: 0.761653 #> F-test (1st stage), x_endo_1: stat = 903.2    , p < 2.2e-16 , on 2 and 146 DoF. #> F-test (1st stage), x_endo_2: stat =   3.25828, p = 0.041268, on 2 and 146 DoF. #>                   Wu-Hausman: stat =   6.79183, p = 0.001518, on 2 and 144 DoF. fitstat(est_iv, ~ ivf1 + ivwald1 + ivf2 + ivwald2, cluster = \"fe\") #> F-test (1st stage), x_endo_1: stat =     903.2    , p < 2.2e-16 , on 2 and 146 DoF. #> F-test (1st stage), x_endo_2: stat =       3.25828, p = 0.041268, on 2 and 146 DoF. #> Wald (1st stage), x_endo_1  : stat =   1,482.6    , p < 2.2e-16 , on 2 and 146 DoF, VCOV: Clustered (fe). #> Wald (1st stage), x_endo_2  : stat =       2.22157, p = 0.112092, on 2 and 146 DoF, VCOV: Clustered (fe). #>           F-test (2nd stage): stat =     194.2    , p < 2.2e-16 , on 2 and 146 DoF. #>             Wald (2nd stage): stat = 539,363.2    , p < 2.2e-16 , on 2 and 146 DoF, VCOV: Clustered (fe). setFixest_print(fitstat = ~ . + ivwald2) est_iv #> TSLS estimation, Dep. Var.: y, Endo.: x_endo_1, x_endo_2, Instr.: x_inst_1, x_inst_2 #> Second stage: Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.831380   0.411435  4.45121 1.6844e-05 *** #> fit_x_endo_1 0.444982   0.022086 20.14744  < 2.2e-16 *** #> fit_x_endo_2 0.639916   0.307376  2.08186 3.9100e-02 *   #> x1           0.565095   0.084715  6.67051 4.9180e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.398842   Adj. R2: 0.761653 #> F-test (1st stage), x_endo_1: stat = 903.2    , p < 2.2e-16 , on 2 and 146 DoF. #> F-test (1st stage), x_endo_2: stat =   3.25828, p = 0.041268, on 2 and 146 DoF. #>                   Wu-Hausman: stat =   6.79183, p = 0.001518, on 2 and 144 DoF. #>             Wald (2nd stage): stat = 224.0    , p < 2.2e-16 , on 2 and 146 DoF, VCOV: IID. est_iv_fe = feols(y ~ x1 | fe | x_endo_1 + x_endo_2 ~ x_inst_1 + x_inst_2, base) est_iv_fe #> TSLS estimation, Dep. Var.: y, Endo.: x_endo_1, x_endo_2, Instr.: x_inst_1, x_inst_2 #> Second stage: Dep. Var.: y #> Observations: 150  #> Fixed-effects: fe: 3 #> Standard-errors: Clustered (fe)  #>              Estimate Std. Error t value Pr(>|t|)     #> fit_x_endo_1 0.666671   0.106558 6.25640 0.024608 *   #> fit_x_endo_2 0.413839   0.177769 2.32796 0.145344     #> x1           0.451680   0.153375 2.94495 0.098553 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.327938     Adj. R2: 0.836626 #>                  Within R2: 0.585907 #> F-test (1st stage), x_endo_1: stat = 21.6    , p = 6.151e-9, on 2 and 146 DoF. #> F-test (1st stage), x_endo_2: stat =  4.78816, p = 0.00968 , on 2 and 146 DoF. #>                   Wu-Hausman: stat =  1.31408, p = 0.271968, on 2 and 142 DoF. #>             Wald (2nd stage): stat = 19.6    , p = 2.941e-8, on 2 and 146 DoF, VCOV: Clustered (fe). summary(est_iv_fe, stage = 1) #> IV: First stage: x_endo_1 #> TSLS estimation, Dep. Var.: x_endo_1, Endo.: x_endo_1, x_endo_2, Instr.: x_inst_1, x_inst_2 #> First stage: Dep. Var.: x_endo_1 #> Observations: 150  #> Fixed-effects: fe: 3 #> Standard-errors: Clustered (fe)  #>          Estimate Std. Error t value Pr(>|t|)  #> x_inst_1 0.705992   0.485614 1.45381  0.28320  #> x_inst_2 0.202337   0.143302 1.41196  0.29346  #> x1       0.189320   0.135622 1.39594  0.29751  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.346509     Adj. R2: 0.959865 #>                  Within R2: 0.338407 #> F-test (1st stage): stat = 21.6, p = 6.151e-9, on 2 and 146 DoF. #>  #> IV: First stage: x_endo_2 #> TSLS estimation, Dep. Var.: x_endo_2, Endo.: x_endo_1, x_endo_2, Instr.: x_inst_1, x_inst_2 #> First stage: Dep. Var.: x_endo_2 #> Observations: 150  #> Fixed-effects: fe: 3 #> Standard-errors: Clustered (fe)  #>           Estimate Std. Error  t value Pr(>|t|)     #> x_inst_1 -0.546745   0.081370 -6.71920  0.02144 *   #> x_inst_2  0.183092   0.083446  2.19415  0.15946     #> x1        0.153198   0.089148  1.71847  0.22785     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.51208     Adj. R2: 0.040133 #>                 Within R2: 0.063919 #> F-test (1st stage): stat = 4.78816, p = 0.00968, on 2 and 146 DoF. etable(summary(est_iv_fe, stage = 1:2), fitstat = ~ . + ivfall + ivwaldall.p) #>                         summary(est_..1 summary(est_iv..2 summary(est_i..3 #> Dependent Var.:                x_endo_1          x_endo_2                y #>                                                                            #> x_inst_1                0.7060 (0.4856) -0.5467* (0.0814)                  #> x_inst_2                0.2023 (0.1433)   0.1831 (0.0834)                  #> x1                      0.1893 (0.1356)   0.1532 (0.0891) 0.4517. (0.1534) #> x_endo_1                                                  0.6667* (0.1066) #> x_endo_2                                                   0.4138 (0.1778) #> Fixed-Effects:          --------------- ----------------- ---------------- #> fe                                  Yes               Yes              Yes #> _______________________ _______________ _________________ ________________ #> S.E.: Clustered                  by: fe            by: fe           by: fe #> Observations                        150               150              150 #> R2                              0.96121           0.07234          0.84211 #> Within R2                       0.33841           0.06392          0.58591 #> F-test (IV only)                 21.581            4.7882           8.3352 #> Wald (IV only), p-value         2.29e-9           1.32e-9          2.94e-8 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"interaction-terms","dir":"Articles","previous_headings":"","what":"Interaction terms","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"R users familiar base expansion operators creating model interaction terms, e.g. x1*x2, x1:x2, x1/x2. base operators work fixest models. However, package also provides specialized syntax creating interaction terms combining variables. Relative base methods, fixest methods offer significant performance gains synergies package’s functions. balance performance convenience, exact syntax depends whether interaction involves fixed-effects . walk categories, providing examples common use-cases.","code":""},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"interactions-involving-fixed-effects","dir":"Articles","previous_headings":"Interaction terms","what":"Interactions involving fixed-effects","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"two reasons want interact variables fixed-effects slot. First, may simply wish combine fixed-effects (e.g. firm × country effects). Second, wish allow varying slopes (e.g. time trend firm). Let us consider turn, using lightly modified version iris dataset:","code":"# Our base data for this section base = iris names(base) = c(\"y\", paste0(\"x\", 1:3), \"fe1\") # Create another \"fixed-effect\" base$fe2 = rep(letters[1:5], 30) head(base) #>     y  x1  x2  x3    fe1 fe2 #> 1 5.1 3.5 1.4 0.2 setosa   a #> 2 4.9 3.0 1.4 0.2 setosa   b #> 3 4.7 3.2 1.3 0.2 setosa   c #> 4 4.6 3.1 1.5 0.2 setosa   d #> 5 5.0 3.6 1.4 0.2 setosa   e #> 6 5.4 3.9 1.7 0.4 setosa   a"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"combining-several-fixed-effects-fe1fe2fe3---","dir":"Articles","previous_headings":"Interaction terms > Interactions involving fixed-effects","what":"Combining several fixed-effects (fe1^fe2^fe3...)","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Say want “combine” two fixed-effect variables fe1 fe2 create brand new fixed-effect variable. can simply via fixest’s special ^ operator: ^ operator thing paste0(species, \"_\", fe), convenient significantly faster large datasets. can still extract fixed-effects way: Note two fixed-effects can combined exactly manner (e.g. fe1^fe2^fe3), syntax carries multivariate clustering (e.g. cluster = ~fe1^fe2^fe3).","code":"est_comb = feols(y ~ x1 | fe1^fe2, base) est_comb #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Fixed-effects: fe1^fe2: 15 #> Standard-errors: Clustered (fe1^fe2)  #>    Estimate Std. Error t value   Pr(>|t|)     #> x1 0.782815   0.119465 6.55267 1.2854e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.406785     Adj. R2: 0.729861 #>                  Within R2: 0.280234 fixef(est_comb)[[1]] #>     setosa_a     setosa_b     setosa_c     setosa_d     setosa_e versicolor_a  #>     2.443630     2.384084     2.164943     2.296256     2.323630     3.713320  #> versicolor_b versicolor_c versicolor_d versicolor_e  virginica_a  virginica_b  #>     3.800694     4.003367     3.745539     3.575086     4.513272     3.986351  #>  virginica_c  virginica_d  virginica_e  #>     4.423725     4.216804     4.159382"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"varying-slopes-fex","dir":"Articles","previous_headings":"Interaction terms > Interactions involving fixed-effects","what":"Varying slopes (fe[x])","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"can introduce variables varying slopes directly fixed-effects part formula using square brackets ([]). Recall varying slopes allow us flexibly control heterogeneous effects across groups. Common real-life examples inclusion time trends observational unit (e.g. country), allowing effect control variable (e.g. income) moderated fixed-effect (e.g. gender). demonstrate continuing simple dataset. Say want estimate y function x1, controlling x2. Moreover, think slope coefficient x2 control variable allowed vary fe1 fixed-effect variable. can follows: want see slopes x2, just use function fixef: Note produces result feols(y ~ x1 + fe1/x2, base), much performant large datasets. trade-fe1[x2] method lose ability estimate confidence intervals resulting slope coefficients. fine cases just trying control confounding nuisance parameters. interested conducting statistical inference resulting slope coefficients require confidence intervals, use slower fe1/x2 approach instead.","code":"head(base) #>     y  x1  x2  x3    fe1 fe2 #> 1 5.1 3.5 1.4 0.2 setosa   a #> 2 4.9 3.0 1.4 0.2 setosa   b #> 3 4.7 3.2 1.3 0.2 setosa   c #> 4 4.6 3.1 1.5 0.2 setosa   d #> 5 5.0 3.6 1.4 0.2 setosa   e #> 6 5.4 3.9 1.7 0.4 setosa   a est_vs = feols(y ~ x1 | fe1[x2], base) est_vs #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Fixed-effects: fe1: 3 #> Varying slopes: x2 (fe1: 3) #> Standard-errors: Clustered (fe1)  #>    Estimate Std. Error t value Pr(>|t|)  #> x1 0.450006   0.156731  2.8712  0.10292  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.298706     Adj. R2: 0.863506 #>                  Within R2: 0.178944 summary(fixef(est_vs)) #> Fixed-effects/Slope coefficients #>                                 fe1 x2 (slopes: fe1) #> Number of fixed-effects/slopes    3                3 #> Number of references              0                0 #> Mean                            1.7            0.639 #> Standard-deviation             1.32            0.262 #>  #> COEFFICIENTS: #>   fe1: setosa versicolor virginica #>         2.926      1.879    0.3068 #> ----- #>   x2 (slopes: fe1): setosa versicolor virginica #>                     0.3677     0.6598    0.8903"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"interactions-that-dont-involve-fixed-effects","dir":"Articles","previous_headings":"Interaction terms","what":"Interactions that don’t involve fixed-effects","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"preceding interaction examples took place fixed-effects slot (.e. |). Underneath hood, methods like fe1^fe2 fe1[x2] use numerical shortcuts greatly speed computation. comes cost able richer inference interacted terms — e.g. construct confidence intervals — since swept model estimation time. many cases, prove perfectly acceptable trade-. , primary motivation estimating fixed-effects models first place remove confounding effect “nuisance” parameters. Yet, equally many cases want retain full inferential information interaction terms. example, difference--differences () research design. fixest offers specialized syntax combining terms model formula: (). shall see, () versatile just creating interaction terms. also able coerce individual variables factor , compared base R factor(), way allows better synergies fixest functions like etable coefplot/iplot. allow us perform common estimation tasks much easily. now illustrate main uses () help examples.","code":""},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"a-compact-syntax-for-factors-and-interactions-i","dir":"Articles","previous_headings":"Interaction terms > Interactions that don’t involve fixed-effects","what":"A compact syntax for factors and interactions: i()","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"function () accepts arguments ref, keep used identify levels keep. ’s example use : Now ’ve seen basic () functionality single variable, let’s see can put use interaction context. consider two examples increasing complexity.","code":"data(airquality) res_i1 = feols(Ozone ~ Solar.R + i(Month), airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). res_i2 = feols(Ozone ~ Solar.R + i(Month, ref = 8), airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). res_i3 = feols(Ozone ~ Solar.R + i(Month, keep = 5:6), airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  etable(res_i1, res_i2, res_i3, dict = c(\"6\" = \"June\", \"Month::5\" = \"May\"),         order = c(\"Int|May\", \"Mon\")) #>                             res_i1             res_i2             res_i3 #> Dependent Var.:              Ozone              Ozone              Ozone #>                                                                          #> May                                 -36.90*** (8.201)  -24.50*** (6.936) #> Month = June         5.069 (10.98)   -31.83** (11.05)    -19.46. (10.46) #> Month = 7         31.04*** (8.018)     -5.861 (8.146)                    #> Month = 8         36.90*** (8.201)                                       #> Month = 9            8.912 (7.763)  -27.99*** (7.845)                    #> Constant             3.219 (7.919)   40.12*** (7.828)   25.82*** (6.681) #> Solar.R         0.1148*** (0.0300) 0.1148*** (0.0300) 0.1253*** (0.0311) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   111                111                111 #> R2                         0.31974            0.31974            0.22452 #> Adj. R2                    0.28735            0.28735            0.20278 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"simple-difference-in-differences-twfe","dir":"Articles","previous_headings":"Interaction terms > Interactions that don’t involve fixed-effects","what":"Simple difference-in-differences (TWFE)","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"illustrate ()’s interaction functionality, estimate treatment effects time simple setup. Consider following dataset individuals (identified variable id) receive treatment others (represented variable treat). treatment takes effect period 6 onward. data look like : empirical approach use canonical two-way fixed effects (TWFE) model familiar many empirical researchers. regression context, TWFE essentially amounts interaction treat period variables. easily done using (fact_var, num_var, reference) syntax: , (period, treat, 5) creates set interact terms: One treat dummy period, excluding period 5 reference. explicit reference period optional, note need reference avoid collinearity problem posed id fixed effects. point, analysis interested whether treatment generated sustained impact outcome variable relative control group. makes period 5 (immediately prior treatment) obvious choice use relative anchor. also demonstrates advantage ()’s syntax offers equivalent base treat*factor(period) expansion, automatically use period 1 reference. course, specify levels factor(period) ahead time. rather tedious, whereas () allows us concisely fly. display treatment effects graph, can use function iplot:  function iplot reports coefficients variables created (), . case wanted display coefficients, including x1, can use function coefplot instead.","code":"# Sample data illustrating the DiD data(base_did) head(base_did) #>             y         x1 id period post treat #> 1  2.87530627  0.5365377  1      1    0     1 #> 2  1.86065272 -3.0431894  1      2    0     1 #> 3  0.09416524  5.5768439  1      3    0     1 #> 4  3.78147485 -2.8300587  1      4    0     1 #> 5 -2.55819959 -5.0443544  1      5    0     1 #> 6  1.72873240 -0.6363849  1      6    1     1 # Estimation of treatment × period effects # We also add individual and period fixed-effects: est_did = feols(y ~ x1 + i(period, treat, 5) | id + period, base_did) est_did #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Fixed-effects: id: 108,  period: 10 #> Standard-errors: Clustered (id)  #>                   Estimate Std. Error   t value   Pr(>|t|)     #> x1                0.973490   0.045678 21.311868  < 2.2e-16 *** #> period::1:treat  -1.403045   1.110267 -1.263701 2.0908e-01     #> period::2:treat  -1.247511   1.093145 -1.141213 2.5633e-01     #> period::3:treat  -0.273206   1.106935 -0.246813 8.0553e-01     #> period::4:treat  -1.795721   1.087974 -1.650518 1.0177e-01     #> period::6:treat   0.784452   1.028388  0.762798 4.4726e-01     #> period::7:treat   3.598897   1.101563  3.267081 1.4609e-03 **  #> period::8:treat   3.811766   1.247502  3.055519 2.8366e-03 **  #> period::9:treat   4.731426   1.097113  4.312617 3.6041e-05 *** #> period::10:treat  6.606229   1.120494  5.895817 4.4031e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 3.83653     Adj. R2: 0.48783  #>                 Within R2: 0.389628 iplot(est_did)"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"staggered-difference-in-differences-sun-and-abraham-2020","dir":"Articles","previous_headings":"Interaction terms > Interactions that don’t involve fixed-effects","what":"Staggered difference-in-differences (Sun and Abraham, 2020)","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Note content section valid fixest version 0.9.0 later. Despite TWFE’s long-standing popularity designs, recent research shone light biases can introduce differential timing. example, staggered treatment policy rollout. staggered analyzes, fixest provides sunab function implementing unbiased method Sun Abraham (2020) — hereafter: SA20. method based estimation treated cohort x time treatment dummies later aggregated obtain average treatment treated (ATT) period (full post treatment period). (Aside: Note use time treatment rather just time, need account staggered treatment via relative time measure.) Let’s walk example base_stagg data set, () different cohorts get treatment different periods, (b) effect treatment cohort-specific increasing time. Let’s first look data: Note variable year_treated set 1000 (.e. maximum value year) never treated. ’s quick visual depiction data. , notice staggered treatment rollout time-varying intensity. data hand, let’s move estimations. ’ll implement two models: “naive” consisting standard TWFE interaction (.e. treatment × time_to_treatment). using SA20 method. Let’s compare results plot form:  can see, TWFE results suffer varying degrees bias due staggered rollout. contrast, aggregated SA20 results much better job consistently estimating true effects. final example, ’s get average treatment effect treated (ATT): time aggregation coefficients operated across cohort non-negative time treatment. Note estimated ATT compares favourably true value -1. hood, sunab() function creates cohort x time treatment interactions function (), coefficients aggregated appropriate level function aggregate.fixest. obtain coefficients cohort x time treatment, one simply needs remove aggregation:","code":"data(base_stagg)  head(base_stagg) #>   id year year_treated time_to_treatment treated treatment_effect_true #> 2 90    1            2                -1       1                     0 #> 3 89    1            3                -2       1                     0 #> 4 88    1            4                -3       1                     0 #> 5 87    1            5                -4       1                     0 #> 6 86    1            6                -5       1                     0 #> 7 85    1            7                -6       1                     0 #>           x1           y #> 2 -1.0947021  0.01722971 #> 3 -3.7100676 -4.58084528 #> 4  2.5274402  2.73817174 #> 5 -0.7204263 -0.65103066 #> 6 -3.6711678 -5.33381664 #> 7 -0.3152137  0.49562631 #> [1] \"This graph requires ggplot2 which is currently not available.\" # \"Naive\" TWFE DiD (note that the time to treatment for the never treated is -1000) # (by using ref = c(-1, -1000) we exclude the period just before the treatment and  # the never treated) res_twfe = feols(y ~ x1 + i(time_to_treatment, ref = c(-1, -1000)) | id + year, base_stagg)  # To implement the Sun and Abraham (2020) method, # we use the sunab(cohort, period) function res_sa20 = feols(y ~ x1 + sunab(year_treated, year) | id + year, base_stagg) # Plot the two TWFE results iplot(list(res_twfe, res_sa20), sep = 0.5)  # Add the true results att_true = tapply(base_stagg$treatment_effect_true, base_stagg$time_to_treatment, mean)[-1] points(-9:8, att_true, pch = 15, col = 4)  legend(\"topleft\", col = c(1, 4, 2), pch = c(20, 15, 17),         legend = c(\"TWFE\", \"Truth\", \"Sun & Abraham (2020)\")) # The full ATT summary(res_sa20, agg = \"att\") #> OLS estimation, Dep. Var.: y #> Observations: 950  #> Fixed-effects: id: 95,  year: 10 #> Standard-errors: Clustered (id)  #>      Estimate Std. Error  t value  Pr(>|t|)     #> x1   0.994678   0.018378 54.12293 < 2.2e-16 *** #> ATT -1.133749   0.205070 -5.52858 2.882e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.921817     Adj. R2: 0.887984 #>                  Within R2: 0.876406 # Full disaggregation (you could have used summary instead of etable) head(etable(res_sa20, agg = FALSE), 20) #>                                   res_sa20 #> Dependent Var.:                          y #>                                            #> x1                      0.9947*** (0.0184) #> year = -9 x cohort = 10    0.3518 (0.3591) #> year = -8 x cohort = 9     0.0339 (0.4714) #> year = -8 x cohort = 10   -0.1919 (0.3529) #> year = -7 x cohort = 8    -0.5894 (0.7369) #> year = -7 x cohort = 9    0.8730. (0.4934) #> year = -7 x cohort = 10    0.0195 (0.6034) #> year = -6 x cohort = 7    -0.0421 (0.8657) #> year = -6 x cohort = 8    -0.6576 (0.5733) #> year = -6 x cohort = 9     0.8777 (0.5333) #> year = -6 x cohort = 10   -0.4036 (0.3474) #> year = -5 x cohort = 6    -0.6580 (0.9134) #> year = -5 x cohort = 7    -0.3170 (0.6979) #> year = -5 x cohort = 8    -0.2382 (0.4697) #> year = -5 x cohort = 9     0.3015 (0.6042) #> year = -5 x cohort = 10   -0.5648 (0.4632) #> year = -4 x cohort = 5    -0.9835 (0.6345) #> year = -4 x cohort = 6     0.3604 (0.8583) #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"additional-features","dir":"Articles","previous_headings":"","what":"Additional features","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Now present features package: Formula: macros dot square brackets. add lead/lags. Non-linear parameter estimation. Parallelism.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"formula-macros","dir":"Articles","previous_headings":"Additional features > Formula: macros and dot square brackets","what":"Formula macros","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"can useful, tidy workflow simply convenience, define formula macros: .e. macro variables representing several variables. package offers two functions deal : setFixest_fml set macro variables globally, xpd create formula macro variables either globally defined defined run time. example: Macro variables must start two dots. seen example, set globally can directly accessed xpd. example, xpd redefines formula run-time character vector input. fixest estimations call xpd internally appropriate. means following code works just fine: function xpd also accepts regular expression macros form ..(\"regex\") (regex(\"regex\")). macros encountered provided character vector/data.frame argument data, variables names matching regular expression placed formula. , since xpd called internally, following works:","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\") # Defining the macro variables setFixest_fml(..ctrl = ~poly(x2, 2) + poly(x3, 2)) # Accessing them xpd(y ~ x1 + ..ctrl) #> y ~ x1 + poly(x2, 2) + poly(x3, 2)  # Definition at run time vars = c(\"x2\", \"x2^2\", \"x3\") for(i in 1:3){   print(xpd(y ~ x1 + ..ctrl, ..ctrl = vars[1:i])) } #> y ~ x1 + x2 #> y ~ x1 + x2 + x2^2 #> y ~ x1 + x2 + x2^2 + x3 feols(y ~ x1 + ..ctrl, base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>               Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)   4.122797   0.233398 17.66423  < 2.2e-16 *** #> x1            0.562757   0.075897  7.41470 9.5941e-12 *** #> poly(x2, 2)1 12.601293   1.782973  7.06758 6.2621e-11 *** #> poly(x2, 2)2  1.635558   0.589023  2.77673 6.2216e-03 **  #> poly(x3, 2)1 -2.757047   1.725003 -1.59829 1.1217e-01     #> poly(x3, 2)2 -1.055565   0.668027 -1.58012 1.1627e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.30128   Adj. R2: 0.862108 data(longley) xpd(Armed.Forces ~ Population + regex(\"GNP|ployed\"), data = longley) #> Armed.Forces ~ Population + GNP.deflator + GNP + Unemployed +  #>     Employed feols(Armed.Forces ~ Population + regex(\"GNP|ployed\"), longley) #> OLS estimation, Dep. Var.: Armed.Forces #> Observations: 16  #> Standard-errors: IID  #>                 Estimate  Std. Error   t value Pr(>|t|)     #> (Intercept)  4403.682352 4091.847594  1.076209 0.307112     #> Population    -22.844324   32.671302 -0.699217 0.500356     #> GNP.deflator    7.638472   12.347773  0.618611 0.550003     #> GNP             3.150533    3.554170  0.886433 0.396201     #> Unemployed     -0.591649    0.389005 -1.520928 0.159248     #> Employed      -50.059800   25.348299 -1.974878 0.076522 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 36.1   Adj. R2: 0.569345"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"the-dot-square-bracket-operator","dir":"Articles","previous_headings":"Additional features > Formula: macros and dot square brackets","what":"The dot square bracket operator","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"special operator .[] can used fixest formulas replace enclosed item value current environment. Let’s give example: just happened? .[] encountered formula, value evaluated inserted verbatim formula. , value brackets vector, many variables added model. ’s x.[] led x2 + x3. course, numbers can used directly: x.[2:3] led result. Variable names .[] middle name can also created, nested: work? .[stuff] evaluates stuff stuff string literal, function dsb, expands anything .[], applied. previous example, dsb(\"x.[]_sq\") leads vector c(\"x1_sq\", \"x2_sq\", \"x3_sq\"). vector aggregated sum due initial .[], leading x1_sq + x2_sq + x3_sq inserted formula. default, stuff vector, aggregation done sum. instances, can interesting aggregate commas: e.g. want perform stepwise estimation. summon comma-aggregation, place comma right opening square bracket. ’s example: Finally, special shortcut facilitate multiple estimations variable names stored vector. vars vector variable names, just use .[vars] LHS perform multiple estimation:","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) i = 2:3 z = \"i(species)\" feols(y ~ x.[i] + .[z], base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>                      Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)          3.682982   0.107403 34.291343  < 2.2e-16 *** #> x2                   0.905946   0.074311 12.191282  < 2.2e-16 *** #> x3                  -0.005995   0.156260 -0.038368 9.6945e-01     #> species::versicolor -1.598362   0.205706 -7.770113 1.3154e-12 *** #> species::virginica  -2.112647   0.304024 -6.948940 1.1550e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.333482   Adj. R2: 0.832221 i = 1:3 xpd(y ~ .[\"x.[i]_sq\"]) #> y ~ x1_sq + x2_sq + x3_sq etable(feols(y ~ csw(x.[, 1:3]), base)) #>                 feols(y ~ csw(..1 feols(y ~ csw(x..2 feols(y ~ csw(x...3 #> Dependent Var.:                 y                  y                   y #>                                                                          #> Constant        6.526*** (0.4789)  2.249*** (0.2480)   1.856*** (0.2508) #> x1               -0.2234 (0.1551) 0.5955*** (0.0693)  0.6508*** (0.0667) #> x2                                0.4719*** (0.0171)  0.7091*** (0.0567) #> x3                                                   -0.5565*** (0.1275) #> _______________ _________________ __________________ ___________________ #> S.E. type                     IID                IID                 IID #> Observations                  150                150                 150 #> R2                        0.01382            0.84018             0.85861 #> Adj. R2                   0.00716            0.83800             0.85571 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 vars = c(\"x1\", \"x2\", \"x3\") # Equiv. to: dsb(\"x.[1:3]\") etable(feols(.[vars] ~ i(species), base)) #>                      feols(.[vars] ~ ..1 feols(.[vars] ..2 feols(.[vars] ~..3 #> Dependent Var.:                       x1                x2                 x3 #>                                                                               #> Constant               3.428*** (0.0480) 1.462*** (0.0609) 0.2460*** (0.0289) #> species = versicolor -0.6580*** (0.0679) 2.798*** (0.0861)  1.080*** (0.0409) #> species = virginica  -0.4540*** (0.0679) 4.090*** (0.0861)  1.780*** (0.0409) #> ____________________ ___________________ _________________ __________________ #> S.E. type                            IID               IID                IID #> Observations                         150               150                150 #> R2                               0.40078           0.94137            0.92888 #> Adj. R2                          0.39263           0.94057            0.92792 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"lagging-variables","dir":"Articles","previous_headings":"Additional features","what":"Lagging variables","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"methods created easily deal leads lags panel setting. First shown various ways deal fixest estimation, create panel data set, last described general way create lead lag variables.","code":""},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"lagging-variables-in-an-estimation","dir":"Articles","previous_headings":"Additional features > Lagging variables","what":"Lagging variables in an estimation","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"two ways provide leads /lags fixest estimation. Either “--fly” using argument panel.id, either setting panel data set function panel (useful run multiple models needing lags /leads), described next subsection. set panel --fly, need use panel.id argument, give access functions f l create leads lags, respectively. Let’s give example, using previous data set, use lags leads explanatory dependent variables. First , value panel.id corresponds panel identifiers: first comes variable identifying panel-individuals, comes variables identifying time. example, panel.id came form one-sided formula, equivalently equal panel.id = c(\"id\", \"period\") panel.id = \"id,period\". can see, first estimation, lag created function l. second argument function consists vector giving lags want. case, l(x1, 0:1) means want x1 first lag x1. argument accepts negative values give leads, shown second estimation l(x1, -1:1) means want first lead x1, x1, first lag. example, also use first lead y dependent variable f(y).","code":"est1 = feols(y ~ l(x1, 0:1), base_did, panel.id = ~id+period) #> NOTE: 108 observations removed because of NA values (RHS: 108). est2 = feols(f(y) ~ l(x1, -1:1), base_did, panel.id = ~id+period) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). est3 = feols(l(y) ~ l(x1, 0:3), base_did, panel.id = ~id+period) #> NOTE: 324 observations removed because of NA values (LHS: 108, RHS: 324). etable(est1, est2, est3, order = \"f\", drop = \"Int\") #>                               est1               est2               est3 #> Dependent Var.:                  y             f(y,1)             l(y,1) #>                                                                          #> f(x1,1)                            0.9940*** (0.0542)                    #> Constant         2.235*** (0.2032)  2.464*** (0.2233)  2.196*** (0.2110) #> x1              0.9948*** (0.0487)    0.0081 (0.0592)   -0.0534 (0.0545) #> l(x1,1)            0.0410 (0.0558)    0.0157 (0.0640) 0.9871*** (0.0551) #> l(x1,2)                                                  0.0220 (0.0580) #> l(x1,3)                                                  0.0102 (0.0639) #> _______________ __________________ __________________ __________________ #> S.E.: Clustered             by: id             by: id             by: id #> Observations                   972                864                756 #> R2                         0.26558            0.25697            0.25875 #> Adj. R2                    0.26406            0.25438            0.25480 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"setting-up-a-panel-data-set","dir":"Articles","previous_headings":"Additional features > Lagging variables","what":"Setting up a panel data set","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"can set panel data set function panel. two three advantages . First, estimate many models leads /lags, setting panel gives access lagging functions, f l, without provide panel.id argument ’ve seen previous subsection. Second, even estimate models sub-selection panel data, data set still proper panel, meaning can still use lagging functions. Finally, data.table user, can use lagging functions create new variables. Let’s repeat previous example, now panel data set: Last, also use data.table, let’s give example lead/lag creation:","code":"# setting up the panel pdat = panel(base_did, ~id + period) # Now the panel.id argument is not required est1 = feols(y ~ l(x1, 0:1), pdat) #> NOTE: 108 observations removed because of NA values (RHS: 108). est2 = feols(f(y) ~ l(x1, -1:1), pdat) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). # You can use sub selections of the panel data est_sub = feols(y ~ l(x1, 0:1), pdat[!pdat$period %in% c(2, 4)]) #> NOTE: 324 observations removed because of NA values (RHS: 324). etable(est1, est2, est_sub, order = \"f\", drop = \"Int\") #>                               est1               est2           est_sub #> Dependent Var.:                  y             f(y,1)                 y #>                                                                         #> f(x1,1)                            0.9940*** (0.0542)                   #> Constant         2.235*** (0.2032)  2.464*** (0.2233) 3.691*** (0.3085) #> x1              0.9948*** (0.0487)    0.0081 (0.0592) 1.013*** (0.0707) #> l(x1,1)            0.0410 (0.0558)    0.0157 (0.0640)  -0.0063 (0.0779) #> _______________ __________________ __________________ _________________ #> S.E.: Clustered             by: id             by: id            by: id #> Observations                   972                864               540 #> R2                         0.26558            0.25697           0.26258 #> Adj. R2                    0.26406            0.25438           0.25983 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 library(data.table) pdat_dt = panel(as.data.table(base_did), ~id+period) # we create a lagged value of the variable x1 pdat_dt[, x1_l1 := l(x1)] #> [1] TRUE # Now  pdat_dt[, c(\"x1_l1_fill0\", \"y_f2\") := .(l(x1, fill = 0), f(y, 2))] #> [1] TRUE head(pdat_dt) #>              y         x1 id period post treat      x1_l1 x1_l1_fill0 #> 1:  2.87530627  0.5365377  1      1    0     1         NA   0.0000000 #> 2:  1.86065272 -3.0431894  1      2    0     1  0.5365377   0.5365377 #> 3:  0.09416524  5.5768439  1      3    0     1 -3.0431894  -3.0431894 #> 4:  3.78147485 -2.8300587  1      4    0     1  5.5768439   5.5768439 #> 5: -2.55819959 -5.0443544  1      5    0     1 -2.8300587  -2.8300587 #> 6:  1.72873240 -0.6363849  1      6    1     1 -5.0443544  -5.0443544 #>           y_f2 #> 1:  0.09416524 #> 2:  3.78147485 #> 3: -2.55819959 #> 4:  1.72873240 #> 5:  6.28423629 #> 6:  4.76688778"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"creating-laglead-variables","dir":"Articles","previous_headings":"Additional features > Lagging variables","what":"Creating lag/lead variables","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"just want create single lag/lead variable, simple fast method implemented: lag.formula. Let’s give example: first two arguments mandatory. formula informs variable lagged (left hand side), two panel identifiers. Note time index must appear second. second argument tells much lags want. Using negative values gives leads. Finally last argument informs find variables. case use popular package data.table, can create lagged variables simply:","code":"base_lag = base_did # we create a lagged value of the variable x1 base_lag$x1.l1 = lag(x1 ~ id + period, 1, base_lag) head(base_lag) #>             y         x1 id period post treat      x1.l1 #> 1  2.87530627  0.5365377  1      1    0     1         NA #> 2  1.86065272 -3.0431894  1      2    0     1  0.5365377 #> 3  0.09416524  5.5768439  1      3    0     1 -3.0431894 #> 4  3.78147485 -2.8300587  1      4    0     1  5.5768439 #> 5 -2.55819959 -5.0443544  1      5    0     1 -2.8300587 #> 6  1.72873240 -0.6363849  1      6    1     1 -5.0443544 library(data.table) base_lag_dt = as.data.table(base_did) # we create a lagged value of the variable x1 base_lag_dt[, x1.l1 := lag(x1 ~ id + period, 1)]"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"non-linear-in-parameters-example","dir":"Articles","previous_headings":"Additional features","what":"Non-linear in parameters example","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"function feNmlm similar femlm allows non-linear parameters right-hand-sides (RHS). First example without fixed-effects, one fixed-effects given later. Let’s say want estimate following relation Poisson model: \\(E\\left(z_i\\right) = \\times x_i + b\\times y_i\\). fact, type model non-linear context Poisson model sum embedded within log: \\(E\\left(z_i\\right) = \\exp\\left(\\log\\left(\\times x_i + b\\times y_i\\right)\\right)\\). let’s estimate relation. (Note can estimate relation GLM identity link, carry example.) First generate data: estimate non-linear relationship, need use argument NL.fml put non-linear part. also provide starting values argument NL.start. Finally, ensure RHS can evaluated situation, add lower bounds parameters argument lower. Note arguments NL.start lower named lists. Setting lower = list(=0, b=0) means optimization algorithm never explore parameters \\(\\) \\(b\\) lower 0. results obtained can interpreted similarly results linear RHS. can see print: can see obtain coefficients close generating values.","code":"# Generating data: n = 1000 # x and y: two positive random variables x = rnorm(n, 1, 5)**2 y = rnorm(n, -1, 5)**2 # E(z) = 2*x + 3*y and some noise z = rpois(n, 2*x + 3*y) + rpois(n, 1) base = data.frame(x, y, z) result_NL = feNmlm(z~0, base, NL.fml = ~ log(a*x + b*y), NL.start = list(a=1, b=1), lower = list(a=0, b=0)) print(result_NL) #> Non-linear ML estimation, family = Poisson, Dep. Var.: z #> Observations: 1,000  #> Standard-errors: IID  #>   Estimate Std. Error t value  Pr(>|t|)     #> a  2.02334   0.011217 180.383 < 2.2e-16 *** #> b  3.02817   0.012684 238.736 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -3,596.8   Adj. Pseudo R2: 0.942674 #>            BIC:  7,207.5     Squared Cor.: 0.993353"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"adding-fixed-effects-to-non-linear-in-parameters-models","dir":"Articles","previous_headings":"Additional features > Non-linear in parameters example","what":"Adding fixed-effects to non-linear in parameters models","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"Adding fixed-effects identical linear case. user must well aware functional form. Indeed, fixed-effects must enter estimation linearly. means previous equation one set fixed-effects writes: \\(E\\left(z_i\\right) = \\gamma_{id_i} \\left( \\times x_i + b\\times y_i \\right)\\), \\(id_i\\) class observation \\(\\) \\(\\gamma\\) vector fixed-effects. fixed-effects fact linear context Poisson model estimate: \\(E\\left(z_i\\right) = \\exp\\left(\\gamma_{id_i}+\\log\\left(\\times x_i + b\\times y_i\\right)\\right)\\). , remark exists infinity values \\(\\gamma^{\\prime}\\), \\(^{\\prime}\\) \\(b^{\\prime}\\) : \\(\\gamma_{k} \\left( \\times x_i + b\\times y_i \\right) = \\gamma_{k}^{\\prime} \\left(^{\\prime}\\times x_i + b^{\\prime}\\times y_i \\right),\\forall ,k\\). example \\(\\gamma^{\\prime}_{k} = 2\\times \\gamma_k\\), \\(^{\\prime} = /2\\) \\(b^{\\prime} = b/2\\). Thus estimating relation directly lead problem uniquely identify coefficients. circumvent problem, just fix one coefficient, ensure uniquely identify . Let’s generate relation: Now estimate fixed-effects fixing one coefficients (fix \\(\\) true value value): can see, obtain “right” estimates.","code":"# the class of each observation id = sample(20, n, replace = TRUE) base$id = id # the vector of fixed-effects gamma = rnorm(20)**2 # the new vector z_bis z_bis = rpois(n, gamma[id] * (2*x + 3*y)) + rpois(n, 1) base$z_bis = z_bis # we add the fixed-effect in the formula result_NL_fe = feNmlm(z_bis~0|id, base, NL.fml = ~ log(2*x + b*y), NL.start = list(b=1), lower = list(b=0)) # The coef should be around 3 coef(result_NL_fe) #>        b  #> 3.024891 # the gamma and the exponential of the fixed-effects should be similar rbind(gamma, exp(fixef(result_NL_fe)$id[as.character(1:20)])) #>              1         2         3         4           5        6          7 #> gamma 2.679535 0.1707382 0.7294981 0.6375940 0.002920490 2.202472 0.08203791 #>       2.670332 0.1831774 0.7519754 0.6240016 0.008805172 2.220800 0.08548657 #>              8        9       10       11        12       13        14 #> gamma 1.501218 1.262652 1.515043 1.681641 0.1949462 1.095457 1.0023382 #>       1.454965 1.276599 1.493300 1.705419 0.1975139 1.104186 0.9971681 #>              15       16        17        18        19        20 #> gamma 0.3743722 2.606235 0.5238710 0.1428949 0.4871731 0.1550584 #>       0.3896577 2.609243 0.5372464 0.1433603 0.4910665 0.1629123"},{"path":"https://lrberge.github.io/fixest/articles/fixest_walkthrough.html","id":"multi-threading","dir":"Articles","previous_headings":"Additional features","what":"Multi-threading","title":"Fast Fixed-Effects Estimation: Short Introduction","text":"package fixest integrates multi-platform parallelism hasten estimation process. default makes use 50% available threads. change number threads used, just use argument nthreads: can see, efficiency increasing number threads 1 1. Two threads divide computing time 2, four threads 4. However still reduces significantly computing time, might valuable large sample estimations. can permanently set number threads used fixest using setFixest_nthreads(nthreads). Note can permanently set number project level using argument save: setFixest_nthreads(nthreads, save = TRUE). way won’t need re-set number threads whenever restart R.","code":"# Sample of results: # 1 nthreads: 3.13s system.time(fenegbin(Euros ~ log(dist_km)|Origin+Destination+Product+Year, trade, nthreads = 1)) # 2 nthreads: 1.82s system.time(fenegbin(Euros ~ log(dist_km)|Origin+Destination+Product+Year, trade, nthreads = 2)) # 4 nthreads: 1.17s system.time(fenegbin(Euros ~ log(dist_km)|Origin+Destination+Product+Year, trade, nthreads = 4))"},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"first-illustration","dir":"Articles","previous_headings":"","what":"First illustration","title":"Multiple estimations","text":"multiple estimation look like? Let’s give try: previous line code (90 characters long), just performed 32 estimations: eight different functional forms four different samples. previous code leads following results: vignette now details perform multiple estimations multiple: LHSs, RHSs, fixed-effects, samples. comes describe various methods access results.","code":"base = iris names(base) = c(\"y1\", \"y2\", \"x1\", \"x2\", \"species\")  res_multi = feols(c(y1, y2) ~ x1 + csw(x2, x2^2) | sw0(species), base, fsplit = ~species) summary(res_multi, \"compact\", se = \"hetero\") ##         sample   fixef lhs               rhs     (Intercept)                x1 ## 1  Full sample 1        y1 x1 + x2           4.19*** (0.104)  0.542*** (0.076) ## 2  Full sample 1        y1 x1 + x2 + I(x2^2) 4.27*** (0.101)  0.719*** (0.082) ## 3  Full sample 1        y2 x1 + x2           3.59*** (0.103) -0.257*** (0.066) ## 4  Full sample 1        y2 x1 + x2 + I(x2^2) 3.68*** (0.097)    -0.030 (0.078) ## 5  Full sample species  y1 x1 + x2                            0.906*** (0.076) ## 6  Full sample species  y1 x1 + x2 + I(x2^2)                  0.900*** (0.077) ## 7  Full sample species  y2 x1 + x2                              0.155* (0.073) ## 8  Full sample species  y2 x1 + x2 + I(x2^2)                    0.148. (0.075) ## 9  setosa      1        y1 x1 + x2           4.25*** (0.474)     0.399 (0.325) ## 10 setosa      1        y1 x1 + x2 + I(x2^2) 4.00*** (0.504)     0.405 (0.325) ## 11 setosa      1        y2 x1 + x2           2.89*** (0.416)     0.247 (0.305) ## 12 setosa      1        y2 x1 + x2 + I(x2^2) 2.82*** (0.423)     0.248 (0.304) ## 13 setosa      species  y1 x1 + x2                               0.399 (0.325) ## 14 setosa      species  y1 x1 + x2 + I(x2^2)                     0.405 (0.325) ## 15 setosa      species  y2 x1 + x2                               0.247 (0.305) ## 16 setosa      species  y2 x1 + x2 + I(x2^2)                     0.248 (0.304) ## 17 versicolor  1        y1 x1 + x2           2.38*** (0.423)  0.934*** (0.166) ## 18 versicolor  1        y1 x1 + x2 + I(x2^2)   0.323 (1.44)   0.901*** (0.164) ## 19 versicolor  1        y2 x1 + x2           1.25*** (0.275)     0.067 (0.095) ## 20 versicolor  1        y2 x1 + x2 + I(x2^2)   0.097 (1.01)      0.048 (0.099) ## 21 versicolor  species  y1 x1 + x2                            0.934*** (0.166) ## 22 versicolor  species  y1 x1 + x2 + I(x2^2)                  0.901*** (0.164) ## 23 versicolor  species  y2 x1 + x2                               0.067 (0.095) ## 24 versicolor  species  y2 x1 + x2 + I(x2^2)                     0.048 (0.099) ## 25 virginica   1        y1 x1 + x2             1.05. (0.539)  0.995*** (0.090) ## 26 virginica   1        y1 x1 + x2 + I(x2^2)   -2.39 (2.04)   0.994*** (0.088) ## 27 virginica   1        y2 x1 + x2             1.06. (0.572)     0.149 (0.107) ## 28 virginica   1        y2 x1 + x2 + I(x2^2)    1.10 (1.76)      0.149 (0.108) ## 29 virginica   species  y1 x1 + x2                            0.995*** (0.090) ## 30 virginica   species  y1 x1 + x2 + I(x2^2)                  0.994*** (0.088) ## 31 virginica   species  y2 x1 + x2                               0.149 (0.107) ## 32 virginica   species  y2 x1 + x2 + I(x2^2)                     0.149 (0.108) ##                  x2          I(x2^2) ## 1   -0.320. (0.170)                  ## 2  -1.52*** (0.307) 0.348*** (0.075) ## 3    0.364* (0.142)                  ## 4  -1.18*** (0.313) 0.446*** (0.074) ## 5    -0.006 (0.163)                  ## 6     0.290 (0.408)   -0.088 (0.117) ## 7  0.623*** (0.114)                  ## 8    0.951* (0.472)   -0.097 (0.125) ## 9    0.712. (0.418)                  ## 10    2.51. (1.47)     -2.91 (2.10)  ## 11    0.702 (0.560)                  ## 12     1.27 (2.39)    -0.911 (3.28)  ## 13   0.712. (0.418)                  ## 14    2.51. (1.47)     -2.91 (2.10)  ## 15    0.702 (0.560)                  ## 16     1.27 (2.39)    -0.911 (3.28)  ## 17   -0.320 (0.364)                  ## 18     3.01 (2.31)     -1.24 (0.841) ## 19 0.929*** (0.244)                  ## 20    2.80. (1.65)    -0.695 (0.583) ## 21   -0.320 (0.364)                  ## 22     3.01 (2.31)     -1.24 (0.841) ## 23 0.929*** (0.244)                  ## 24    2.80. (1.65)    -0.695 (0.583) ## 25    0.007 (0.205)                  ## 26    3.50. (2.09)    -0.870 (0.519) ## 27 0.535*** (0.122)                  ## 28    0.503 (1.56)     0.008 (0.388) ## 29    0.007 (0.205)                  ## 30    3.50. (2.09)    -0.870 (0.519) ## 31 0.535*** (0.122)                  ## 32    0.503 (1.56)     0.008 (0.388)"},{"path":[]},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"multiple-lhs","dir":"Articles","previous_headings":"Performing multiple estimations","what":"Multiple LHS","title":"Multiple estimations","text":"perform estimation multiple LHS, simply wrap different LHS c():","code":"etable(feols(c(y1, y2) ~ x1 + x2, base)) ##                 feols(c(y1, y2)..1 feols(c(y1, y2) ..2 ## Dependent Var.:                 y1                  y2 ##                                                        ## Constant         4.191*** (0.0970)   3.587*** (0.0937) ## x1              0.5418*** (0.0693) -0.2571*** (0.0669) ## x2               -0.3196* (0.1605)    0.3640* (0.1550) ## _______________ __________________ ___________________ ## S.E. type                      IID                 IID ## Observations                   150                 150 ## R2                         0.76626             0.21310 ## Adj. R2                    0.76308             0.20240 ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"multiple-rhs-and-fixed-effects-stepwise-functions","dir":"Articles","previous_headings":"Performing multiple estimations","what":"Multiple RHS and fixed-effects: stepwise functions","title":"Multiple estimations","text":"estimate multiple RHS (fixed-effects), need use specific set functions: stepwise functions. five : sw, sw0, csw, csw0 mvsw. sw: function replaced sequentially arguments. example, y ~ x1 + sw(x2, x3) leads two estimations: y ~ x1 + x2 y ~ x1 + x3. sw0: identical sw first adds empty element. E.g. y ~ x1 + sw0(x2, x3) leads three estimations: y ~ x1, y ~ x1 + x2 y ~ x1 + x3. csw: stands cumulative stepwise. adds formula arguments sequentially. E.g. y ~ x1 + csw(x2, x3) become y ~ x1 + x2 y ~ x1 + x2 + x3. csw0: identical csw first adds empty element. E.g. y ~ x1 + csw0(x2, x3) leads three estimations: y ~ x1, y ~ x1 + x2 y ~ x1 + x2 + x3. mvsw: stands multiverse stepwise. add, stepwise fashion, possible combinations variables arguments. example mvsw(x1, x2, x3) equivalent sw0(x1, x2, x3, x1 + x2, x1 + x3, x2 + x3, x1 + x2 + x3). number models estimate grows factorial rate: cautious! stepwise functions can applied linear part fixed-effects part formula. Note one stepwise function can applied per part. example: can see, stepwise functions parts, many estimations cardinal product two parts.","code":"etable(feols(y1 ~ csw(x1, x2) | sw0(species), base, cluster = ~species)) ##                 feols(y1 ~ csw..1 feols(y1 ~ cs..2 feols(y1 ~ csw..3 ## Dependent Var.:                y1               y1                y1 ##                                                                      ## Constant         4.307** (0.1917) 4.191** (0.2443)                   ## x1              0.4089** (0.0401) 0.5418* (0.1115) 0.9046** (0.0758) ## x2                                -0.3196 (0.1707)                   ## Fixed-Effects:  ----------------- ---------------- ----------------- ## species                        No               No               Yes ## _______________ _________________ ________________ _________________ ## S.E.: Clustered       by: species      by: species       by: species ## Observations                  150              150               150 ## R2                        0.75995          0.76626           0.83672 ## Within R2                      --               --           0.57178 ##  ##                 feols(y1 ~ csw..4 ## Dependent Var.:                y1 ##                                   ## Constant                          ## x1              0.9059** (0.0814) ## x2               -0.0060 (0.1260) ## Fixed-Effects:  ----------------- ## species                       Yes ## _______________ _________________ ## S.E.: Clustered       by: species ## Observations                  150 ## R2                        0.83673 ## Within R2                 0.57179 ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"split-sample-estimations","dir":"Articles","previous_headings":"Performing multiple estimations","what":"Split sample estimations","title":"Multiple estimations","text":"perform split sample estimations, use either argument split fsplit. argument split accepts variable treated factor, estimation performed sub-sample defined level variable. argument fsplit identical first adds full sample.","code":"etable(feols(y1 ~ x1 + x2, base, fsplit = ~species)) ##                  feols(y1 ~ x1 +..1 feols(y1 ~ x1 ..2 feols(y1 ~ x1 +..3 ## Sample (species)        Full sample            setosa         versicolor ## Dependent Var.:                  y1                y1                 y1 ##                                                                          ## Constant          4.191*** (0.0970) 4.248*** (0.4114)  2.381*** (0.4493) ## x1               0.5418*** (0.0693)   0.3990 (0.2958) 0.9342*** (0.1693) ## x2                -0.3196* (0.1605)   0.7121 (0.4874)   -0.3200 (0.4024) ## ________________ __________________ _________________ __________________ ## S.E. type                       IID               IID                IID ## Observations                    150                50                 50 ## R2                          0.76626           0.11173            0.57432 ## Adj. R2                     0.76308           0.07393            0.55620 ##  ##                  feols(y1 ~ x1 +..4 ## Sample (species)          virginica ## Dependent Var.:                  y1 ##                                     ## Constant            1.052* (0.5139) ## x1               0.9946*** (0.0893) ## x2                  0.0071 (0.1795) ## ________________ __________________ ## S.E. type                       IID ## Observations                     50 ## R2                          0.74689 ## Adj. R2                     0.73612 ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"combining-multiple-estimations","dir":"Articles","previous_headings":"Performing multiple estimations","what":"Combining multiple estimations","title":"Multiple estimations","text":"can combine multiple LHS multiple RHS multiple fixed-effects multiple samples. total number estimations always equal cardinal product total number parts.","code":""},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"manipulation-of-multiple-estimations","dir":"Articles","previous_headings":"","what":"Manipulation of multiple estimations","title":"Multiple estimations","text":"’ve just seen perform multiple estimations, now let’s see manipulate . First multiple estimation fixest_multi object set methods. can access elements using keys. five keys: sample, lhs, rhs, fixef, iv.","code":""},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"basic-access","dir":"Articles","previous_headings":"Manipulation of multiple estimations","what":"Basic access","title":"Multiple estimations","text":"res_multi[sample = 1] returns results first sample. res_multi[lhs = .N] returns results last dependent variable (special variable .N can used refer last element). etc. can combine different keys: res_multi[sample = -1, lhs = 1] select results samples first, first dependent variable. Note arguments accept regular expressions, res_multi[fixef = \"spe\"] returns results character string \"spe\" contained fixed-effects part formula.","code":""},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"putting-order","dir":"Articles","previous_headings":"Manipulation of multiple estimations","what":"Putting order","title":"Multiple estimations","text":"results fixest_multi object specific order, organized tree. default order \\(sample \\rightarrow lhs \\rightarrow fixef \\rightarrow rhs \\rightarrow iv\\). Changing order results important organize/export . default, one accesses fixest_multi objects results reordered according order arguments used. instance, res_mutli[rhs = 1:.N, fixef = 1:.N] place RHS root tree followed fixed-effects. sample LHS follow. arguments accept logical values: res_multi[fixef = TRUE, sample = FALSE] keep results place fixef root sample last leaf. subsetting can used easily obtain appropriate set results ordering:","code":"etable(res_multi[lhs = 1, fixef = 1, rhs = TRUE, sample = -1]) ##                  res_multi[lhs ..1 res_multi[lhs =..2 res_multi[lhs =..3 ## Sample (species)            setosa         versicolor          virginica ## Dependent Var.:                 y1                 y1                 y1 ##                                                                          ## Constant         4.248*** (0.4114)  2.381*** (0.4493)    1.052* (0.5139) ## x1                 0.3990 (0.2958) 0.9342*** (0.1693) 0.9946*** (0.0893) ## x2                 0.7121 (0.4874)   -0.3200 (0.4024)    0.0071 (0.1795) ## x2 square                                                                ## ________________ _________________ __________________ __________________ ## S.E. type                      IID                IID                IID ## Observations                    50                 50                 50 ## R2                         0.11173            0.57432            0.74689 ## Adj. R2                    0.07393            0.55620            0.73612 ##  ##                  res_multi[lhs ..4 res_multi[lhs =..5 res_multi[lhs =..6 ## Sample (species)            setosa         versicolor          virginica ## Dependent Var.:                 y1                 y1                 y1 ##                                                                          ## Constant         4.004*** (0.4892)     0.3234 (1.791)     -2.393 (2.173) ## x1                 0.4048 (0.2963) 0.9006*** (0.1710) 0.9939*** (0.0878) ## x2                   2.511 (2.011)      3.015 (2.839)      3.504 (2.153) ## x2 square           -2.913 (3.157)     -1.236 (1.042)   -0.8703 (0.5340) ## ________________ _________________ __________________ __________________ ## S.E. type                      IID                IID                IID ## Observations                    50                 50                 50 ## R2                         0.12786            0.58696            0.76071 ## Adj. R2                    0.07098            0.56002            0.74510 ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":[]},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"note-on-standard-errors","dir":"Articles","previous_headings":"Some notes","what":"Note on standard-errors","title":"Multiple estimations","text":"Defining standard-errors estimation time, using arguments vcov, can useful obtain coherent set standard-errors across results, especially fixed-effects modified (modify default clustering standard-errors across models).","code":""},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"note-on-ivs","dir":"Articles","previous_headings":"Some notes","what":"Note on IVs","title":"Multiple estimations","text":"IV estimations return regular fixest object. summary applied however can return fixest_multi object. case first second stage regressions requested using argument stage = 1:2. can cherry-pick results using, e.g. res[iv = 1]. Note, importantly, index refers order results 1 mean first stage.","code":""},{"path":"https://lrberge.github.io/fixest/articles/multiple_estimations.html","id":"note-on-memory-usage","dir":"Articles","previous_headings":"Some notes","what":"Note on memory usage","title":"Multiple estimations","text":"objects returned fixest estimations large. contain necessary information apply various methods without incurring additional computing costs. particularly true clustering standard-errors instance. Stated differently speed privileged memory usage. problem comes multiple estimations easy perform many many estimations leading ballooning object size possibly getting control point. circumvent issue, ’s : use argument vcov get summary results appropriate standard-errors estimation time, use argument lean = TRUE. perform estimation appropriate standard errors (point 1) clean large object results (point 2). drawback won’t able apply methods results (like changing type standard-errors, predict, resid, etc). amount memory saved can considerable.","code":""},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"how-standard-errors-are-computed-in-fixest","dir":"Articles","previous_headings":"","what":"How standard-errors are computed in fixest","title":"On standard-errors","text":"two components defining standard-errors fixest. main type standard-error given argument vcov, small sample correction defined argument ssc. ’s example, explanations follow next two sections:","code":"library(fixest) data(trade) # OLS estimation gravity = feols(log(Euros) ~ log(dist_km) | Destination + Origin + Product + Year, trade) # Two-way clustered SEs summary(gravity, vcov = \"twoway\") #> OLS estimation, Dep. Var.: log(Euros) #> Observations: 38,325  #> Fixed-effects: Destination: 15,  Origin: 15,  Product: 20,  Year: 10 #> Standard-errors: Clustered (Destination & Origin)  #>              Estimate Std. Error  t value   Pr(>|t|)     #> log(dist_km) -2.16988   0.171367 -12.6621 4.6802e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.74337     Adj. R2: 0.705139 #>                 Within R2: 0.219322 # Two-way clustered SEs, without small sample correction summary(gravity, vcov = \"twoway\", ssc = ssc(adj = FALSE, cluster.adj = FALSE)) #> OLS estimation, Dep. Var.: log(Euros) #> Observations: 38,325  #> Fixed-effects: Destination: 15,  Origin: 15,  Product: 20,  Year: 10 #> Standard-errors: Clustered (Destination & Origin)  #>              Estimate Std. Error  t value   Pr(>|t|)     #> log(dist_km) -2.16988   0.165494 -13.1115 2.9764e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.74337     Adj. R2: 0.705139 #>                 Within R2: 0.219322"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"the-argument-vcov","dir":"Articles","previous_headings":"How standard-errors are computed in fixest","what":"The argument vcov","title":"On standard-errors","text":"argument vcov can equal either: \"iid\", \"hetero\", \"cluster\", \"twoway\", \"NW\", \"DK\", \"conley\". vcov = \"iid\", standard-errors based assumption errors non correlated homoskedastic. vcov = \"hetero\", corresponds classic hereoskedasticity-robust standard-errors (White correction), assumed errors non correlated variance generative law may vary. vcov = \"cluster\", arbitrary correlation errors within clusters accounted . vcov = \"twoway\": arbitrary correlation within two clusters accounted . context panel data time series, vcov = \"NW\" (Newey-West, 1987) vcov = \"DK\" (Driscoll-Kraay, 1998) account temporal correlation errors; two differing account heterogeneity units. implementation based Millo (2017). Finally, vcov = \"conley\" accounts spatial correlation errors.","code":""},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"the-argument-ssc","dir":"Articles","previous_headings":"How standard-errors are computed in fixest","what":"The argument ssc","title":"On standard-errors","text":"type small sample correction applied defined argument ssc accepts objects produced function ssc. main arguments function adj, fixef.K cluster.adj. detail . Say \\(\\tilde{V}\\) variance-covariance matrix (henceforth VCOV) small sample adjustment. Argument adj can equal TRUE FALSE, leading following adjustment:  estimation contains fixed-effects, value \\(K\\) previous adjustment can determined different ways, governed argument fixef.K. illustrate \\(K\\) computed, let’s use example individual (variable id) time fixed-effect clustered standard-errors. structure 10 observations data :  standard-errors clustered respect cluster variable, can see variable id nested within cluster variable (.e. value id “belongs” one value cluster; e.g. id represent US counties cluster US states). argument fixef.K can equal either \"none\", \"nested\" \"full\". \\(K\\) computed follows:  \\(K_{vars}\\) number estimated coefficients associated variables. fixef.K=\"none\" discards fixed-effects coefficients. fixef.K=\"nested\" discards coefficients nested (5 coefficients id). Finally fixef.K=\"full\" accounts fixed-effects coefficients (6: equal 5 id, plus 2 time, minus one used reference [otherwise collinearity arise]). Note fixef.K=\"nested\" standard-errors clustered, equivalent using fixef.K=\"full\". last argument ssc cluster.adj. argument relevant standard-errors clustered corrected serial correlation (Newey-West Driscoll-Kraay). Let \\(M\\) sandwich estimator VCOV without adjustment. one-way clustered standard errors:  \\(G\\) number unique elements cluster variable (previous example \\(G=2\\) cluster). effect adjustment two-way clustered standard-errors follows:  Using data previous example, standard-errors clustered id time, leading \\(G_{id}=5\\), \\(G_{time}=2\\), \\(G_{id,time}=10\\). standard-errors corrected serial correlation, corresponding adjustment applied \\(G_{time} / (G_{time} - 1)\\).","code":""},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"yet-more-details","dir":"Articles","previous_headings":"How standard-errors are computed in fixest > The argument ssc","what":"Yet more details","title":"On standard-errors","text":"’re already fed details? ’m sorry ’s , far ’ve seen main arguments! now come detail three elements: fixef.force_exact, cluster.df t.df. Argument fixef.force_exact relevant two fixed-effects. default fixed-effects coefficients accounted computing degrees freedom. general fine, situations may overestimate number estimated coefficients. ? fixed-effects may collinear, effective number coefficients lower. Let’s illustrate example. Consider following set fixed-effects:  6 different values id 4 different values time. default, 9 coefficients used compute degrees freedom (6 plus 4 minus one reference). can see “effective” number coefficients equal 8: two coefficients removed avoid collinearity issues (one color set). use fixef.force_exact=TRUE, function fixef first run determine number free coefficients fixed-effects, number used compute degree freedom. Argument cluster.df relevant apply two-way clustering (higher). can two values: either \"conventional\", \"min\" (default). affects adjustments clustered matrix. \"conventional\" way make adjustment already described previous equation. cluster.df=\"min\" (, default), two-way clustered standard errors, adjustment becomes:  Now instead specific adjustment matrix, one adjustment \\(G_{min}/(G_{min}-1)\\) \\(G_{min}\\) minimum cluster size (\\(G_{min}=\\min(G_{id},G_{time})\\)). Argument t.df relevant standard-errors clustered. affects way p-value confidence intervals computed. can equal : either \"conventional\", \"min\" (default). default, standard-errors clustered, degrees freedom used Student t distribution equal minimum cluster size (among clusters used cluster VCOV) minus one. t.df=\"conventional\", degrees freedom used find p-value Student t distribution equal number observations minus number estimated coefficients.","code":""},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"replicating-standard-errors-from-other-methods","dir":"Articles","previous_headings":"","what":"Replicating standard-errors from other methods","title":"On standard-errors","text":"section illustrates results fixest compares ones methods. also shows replicate latter fixest.","code":""},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"the-data-set-and-heteroskedasticity-robust-ses","dir":"Articles","previous_headings":"Replicating standard-errors from other methods","what":"The data set and heteroskedasticity-robust SEs","title":"On standard-errors","text":"Using Grunfeld data set plm package, comparisons estimation doesn’t contain fixed-effects. Note Stata’s reg inv capital, robust also leads similar results (SEs, p-values).","code":"library(sandwich) library(plm)  data(Grunfeld)  # Estimations res_lm    = lm(inv ~ capital, Grunfeld) res_feols = feols(inv ~ capital, Grunfeld)  # Same standard-errors rbind(se(res_lm), se(res_feols)) #>      (Intercept)   capital #> [1,]    15.63927 0.0383394 #> [2,]    15.63927 0.0383394 # Heteroskedasticity-robust covariance se_lm_hc    = sqrt(diag(vcovHC(res_lm, type = \"HC1\"))) se_feols_hc = se(res_feols, vcov = \"hetero\") rbind(se_lm_hc, se_feols_hc) #>             (Intercept)    capital #> se_lm_hc       17.05558 0.06633144 #> se_feols_hc    17.05558 0.06633144"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"iid-ses-in-the-presence-of-fixed-effects","dir":"Articles","previous_headings":"Replicating standard-errors from other methods","what":"“IID” SEs in the presence of fixed-effects","title":"On standard-errors","text":"important differences arise presence fixed-effects. Let’s first compare “iid” standard-errors lm plm. standard-errors p-values identical, note also case Stata’s xtreg.","code":"# Estimations est_lm    = lm(inv ~ capital + as.factor(firm) + as.factor(year), Grunfeld) est_plm   = plm(inv ~ capital + as.factor(year), Grunfeld, index = c(\"firm\", \"year\"), model = \"within\") # we use panel.id so that panel VCOVs can be applied directly est_feols = feols(inv ~ capital | firm + year, Grunfeld, panel.id = ~firm + year)  # # \"iid\" standard-errors #  # By default fixest clusters the SEs when FEs are present, #  so we need to ask for iid SEs explicitly. rbind(se(est_lm)[\"capital\"], se(est_plm)[\"capital\"], se(est_feols, vcov = \"iid\")) #>         capital #> [1,] 0.02597821 #> [2,] 0.02597821 #> [3,] 0.02597821 # p-values: rbind(pvalue(est_lm)[\"capital\"], pvalue(est_plm)[\"capital\"], pvalue(est_feols, vcov = \"iid\")) #>           capital #> [1,] 1.519204e-35 #> [2,] 1.519204e-35 #> [3,] 1.519204e-35"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"clustered-ses","dir":"Articles","previous_headings":"Replicating standard-errors from other methods","what":"Clustered SEs","title":"On standard-errors","text":"Now clustered SEs: can see, three different versions standard-errors, feols identical Stata’s xtreg clustered SEs. default, p-value also identical one Stata (fixest version 0.7.0 onwards). Now let’s see replicate standard-errors lm plm:","code":"# Clustered by firm se_lm_firm    = se(vcovCL(est_lm, cluster = ~firm, type = \"HC1\"))[\"capital\"] se_plm_firm   = se(vcovHC(est_plm, cluster = \"group\"))[\"capital\"] se_stata_firm = 0.06328129    # vce(cluster firm) se_feols_firm = se(est_feols) # By default: clustered according to firm  rbind(se_lm_firm, se_plm_firm, se_stata_firm, se_feols_firm) #>                  capital #> se_lm_firm    0.06493478 #> se_plm_firm   0.05693726 #> se_stata_firm 0.06328129 #> se_feols_firm 0.06328129 # How to get the lm version se_feols_firm_lm = se(est_feols, ssc = ssc(fixef.K = \"full\")) rbind(se_lm_firm, se_feols_firm_lm) #>                     capital #> se_lm_firm       0.06493478 #> se_feols_firm_lm 0.06493478 # How to get the plm version se_feols_firm_plm = se(est_feols, ssc = ssc(fixef.K = \"none\", cluster.adj = FALSE)) rbind(se_plm_firm, se_feols_firm_plm) #>                      capital #> se_plm_firm       0.05693726 #> se_feols_firm_plm 0.05693726"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"hac-ses","dir":"Articles","previous_headings":"Replicating standard-errors from other methods","what":"HAC SEs","title":"On standard-errors","text":"finally let’s look Newey-West Driscoll-Kray standard-errors: can see, type small sample correction choose can non-negligible impact standard-error.","code":"# # Newey-west #  se_plm_NW   = se(vcovNW(est_plm))[\"capital\"] se_feols_NW = se(est_feols, vcov = \"NW\")  rbind(se_plm_NW, se_feols_NW) #>                capital #> se_plm_NW   0.08390222 #> se_feols_NW 0.08629896 # we can replicate plm's by changing the type of SSC: rbind(se_plm_NW,        se(est_feols, vcov = NW ~ ssc(adj = FALSE, cluster.adj = FALSE))) #>              capital #> se_plm_NW 0.08390222 #>           0.08390222 # # Driscoll-Kraay #  se_plm_DK   = se(vcovSCC(est_plm))[\"capital\"] se_feols_DK = se(est_feols, vcov = \"DK\")  rbind(se_plm_DK, se_feols_DK) #>                capital #> se_plm_DK   0.08359734 #> se_feols_DK 0.08800884 # Replicating plm's rbind(se_plm_DK,        se(est_feols, vcov = DK ~ ssc(adj = FALSE, cluster.adj = FALSE))) #>              capital #> se_plm_DK 0.08359734 #>           0.08359734"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"other-multiple-fixed-effects-methods","dir":"Articles","previous_headings":"Replicating standard-errors from other methods","what":"Other multiple fixed-effects methods","title":"On standard-errors","text":"Now specific comparison lfe (version 2.8-7) Stata’s reghdfe popular tools estimate econometric models multiple fixed-effects. fixest version 0.7.0 onwards, standard-errors p-values computed similarly reghdfe, clustered multiway clustered standard errors. comparison focuses lfe. differences similarities lfe: can see, slight differences lfe computing clustered standard-errors. multiway clustered standard-errors, easy replicate way lfe computes .","code":"library(lfe)  # lfe: clustered by firm est_lfe = felm(inv ~ capital | firm + year | 0 | firm, Grunfeld) se_lfe_firm = se(est_lfe)  # The two are different, and it cannot be directly replicated by feols rbind(se_lfe_firm, se_feols_firm) #>                  capital #> se_lfe_firm   0.06016851 #> se_feols_firm 0.06328129 # You have to provide a custom VCOV to replicate lfe's VCOV my_vcov = vcov(est_feols, ssc = ssc(adj = FALSE)) se(est_feols, vcov = my_vcov * 199/198) # Note that there are 200 observations #>    capital  #> 0.06016851 # Differently from feols, the SEs in lfe are different if year is not a FE: # => now SEs are identical. rbind(se(felm(inv ~ capital + factor(year) | firm | 0 | firm, Grunfeld))[\"capital\"],       se(feols(inv ~ capital + factor(year) | firm, Grunfeld))[\"capital\"]) #>         capital #> [1,] 0.06328129 #> [2,] 0.06328129 # Now with two-way clustered standard-errors est_lfe_2way  = felm(inv ~ capital | firm + year | 0 | firm + year, Grunfeld) se_lfe_2way   = se(est_lfe_2way) se_feols_2way = se(est_feols, vcov = \"twoway\") rbind(se_lfe_2way, se_feols_2way) #>                  capital #> se_lfe_2way   0.06213837 #> se_feols_2way 0.06041290 # To obtain the same SEs, use cluster.df = \"conventional\" sum_feols_2way_conv = summary(est_feols, vcov = twoway ~ ssc(cluster.df = \"conv\")) rbind(se_lfe_2way, se(sum_feols_2way_conv)) #>                capital #> se_lfe_2way 0.06213837 #>             0.06213837 # We also obtain the same p-values rbind(pvalue(est_lfe_2way), pvalue(sum_feols_2way_conv)) #>           capital #> [1,] 9.273982e-05 #> [2,] 9.273982e-05"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"defining-how-to-compute-the-standard-errors-once-and-for-all","dir":"Articles","previous_headings":"Replicating standard-errors from other methods","what":"Defining how to compute the standard-errors once and for all","title":"On standard-errors","text":"’ve found preferred way compute standard-errors current project, can set permanently using functions setFixest_ssc() setFixest_vcov(). example, want remove small sample adjustment, just use: default, standard-errors clustered presence fixed-effects presence panel. can change behavior , e.g.: changes way default standard-errors computed estimation contains fixed-effects, one fixed-effect, two fixed-effects, panel.","code":"setFixest_ssc(ssc(adj = FALSE)) setFixest_vcov(no_FE = \"iid\", one_FE = \"iid\",                 two_FE = \"hetero\", panel = \"driscoll_kraay\")"},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"changelog","dir":"Articles","previous_headings":"","what":"Changelog","title":"On standard-errors","text":"Version 0.10.0 brings many important changes: arguments se cluster replaced argument vcov. Retro compatibility ensured. argument dof renamed ssc clarity (since dealing small sample correction). retro compatible. Three new types standard-errors added: Newey-West Driscoll-Kraay panel data; Conley account spatial correlation. argument ssc can now directly summoned vcov formula. functions setFixest_dof setFixest_se renamed setFixest_ssc setFixest_vcov. Retro compatibility ensured. default standard-error name changed \"standard\" \"iid\" (thanks Grant McDermott suggestion!). Since lfe returned CRAN (good news!), code chunks involving now re-evaluated. illustration now based Grunfeld data set plm package (avoid problems RNG). Version 0.8.0. Evaluation chunks related lfe removed since archival CRAN. Hard values last CRAN version maintained. Version 0.7.0 introduces following important modifications: increase clarity, se = \"white\" becomes se = \"hetero\". Retro-compatibility ensured. default values computing clustered standard-errors become similar reghdfe avoid cross-software confusion. , now default cluster.df = \"min\" t.df = \"min\" (whereas previous version cluster.df = \"conventional\" t.df = \"conventional\").","code":""},{"path":"https://lrberge.github.io/fixest/articles/standard_errors.html","id":"references-acknowledgments","dir":"Articles","previous_headings":"","what":"References & acknowledgments","title":"On standard-errors","text":"wish thank Karl Dunkle Werner, Grant McDermott Ivo Welch raising issue helpful discussions. error course . Cameron AC, Gelbach JB, Miller DL (2011). “Robust Inference Multiway Clustering”, Journal Business & Ecomomic Statistics, 29(2), 238–249. Kauermann G, Carroll RJ (2001). “Note Efficiency Sandwich Covariance Matrix Estimation”, Journal American Statistical Association, 96(456), 1387–1396. MacKinnon JG, White H (1985). “heteroskedasticity-consistent covariance matrix estimators improved finite sample properties” Journal Econometrics, 29(3), 305–325. Millo G (2017). “Robust Standard Error Estimators Panel Models: Unifying Approach” Journal Statistical Software, 82(3). Zeileis , Koll S, Graham N (2020). “Various Versatile Variances: Object-Oriented Implementation Clustered Covariances R” Journal Statistical Software, 95(1), 1–36.","code":""},{"path":"https://lrberge.github.io/fixest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laurent Berge. Author, maintainer. Sebastian Krantz. Contributor. Grant McDermott. Contributor.","code":""},{"path":"https://lrberge.github.io/fixest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berge L (2018). \"Efficient estimation maximum likelihood models multiple fixed-effects: R package FENmlm.\" CREA Discussion Papers.","code":"@Article{,   title = {Efficient estimation of maximum likelihood models with multiple fixed-effects: the {R} package {FENmlm}},   author = {Laurent Berg\\'e},   year = {2018},   journal = {CREA Discussion Papers},   number = {13}, }"},{"path":"https://lrberge.github.io/fixest/CONTRIBUTORS.html","id":"direct-contributors-prs","dir":"","previous_headings":"","what":"Direct contributors (PRs):","title":"NA","text":"Sebastian Krantz: PR#66 substantial improvement demean function (hunted overheads making efficient small data sizes, improved NA handling, fixed bugs added user-friendly features). Kevin Wilson: PR#78 automated benchmarks. PR#79 implemented automatic checks via Github actions. Grant McDermott: PR#130 rewrote substantially introductory vignette.","code":""},{"path":"https://lrberge.github.io/fixest/CONTRIBUTORS.html","id":"indirect-contributors","dir":"","previous_headings":"","what":"Indirect contributors:","title":"NA","text":"issue filing, countless bugs resolved many features added. alphabetical order, tentative incomplete list persons thank: @adamaltmejd, @adamtheising, @amarbler, @apoorvalal, @benzipperer, @bgchamps, @chenwang, @clerousset, @clukewatson, @colejharvey, @d712, @dlindzee, @edrubin, @fostermeijer, @joseph-richard-martinez, @jurojas5, @kdzhang, @kendonB, @lyifa, @marissachilds, @nikolassch, @noahmbuckley, @nreigl, @Oravishayrizi, @pbaylis, @pei-huang, @phisherblack, @poliquin, @reifjulian, @rrichmond, @seunghoon001, @shoonlee, @SuperMayo, @tcovert, @tholdaway, @waynelapierre @zozotintin. Special thanks @karldw writing broom method early, @zozotintin helping debug problems occurring billion observations scale, course Grant McDermott single-handedly popularizing package. 1: distinction direct indirect contributors quite arbitrary pay tribute issue-filers spent lot time effort resolve problems. rule, made PR, merit clear simple.","code":""},{"path":"https://lrberge.github.io/fixest/index.html","id":"fixest-fast-and-user-friendly-fixed-effects-estimation","dir":"","previous_headings":"","what":"Fast Fixed-Effects Estimations","title":"Fast Fixed-Effects Estimations","text":"fixest package offers family functions perform estimations multiple fixed-effects OLS GLM context. Please refer introduction walk-. time writing page (February 2020), fixest fastest existing method perform fixed-effects estimations, often orders magnitude. See benchmarking fastest alternative software.","code":"# To install from CRAN: install.packages(\"fixest\")  # To install the latest stable development release: install.packages(\"fixest\",                   repos = c(ropensci = 'https://fastverse.r-universe.dev',                            CRAN = 'https://cloud.r-project.org'))"},{"path":"https://lrberge.github.io/fixest/index.html","id":"benchmarking","dir":"","previous_headings":"","what":"Benchmarking","title":"Fast Fixed-Effects Estimations","text":"comparison performance fixest functions state art methods perform estimations multiple fixed-effects. results reported five figures . Package fixest (black lines) consistently faster situations.","code":""},{"path":"https://lrberge.github.io/fixest/index.html","id":"setup","dir":"","previous_headings":"Benchmarking","what":"Setup","title":"Fast Fixed-Effects Estimations","text":"benchmarking performed follows: OLS context, estimate following equation:  functional form (one variable, three fixed-effects) estimated Poisson, Negative Binomial Logit cases (ad hoc modifications fit model). See Berge (2018) details setup. “difficult” benchmark (OLS ), data generated way makes convergence fixed-effects slow. phenomenon slow convergence frequent real micro-level data sets involving employee firm fixed-effects instance. estimation replicated 10 times average computing time reported figures. alternative methods used comparison : OLS: felm (R: package lfe), reghdfe (Stata) FixedEffectModels (Julia) Poisson: glmmboot (R: package glmmML), feglm (R: package alpaca) ppmlhdfe (Stata) Negative Binomial: glm.nb (R: package MASS) nbreg (Stata) Logit: glmmboot (R: package glmmML), feglm (R: package alpaca) logit (Stata) aforementioned packages updated benchmarking date: February 2020. code data benchmarking can found folder.","code":""},{"path":"https://lrberge.github.io/fixest/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Fast Fixed-Effects Estimations","text":"course development fixest inspired pushed forward (almost ) (great) packages used benchmarking deeply indebted authors. Although fixest contains many features, still uncovered definitely look packages.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/ONGOING_ISSUES.html","id":"compatibility-with-the-sandwich-package","dir":"","previous_headings":"Ongoing issues","what":"Compatibility with the sandwich package","title":"NA","text":"far fixest objects compatible variances computed package sandwich following exceptions: vcovHC type = \"HC4\": compatibility partial, .e. works models without fixed-effects breaks fixed-effects estimations. hatvalues, needed kind VCOV correction, defined fixed-effects used (actually make compatible model need reestimated dummy variables, hardly squares idea efficient fixed-effects estimation). vcovBS, .e. bootstraped standard-errors: Absolutely compatible far, become compatible later (hopefully).","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"Simple tool aggregates value CATT coefficients staggered difference--difference setups (see details).","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"","code":"# S3 method for fixest aggregate(x, agg, full = FALSE, use_weights = TRUE, ...)"},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"x fixest object. agg character scalar describing variable names aggregated, pattern-based. sunab estimations, following keywords work: \"att\", \"period\", \"cohort\" FALSE (full disaggregation). variables match pattern aggregated. must form \"(root)\", parentheses must resulting variable name \"root\". can add another root parentheses: \"(root1)regex(root2)\", case resulting name \"root1::root2\". name resulting variable differently can pass named vector: c(\"name\" = \"pattern\") c(\"name\" = \"pattern(root2)\"). bit intricate sorry, please see examples. full Logical scalar, defaults FALSE. TRUE, coefficients returned, aggregated coefficients. use_weights Logical, default TRUE. estimation weighted, whether aggregation take account weights. Basically weights reflected frequency TRUE. ... Arguments passed summary.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"returns matrix representing table coefficients.","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"function helping replicate estimator Sun Abraham (2020). first need perform estimation cohort relative periods dummies (typically using function ), leads estimators cohort average treatment effect treated (CATT). can use function retrieve average treatment effect relative period, way wish aggregate CATT. Note contrary SA article, cohort share sample considered perfect measure cohort share population.","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"Liyang Sun Sarah Abraham, forthcoming, \"Estimating Dynamic Treatment Effects Event Studies Heterogeneous Treatment Effects\". Journal Econometrics.","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/aggregate.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregates the values of DiD coefficients a la Sun and Abraham — aggregate.fixest","text":"","code":"# # DiD example #  data(base_stagg)  # 2 kind of estimations: # - regular TWFE model # - estimation with cohort x time_to_treatment interactions, later aggregated  # Note: the never treated have a time_to_treatment equal to -1000  # Now we perform the estimation res_twfe = feols(y ~ x1 + i(time_to_treatment, treated,                             ref = c(-1, -1000)) | id + year, base_stagg)  # we use the \"i.\" prefix to force year_treated to be considered as a factor res_cohort = feols(y ~ x1 + i(time_to_treatment, i.year_treated,                               ref = c(-1, -1000)) | id + year, base_stagg)  # Displaying the results iplot(res_twfe, ylim = c(-6, 8)) att_true = tapply(base_stagg$treatment_effect_true,                   base_stagg$time_to_treatment, mean)[-1] points(-9:8 + 0.15, att_true, pch = 15, col = 2)  # The aggregate effect for each period agg_coef = aggregate(res_cohort, \"(ti.*nt)::(-?[[:digit:]]+)\") x = c(-9:-2, 0:8) + .35 points(x, agg_coef[, 1], pch = 17, col = 4) ci_low = agg_coef[, 1] - 1.96 * agg_coef[, 2] ci_up = agg_coef[, 1] + 1.96 * agg_coef[, 2] segments(x0 = x, y0 = ci_low, x1 = x, y1 = ci_up, col = 4)  legend(\"topleft\", col = c(1, 2, 4), pch = c(20, 15, 17),        legend = c(\"TWFE\", \"True\", \"Sun & Abraham\"))    # The ATT aggregate(res_cohort, c(\"ATT\" = \"treatment::[^-]\")) #>      Estimate Std. Error   t value     Pr(>|t|) #> ATT -1.133749  0.2050705 -5.528584 2.882038e-07 with(base_stagg, mean(treatment_effect_true[time_to_treatment >= 0])) #> [1] -1  # The total effect for each cohort aggregate(res_cohort, c(\"cohort\" = \"::[^-].*year_treated::([[:digit:]]+)\")) #>              Estimate Std. Error     t value     Pr(>|t|) #> cohort::2   2.4347382  0.2860464   8.5116905 2.666655e-13 #> cohort::3   1.3766102  0.6197413   2.2212658 2.873387e-02 #> cohort::4   0.7543763  0.8054956   0.9365368 3.513968e-01 #> cohort::5  -2.8079538  0.3865452  -7.2642310 1.080972e-10 #> cohort::6  -2.7225787  0.5950041  -4.5757310 1.448581e-05 #> cohort::7  -5.0751928  0.5676398  -8.9408692 3.282508e-14 #> cohort::8  -5.0928206  0.3505856 -14.5266109 9.239445e-26 #> cohort::9  -7.2367302  0.3288544 -22.0058788 7.398376e-39 #> cohort::10 -8.7115753  0.5128055 -16.9880706 2.100254e-30"},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Aikake's an information criterion — AIC.fixest","title":"Aikake's an information criterion — AIC.fixest","text":"function computes AIC (Aikake's, information criterion) fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aikake's an information criterion — AIC.fixest","text":"","code":"# S3 method for fixest AIC(object, ..., k = 2)"},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aikake's an information criterion — AIC.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. ... Optionally, fitted objects. k numeric, penalty per parameter used; default k = 2 classical AIC (.e. AIC=-2*LL+k*nparams).","code":""},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aikake's an information criterion — AIC.fixest","text":"return numeric vector, length number objects taken arguments.","code":""},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aikake's an information criterion — AIC.fixest","text":"AIC computed : $$AIC = -2\\times LogLikelihood + k\\times nbParams$$ k penalty parameter. can information criterion AIC.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aikake's an information criterion — AIC.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/AIC.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aikake's an information criterion — AIC.fixest","text":"","code":"# two fitted models with different expl. variables: res1 = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +              Petal.Width | Species, iris) res2 = femlm(Sepal.Length ~ Petal.Width | Species, iris)  AIC(res1, res2) #> [1] 557.6455 556.9454 BIC(res1, res2) #> [1] 575.7093 568.9879"},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a character string into a dictionary — as.dict","title":"Transforms a character string into a dictionary — as.dict","text":"Transforms single character string containing dictionary textual format proper dictionary, named character vector","code":""},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a character string into a dictionary — as.dict","text":"","code":"as.dict(x)"},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a character string into a dictionary — as.dict","text":"x character scalar form \"variable 1: definition \\n variable 2: definition\" etc. line character must contain one definition , left variable name, right definition. separation variable definition must colon followed single space (.e. \": \"). can stack definitions within single line making use semi colon: \"var1: def; var2: def\". White spaces left right ignored. can add commented lines \"#\". Non-empty, non-commented lines proper format witll raise error.","code":""},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a character string into a dictionary — as.dict","text":"returns named character vector.","code":""},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforms a character string into a dictionary — as.dict","text":"function mostly used combination setFixest_dict set dictionary used function etable.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transforms a character string into a dictionary — as.dict","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/as.dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms a character string into a dictionary — as.dict","text":"","code":"x = \"# Main vars      mpg: Miles per gallon      hp: Horsepower       # Categorical variables      cyl: Number of cylinders; vs: Engine\"  as.dict(x) #>                   mpg                    hp                   cyl  #>    \"Miles per gallon\"          \"Horsepower\" \"Number of cylinders\"  #>                    vs  #>              \"Engine\""},{"path":"https://lrberge.github.io/fixest/reference/as.list.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a fixest_multi object into a list — as.list.fixest_multi","title":"Transforms a fixest_multi object into a list — as.list.fixest_multi","text":"Extracts results fixest_multi object place list.","code":""},{"path":"https://lrberge.github.io/fixest/reference/as.list.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a fixest_multi object into a list — as.list.fixest_multi","text":"","code":"# S3 method for fixest_multi as.list(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/as.list.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a fixest_multi object into a list — as.list.fixest_multi","text":"x fixest_multi object, obtained fixest estimation leading multiple results. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/as.list.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a fixest_multi object into a list — as.list.fixest_multi","text":"Returns list containing results multiple estimations.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/as.list.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms a fixest_multi object into a list — as.list.fixest_multi","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # Multiple estimation res = feols(y ~ csw(x1, x2, x3), base, split = ~species)  # All the results at once as.list(res) #> $`sample.var: species; sample: setosa; rhs: x1` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.639001   0.310014 8.51251 3.7424e-11 *** #> x1          0.690490   0.089899 7.68074 6.7098e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.233723   Adj. R2: 0.542029 #>  #> $`sample.var: species; sample: setosa; rhs: x1 + x2` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.303738   0.385294 5.97917 2.8943e-07 *** #> x1          0.667416   0.090356 7.38653 2.1252e-09 *** #> x2          0.283419   0.197224 1.43704 1.5733e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.228751   Adj. R2: 0.551971 #>  #> $`sample.var: species; sample: setosa; rhs: x1 + x2 + x3` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.351890   0.392868 5.986471 3.0342e-07 *** #> x1          0.654835   0.092447 7.083324 6.8344e-09 *** #> x2          0.237560   0.208019 1.142011 2.5936e-01     #> x3          0.252126   0.346864 0.726873 4.7099e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.227449   Adj. R2: 0.547429 #>  #> $`sample.var: species; sample: versicolor; rhs: x1` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): versicolor #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.539735   0.562874 6.28869 9.0690e-08 *** #> x1          0.865078   0.201938 4.28389 8.7719e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.434612   Adj. R2: 0.261511 #>  #> $`sample.var: species; sample: versicolor; rhs: x1 + x2` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): versicolor #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.116431   0.494256 4.28206 9.0640e-05 *** #> x1          0.247642   0.186839 1.32543 1.9144e-01     #> x2          0.735587   0.124768 5.89565 3.8707e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.329521   Adj. R2: 0.566438 #>  #> $`sample.var: species; sample: versicolor; rhs: x1 + x2 + x3` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): versicolor #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.895540   0.507055  3.73833 5.1122e-04 *** #> x1           0.386858   0.204545  1.89131 6.4890e-02 .   #> x2           0.908337   0.165432  5.49068 1.6667e-06 *** #> x3          -0.679224   0.435382 -1.56006 1.2560e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.321135   Adj. R2: 0.579273 #>  #> $`sample.var: species; sample: virginica; rhs: x1` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): virginica #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.906836   0.757061 5.16053 4.6563e-06 *** #> x1          0.901534   0.253106 3.56189 8.4346e-04 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.559836   Adj. R2: 0.192579 #>  #> $`sample.var: species; sample: virginica; rhs: x1 + x2` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): virginica #> Standard-errors: IID  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 0.624782   0.524867  1.19036 2.3988e-01     #> x1          0.259954   0.153338  1.69531 9.6634e-02 .   #> x2          0.934819   0.089602 10.43302 8.0094e-14 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.307439   Adj. R2: 0.75132 #>  #> $`sample.var: species; sample: virginica; rhs: x1 + x2 + x3` #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): virginica #> Standard-errors: IID  #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  0.699883   0.533601  1.311623 1.9616e-01     #> x1           0.330337   0.174329  1.894909 6.4400e-02 .   #> x2           0.945536   0.090722 10.422336 1.0743e-13 *** #> x3          -0.169753   0.198072 -0.857023 3.9587e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.305014   Adj. R2: 0.749908 #>"},{"path":"https://lrberge.github.io/fixest/reference/base_did.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for difference in difference — base_did","title":"Sample data for difference in difference — base_did","text":"data generated illustrate use difference difference functions package fixest. balanced panel 104 individuals 10 periods. half individuals treated, treatment positive effect dependent variable y 5th period. effect treatment y gradual.","code":""},{"path":"https://lrberge.github.io/fixest/reference/base_did.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for difference in difference — base_did","text":"","code":"data(base_did)"},{"path":"https://lrberge.github.io/fixest/reference/base_did.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for difference in difference — base_did","text":"base_did data frame 1,040 observations 6 variables named y, x1, id, period, post treat. y: dependent variable affected treatment. x1: explanatory variable. id: Identifier individual. period: 1 10 post: Indicator taking value 1 period strictly greater 5, 0 otherwise. treat: Indicator taking value 1 individual treated, 0 otherwise.","code":""},{"path":"https://lrberge.github.io/fixest/reference/base_did.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for difference in difference — base_did","text":"data generated R.","code":""},{"path":"https://lrberge.github.io/fixest/reference/base_stagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for staggered difference in difference — base_stagg","title":"Sample data for staggered difference in difference — base_stagg","text":"data generated illustrate Sun Abraham (Journal Econometrics, forthcoming) method staggered difference--difference. balanced panel 95 individuals 10 periods. Half individuals treated. treated, treatment date can vary second last period. effect treatment depends time since treatment: first negative increasing.","code":""},{"path":"https://lrberge.github.io/fixest/reference/base_stagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for staggered difference in difference — base_stagg","text":"","code":"data(base_stagg)"},{"path":"https://lrberge.github.io/fixest/reference/base_stagg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for staggered difference in difference — base_stagg","text":"base_stagg data frame 950 observations 7 variables: id: panel identifier. year: 1 10. year_treated: period individual treated. time_to_treatment: different year treatment year. treated: indicator taking value 1 individual treated, 0 otherwise. treatment_effect_true: true effect treatment. x1: explanatory variable, correlated period. y: dependent variable affected treatment.","code":""},{"path":"https://lrberge.github.io/fixest/reference/base_stagg.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for staggered difference in difference — base_stagg","text":"data generated R.","code":""},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian information criterion — BIC.fixest","title":"Bayesian information criterion — BIC.fixest","text":"function computes BIC (Bayesian information criterion) fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian information criterion — BIC.fixest","text":"","code":"# S3 method for fixest BIC(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian information criterion — BIC.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. ... Optionally, fitted objects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian information criterion — BIC.fixest","text":"return numeric vector, length number objects taken arguments.","code":""},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian information criterion — BIC.fixest","text":"BIC computed follows: $$BIC = -2\\times LogLikelihood + \\log(nobs)\\times nbParams$$ k penalty parameter. can information criterion AIC.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian information criterion — BIC.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/BIC.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian information criterion — BIC.fixest","text":"","code":"# two fitted models with different expl. variables: res1 = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +             Petal.Width | Species, iris) res2 = femlm(Sepal.Length ~ Petal.Width | Species, iris)  AIC(res1, res2) #> [1] 557.6455 556.9454 BIC(res1, res2) #> [1] 575.7093 568.9879"},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Bins the values of a variable (typically a factor) — bin","title":"Bins the values of a variable (typically a factor) — bin","text":"Tool easily group values given variable.","code":""},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bins the values of a variable (typically a factor) — bin","text":"","code":"bin(x, bin)"},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bins the values of a variable (typically a factor) — bin","text":"x vector whose values grouped. Can type must atomic. bin list values grouped, vector, formula, special values \"bin::digit\" \"cut::values\". create new value old values, use bin = list(\"new_value\"=old_values) old_values vector existing values. can use .() list(). accepts regular expressions, must start \"@\", like bin=\"@Aug|Dec\". accepts one-sided formulas must contain variable x, e.g. bin=list(\"<2\" = ~x < 2). names list new names. new name missing, first value matched becomes new name. name, adding \"@d\", d digit, relocate value position d: useful change position factors. Use \"@\" first item make subsequent items located first factor. Feeding vector like using list without name single element. vector numeric, can use special value \"bin::digit\" group every digit element. example x represents years, using bin=\"bin::2\" creates bins two years. data, using \"!bin::digit\" groups every digit consecutive values starting first value. Using \"!!bin::digit\" starting last value. numeric vectors can: ) use \"cut::n\" cut vector n equal parts, b) use \"cut::]b[\" create following bins: [min, ], ], b[, [b, max]. latter syntax sequence number/quartile (q0 q4)/percentile (p0 p100) followed open closed square bracket. can add custom bin names adding character vector 'cut::values'. See details examples. Dot square bracket expansion (see dsb) enabled.","code":""},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bins the values of a variable (typically a factor) — bin","text":"returns vector length x.","code":""},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"-cutting-a-numeric-vector","dir":"Reference","previous_headings":"","what":"\"Cutting\" a numeric vector","title":"Bins the values of a variable (typically a factor) — bin","text":"Numeric vectors can cut easily : ) equal parts, b) user-specified bins. Use \"cut::n\" cut vector n (roughly) equal parts. Percentiles used partition data, hence data distributions can lead create less n parts (example P0 P50). user can specify custom bins following syntax: \"cut::]b]c]\". numbers , b, c, etc, sequence increasing numbers, followed open closed square bracket. numbers can specified either plain numbers (e.g. \"cut::5]12[32[\"), quartiles (e.g. \"cut::q1]q3[\"), percentiles (e.g. \"cut::p10]p15]p90]\"). Values different types can mixed: \"cut::5]q2[p80[\" valid provided median (q2) indeed greater 5, otherwise error thrown. square bracket right number tells whether numbers included excluded current bin. example, say x ranges 0 100, \"cut::5]\" create two  bins: one 0 5 second 6 100. \"cut::5[\" bins 0-4 5-100. factor always returned. labels always report min max values bin. user-specified bin labels, just add character vector following 'cut::values'. need provide , NA values fall back default label. example, bin = c(\"cut::4\", \"Q1\", NA, \"Q3\") modify first third label displayed \"Q1\" \"Q3\".","code":""},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"bin-vs-ref","dir":"Reference","previous_headings":"","what":"bin vs ref","title":"Bins the values of a variable (typically a factor) — bin","text":"functions bin ref able thing, use one instead ? differences: ref always returns factor. contrast bin returns, possible, vector type vector input. ref always places values modified first place factor levels. hand, bin tries modify ordering levels. possible make bin mimic behavior ref adding \"@\" first element list argument bin. vector (list) given input, ref place element vector first place factor levels. behavior bin totally different, bin transform values vector single value x (.e. binning).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bins the values of a variable (typically a factor) — bin","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bins the values of a variable (typically a factor) — bin","text":"","code":"data(airquality) month_num = airquality$Month table(month_num) #> month_num #>  5  6  7  8  9  #> 31 30 31 31 30   # Grouping the first two values table(bin(month_num, 5:6)) #>  #>  5  7  8  9  #> 61 31 31 30   # ... plus changing the name to '10' table(bin(month_num, list(\"10\" = 5:6))) #>  #>  7  8  9 10  #> 31 31 30 61   # ... and grouping 7 to 9 table(bin(month_num, list(\"g1\" = 5:6, \"g2\" = 7:9))) #>  #> g1 g2  #> 61 92   # Grouping every two months table(bin(month_num, \"bin::2\")) #>  #>  5  6  8  #> 31 61 61   # ... every 2 consecutive elements table(bin(month_num, \"!bin::2\")) #>  #>  5  7  9  #> 61 62 30   # ... idem starting from the last one table(bin(month_num, \"!!bin::2\")) #>  #>  5  6  8  #> 31 61 61   # Using .() for list(): table(bin(month_num, .(\"g1\" = 5:6))) #>  #> g1  7  8  9  #> 61 31 31 30    # # with non numeric data #  month_lab = c(\"may\", \"june\", \"july\", \"august\", \"september\") month_fact = factor(month_num, labels = month_lab)  # Grouping the first two elements table(bin(month_fact, c(\"may\", \"jun\"))) #>  #>       may      july    august september  #>        61        31        31        30   # ... using regex table(bin(month_fact, \"@may|jun\")) #>  #>       may      july    august september  #>        61        31        31        30   # ...changing the name table(bin(month_fact, list(\"spring\" = \"@may|jun\"))) #>  #>    spring      july    august september  #>        61        31        31        30   # Grouping every 2 consecutive months table(bin(month_fact, \"!bin::2\")) #>  #>       may      july september  #>        61        62        30   # ...idem but starting from the last table(bin(month_fact, \"!!bin::2\")) #>  #>    may   june august  #>     31     61     61   # Relocating the months using \"@d\" in the name table(bin(month_fact, .(\"@5\" = \"may\", \"@1 summer\" = \"@aug|jul\"))) #>  #>    summer      june september       may  #>        62        30        30        31   # Putting \"@\" as first item means subsequent items will be placed first table(bin(month_fact, .(\"@\", \"aug\", \"july\"))) #>  #>    august      july       may      june september  #>        31        31        31        30        30   # # \"Cutting\" numeric data #  data(iris) plen = iris$Petal.Length  # 3 parts of (roughly) equal size table(bin(plen, \"cut::3\")) #>  #> [1.0; 1.9] [3.0; 4.9] [5.0; 6.9]  #>         50         54         46   # Three custom bins table(bin(plen, \"cut::2]5]\")) #>  #> [1.0; 1.9] [3.0; 5.0] [5.1; 6.9]  #>         50         58         42   # .. same, excluding 5 in the 2nd bin table(bin(plen, \"cut::2]5[\")) #>  #> [1.0; 1.9] [3.0; 4.9] [5.0; 6.9]  #>         50         54         46   # Using quartiles table(bin(plen, \"cut::q1]q2]q3]\")) #>  #> [1.0; 1.6] [1.7; 4.3] [4.4; 5.1] [5.2; 6.9]  #>         44         31         41         34   # Using percentiles table(bin(plen, \"cut::p20]p50]p70]p90]\")) #>  #> [1.0; 1.5] [1.6; 4.3] [4.4; 5.0] [5.1; 5.8] [5.9; 6.9]  #>         37         38         33         29         13   # Mixing all table(bin(plen, \"cut::2[q2]p90]\")) #>  #> [1.0; 1.9] [3.0; 4.3] [4.4; 5.8] [5.9; 6.9]  #>         50         25         62         13   # NOTA: # -> the labels always contain the min/max values in each bin  # Custom labels can be provided, just give them in the char. vector # NA values lead to the default label table(bin(plen, c(\"cut::2[q2]p90]\", \"<2\", \"]2; Q2]\", NA, \">90%\"))) #>  #>         <2    ]2; Q2] [4.4; 5.8]       >90%  #>         50         25         62         13     # # With a formula #  data(iris) plen = iris$Petal.Length  # We need to use \"x\" table(bin(plen, list(\"< 2\" = ~x < 2, \">= 2\" = ~x >= 2))) #>  #>  < 2 >= 2  #>   50  100"},{"path":"https://lrberge.github.io/fixest/reference/bread.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the bread matrix from fixest objects — bread.fixest","title":"Extracts the bread matrix from fixest objects — bread.fixest","text":"Extracts bread matrix fixest objects used compute sandwich variance-covariance matrices.","code":""},{"path":"https://lrberge.github.io/fixest/reference/bread.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the bread matrix from fixest objects — bread.fixest","text":"","code":"# S3 method for fixest bread(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/bread.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the bread matrix from fixest objects — bread.fixest","text":"x fixest object, obtained instance feols. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/bread.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the bread matrix from fixest objects — bread.fixest","text":"Returns matrix dimension number variables used estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/bread.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the bread matrix from fixest objects — bread.fixest","text":"","code":"est = feols(Petal.Length ~ Petal.Width + Sepal.Width, iris) bread(est) #>             (Intercept) Petal.Width Sepal.Width #> (Intercept)    70.47268   -6.316660  -20.245387 #> Petal.Width    -6.31666    2.000923    1.281144 #> Sepal.Width   -20.24539    1.281144    6.119342"},{"path":"https://lrberge.github.io/fixest/reference/check_conv_feols.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the fixed-effects convergence of a feols estimation — check_conv_feols","title":"Check the fixed-effects convergence of a feols estimation — check_conv_feols","text":"Checks convergence feols estimation computing first-order conditions fixed-effects (close 0)","code":""},{"path":"https://lrberge.github.io/fixest/reference/check_conv_feols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the fixed-effects convergence of a feols estimation — check_conv_feols","text":"","code":"check_conv_feols(x)  # S3 method for fixest_check_conv summary(object, type = \"short\", ...)"},{"path":"https://lrberge.github.io/fixest/reference/check_conv_feols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the fixed-effects convergence of a feols estimation — check_conv_feols","text":"x feols estimation contain fixed-effects. object object returned check_conv_feols. type Either \"short\" (default) \"detail\". \"short\", maximum absolute FOC displayed, otherwise 2 smallest 2 largest FOC reported fixed-effect variable. ... currently used. Note function first re-demeans variables, thus possibly incurring extra computation time.","code":""},{"path":"https://lrberge.github.io/fixest/reference/check_conv_feols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the fixed-effects convergence of a feols estimation — check_conv_feols","text":"returns list N elements, N number variables estimation (dependent variable + explanatory variables +, IV, endogenous variables instruments). variable, first-order conditions fixed-effect returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/check_conv_feols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the fixed-effects convergence of a feols estimation — check_conv_feols","text":"","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) base$FE = rep(1:30, 5)  # one estimation with fixed-effects + varying slopes est = feols(y ~ x1 | species[x2] + FE[x3], base)  # Checking the convergence conv = check_conv_feols(est)  # We can check that al values are close to 0 summary(conv) #> Maximum absolute value of the first-order conditions: #>  #>              FE     FE[[x3]]      species species[[x2]] #> y  1.598727e-15 1.154394e-15 2.246661e-07  1.502477e-07 #> x1 9.769908e-16 5.367730e-16 4.490874e-07  3.018886e-07  summary(conv, \"detail\") #> Smallest and largest values of the first-order conditions: #>  #> y   #>   |           FE: -1.60e-15, -1.07e-15, ...,  7.11e-16,  7.11e-16 #>   |     FE[[x3]]: -8.50e-16, -7.77e-16, ...,  9.09e-16,  1.15e-15 #>   |      species: -1.91e-07, -3.34e-08,  2.25e-07 #>   |species[[x2]]: -3.45e-08, -8.55e-09,  1.50e-07 #> __|  #>  #> x1  #>   |           FE: -4.44e-16, -3.55e-16, ...,  6.22e-16,  9.77e-16 #>   |     FE[[x3]]: -5.37e-16, -5.33e-16, ...,  3.18e-16,  3.29e-16 #>   |      species: -3.83e-07, -6.57e-08,  4.49e-07 #>   |species[[x2]]: -6.90e-08, -1.69e-08,  3.02e-07 #> __|"},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the coefficients from a fixest estimation — coef.fixest","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"function extracts coefficients obtained model estimated femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"","code":"# S3 method for fixest coef(object, keep, drop, order, collin = FALSE, agg = TRUE, ...)  # S3 method for fixest coefficients(object, keep, drop, order, collin = FALSE, agg = TRUE, ...)"},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. collin Logical, default FALSE. Whether coefficients removed collinearity also returned NA. used coefficients aggregation also used. agg Logical scalar, default TRUE. coefficients estimation aggregated, whether report aggregated coefficients. FALSE, raw coefficients returned. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"function returns named numeric vector.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"coefficients ones found maximize log-likelihood specified model. information can found models estimations help pages: femlm, feols feglm. Note model estimated fixed-effects, obtain fixed-effect coefficients, need use function fixef.fixest.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the coefficients from a fixest estimation — coef.fixest","text":"","code":"# simple estimation on iris data, using \"Species\" fixed-effects res = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +             Petal.Width | Species, iris)  # the coefficients of the variables: coef(res) #>  Sepal.Width Petal.Length  Petal.Width  #>   0.08866057   0.12992811  -0.04957634   # the fixed-effects coefficients: fixef(res) #> $Species #>     setosa versicolor  virginica  #>  1.1280816  1.0451815  0.9973101  #>  #> attr(,\"class\") #> [1] \"fixest.fixef\" \"list\"         #> attr(,\"exponential\") #> [1] TRUE"},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the coefficients of fixest_multi objects — coef.fixest_multi","title":"Extracts the coefficients of fixest_multi objects — coef.fixest_multi","text":"Utility extract coefficients multiple estimations rearrange matrix.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the coefficients of fixest_multi objects — coef.fixest_multi","text":"","code":"# S3 method for fixest_multi coef(   object,   keep,   drop,   order,   collin = FALSE,   long = FALSE,   na.rm = TRUE,   ... )  # S3 method for fixest_multi coefficients(   object,   keep,   drop,   order,   collin = FALSE,   long = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the coefficients of fixest_multi objects — coef.fixest_multi","text":"object fixest_multi object. Obtained multiple estimation. keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. collin Logical, default FALSE. Whether coefficients removed collinearity also returned NA. used coefficients aggregation also used. long Logical, default FALSE. Whether results displayed long format. na.rm Logical, default TRUE. applies long = TRUE: whether remove coefficients NA values. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coef.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the coefficients of fixest_multi objects — coef.fixest_multi","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # A multiple estimation est = feols(y ~ x1 + csw0(x2, x3), base)  # Getting all the coefficients at once, # each row is a model coef(est) #>   id          rhs (Intercept)         x1       x2         x3 #> 1  1           x1    6.526223 -0.2233611       NA         NA #> 2  2      x1 + x2    2.249140  0.5955247 0.471920         NA #> 3  3 x1 + x2 + x3    1.855997  0.6508372 0.709132 -0.5564827  # Example of keep/drop/order coef(est, keep = \"Int|x1\", order = \"x1\") #>   id          rhs         x1 (Intercept) #> 1  1           x1 -0.2233611    6.526223 #> 2  2      x1 + x2  0.5955247    2.249140 #> 3  3 x1 + x2 + x3  0.6508372    1.855997   # To change the order of the model, use fixest_multi # extraction tools: coef(est[rhs = .N:1]) #>   id          rhs (Intercept)         x1       x2         x3 #> 3  1 x1 + x2 + x3    1.855997  0.6508372 0.709132 -0.5564827 #> 2  2      x1 + x2    2.249140  0.5955247 0.471920         NA #> 1  3           x1    6.526223 -0.2233611       NA         NA  # collin + long + na.rm base$x1_bis = base$x1 # => collinear est = feols(y ~ x1_bis + csw0(x1, x2, x3), base, split = ~species) #> Notes from the estimations: #> [x 9] The variable 'x1' has been removed because of collinearity (see $collin.var).  # does not display x1 since it is always collinear coef(est) #>    id sample.var     sample                   rhs (Intercept)    x1_bis #> 1   1    species     setosa                x1_bis   2.6390012 0.6904897 #> 2   2    species     setosa           x1_bis + x1   2.6390012 0.6904897 #> 3   3    species     setosa      x1_bis + x1 + x2   2.3037382 0.6674162 #> 4   4    species     setosa x1_bis + x1 + x2 + x3   2.3518898 0.6548350 #> 5   5    species versicolor                x1_bis   3.5397347 0.8650777 #> 6   6    species versicolor           x1_bis + x1   3.5397347 0.8650777 #> 7   7    species versicolor      x1_bis + x1 + x2   2.1164314 0.2476422 #> 8   8    species versicolor x1_bis + x1 + x2 + x3   1.8955395 0.3868576 #> 9   9    species  virginica                x1_bis   3.9068365 0.9015345 #> 10 10    species  virginica           x1_bis + x1   3.9068365 0.9015345 #> 11 11    species  virginica      x1_bis + x1 + x2   0.6247824 0.2599540 #> 12 12    species  virginica x1_bis + x1 + x2 + x3   0.6998830 0.3303370 #>           x2         x3 #> 1         NA         NA #> 2         NA         NA #> 3  0.2834193         NA #> 4  0.2375602  0.2521257 #> 5         NA         NA #> 6         NA         NA #> 7  0.7355868         NA #> 8  0.9083370 -0.6792238 #> 9         NA         NA #> 10        NA         NA #> 11 0.9348189         NA #> 12 0.9455356 -0.1697527 # now it does coef(est, collin = TRUE) #>    id sample.var     sample                   rhs (Intercept)    x1_bis x1 #> 1   1    species     setosa                x1_bis   2.6390012 0.6904897 NA #> 2   2    species     setosa           x1_bis + x1   2.6390012 0.6904897 NA #> 3   3    species     setosa      x1_bis + x1 + x2   2.3037382 0.6674162 NA #> 4   4    species     setosa x1_bis + x1 + x2 + x3   2.3518898 0.6548350 NA #> 5   5    species versicolor                x1_bis   3.5397347 0.8650777 NA #> 6   6    species versicolor           x1_bis + x1   3.5397347 0.8650777 NA #> 7   7    species versicolor      x1_bis + x1 + x2   2.1164314 0.2476422 NA #> 8   8    species versicolor x1_bis + x1 + x2 + x3   1.8955395 0.3868576 NA #> 9   9    species  virginica                x1_bis   3.9068365 0.9015345 NA #> 10 10    species  virginica           x1_bis + x1   3.9068365 0.9015345 NA #> 11 11    species  virginica      x1_bis + x1 + x2   0.6247824 0.2599540 NA #> 12 12    species  virginica x1_bis + x1 + x2 + x3   0.6998830 0.3303370 NA #>           x2         x3 #> 1         NA         NA #> 2         NA         NA #> 3  0.2834193         NA #> 4  0.2375602  0.2521257 #> 5         NA         NA #> 6         NA         NA #> 7  0.7355868         NA #> 8  0.9083370 -0.6792238 #> 9         NA         NA #> 10        NA         NA #> 11 0.9348189         NA #> 12 0.9455356 -0.1697527  # long coef(est, long = TRUE) #>    id sample.var     sample                   rhs coefficient   estimate #> 1   1    species     setosa                x1_bis (Intercept)  2.6390012 #> 2   1    species     setosa                x1_bis      x1_bis  0.6904897 #> 5   2    species     setosa           x1_bis + x1 (Intercept)  2.6390012 #> 6   2    species     setosa           x1_bis + x1      x1_bis  0.6904897 #> 9   3    species     setosa      x1_bis + x1 + x2 (Intercept)  2.3037382 #> 10  3    species     setosa      x1_bis + x1 + x2      x1_bis  0.6674162 #> 11  3    species     setosa      x1_bis + x1 + x2          x2  0.2834193 #> 13  4    species     setosa x1_bis + x1 + x2 + x3 (Intercept)  2.3518898 #> 14  4    species     setosa x1_bis + x1 + x2 + x3      x1_bis  0.6548350 #> 15  4    species     setosa x1_bis + x1 + x2 + x3          x2  0.2375602 #> 16  4    species     setosa x1_bis + x1 + x2 + x3          x3  0.2521257 #> 17  5    species versicolor                x1_bis (Intercept)  3.5397347 #> 18  5    species versicolor                x1_bis      x1_bis  0.8650777 #> 21  6    species versicolor           x1_bis + x1 (Intercept)  3.5397347 #> 22  6    species versicolor           x1_bis + x1      x1_bis  0.8650777 #> 25  7    species versicolor      x1_bis + x1 + x2 (Intercept)  2.1164314 #> 26  7    species versicolor      x1_bis + x1 + x2      x1_bis  0.2476422 #> 27  7    species versicolor      x1_bis + x1 + x2          x2  0.7355868 #> 29  8    species versicolor x1_bis + x1 + x2 + x3 (Intercept)  1.8955395 #> 30  8    species versicolor x1_bis + x1 + x2 + x3      x1_bis  0.3868576 #> 31  8    species versicolor x1_bis + x1 + x2 + x3          x2  0.9083370 #> 32  8    species versicolor x1_bis + x1 + x2 + x3          x3 -0.6792238 #> 33  9    species  virginica                x1_bis (Intercept)  3.9068365 #> 34  9    species  virginica                x1_bis      x1_bis  0.9015345 #> 37 10    species  virginica           x1_bis + x1 (Intercept)  3.9068365 #> 38 10    species  virginica           x1_bis + x1      x1_bis  0.9015345 #> 41 11    species  virginica      x1_bis + x1 + x2 (Intercept)  0.6247824 #> 42 11    species  virginica      x1_bis + x1 + x2      x1_bis  0.2599540 #> 43 11    species  virginica      x1_bis + x1 + x2          x2  0.9348189 #> 45 12    species  virginica x1_bis + x1 + x2 + x3 (Intercept)  0.6998830 #> 46 12    species  virginica x1_bis + x1 + x2 + x3      x1_bis  0.3303370 #> 47 12    species  virginica x1_bis + x1 + x2 + x3          x2  0.9455356 #> 48 12    species  virginica x1_bis + x1 + x2 + x3          x3 -0.1697527  # long but balanced (with NAs then) coef(est, long = TRUE, na.rm = FALSE) #>    id sample.var     sample                   rhs coefficient   estimate #> 1   1    species     setosa                x1_bis (Intercept)  2.6390012 #> 2   1    species     setosa                x1_bis      x1_bis  0.6904897 #> 3   1    species     setosa                x1_bis          x2         NA #> 4   1    species     setosa                x1_bis          x3         NA #> 5   2    species     setosa           x1_bis + x1 (Intercept)  2.6390012 #> 6   2    species     setosa           x1_bis + x1      x1_bis  0.6904897 #> 7   2    species     setosa           x1_bis + x1          x2         NA #> 8   2    species     setosa           x1_bis + x1          x3         NA #> 9   3    species     setosa      x1_bis + x1 + x2 (Intercept)  2.3037382 #> 10  3    species     setosa      x1_bis + x1 + x2      x1_bis  0.6674162 #> 11  3    species     setosa      x1_bis + x1 + x2          x2  0.2834193 #> 12  3    species     setosa      x1_bis + x1 + x2          x3         NA #> 13  4    species     setosa x1_bis + x1 + x2 + x3 (Intercept)  2.3518898 #> 14  4    species     setosa x1_bis + x1 + x2 + x3      x1_bis  0.6548350 #> 15  4    species     setosa x1_bis + x1 + x2 + x3          x2  0.2375602 #> 16  4    species     setosa x1_bis + x1 + x2 + x3          x3  0.2521257 #> 17  5    species versicolor                x1_bis (Intercept)  3.5397347 #> 18  5    species versicolor                x1_bis      x1_bis  0.8650777 #> 19  5    species versicolor                x1_bis          x2         NA #> 20  5    species versicolor                x1_bis          x3         NA #> 21  6    species versicolor           x1_bis + x1 (Intercept)  3.5397347 #> 22  6    species versicolor           x1_bis + x1      x1_bis  0.8650777 #> 23  6    species versicolor           x1_bis + x1          x2         NA #> 24  6    species versicolor           x1_bis + x1          x3         NA #> 25  7    species versicolor      x1_bis + x1 + x2 (Intercept)  2.1164314 #> 26  7    species versicolor      x1_bis + x1 + x2      x1_bis  0.2476422 #> 27  7    species versicolor      x1_bis + x1 + x2          x2  0.7355868 #> 28  7    species versicolor      x1_bis + x1 + x2          x3         NA #> 29  8    species versicolor x1_bis + x1 + x2 + x3 (Intercept)  1.8955395 #> 30  8    species versicolor x1_bis + x1 + x2 + x3      x1_bis  0.3868576 #> 31  8    species versicolor x1_bis + x1 + x2 + x3          x2  0.9083370 #> 32  8    species versicolor x1_bis + x1 + x2 + x3          x3 -0.6792238 #> 33  9    species  virginica                x1_bis (Intercept)  3.9068365 #> 34  9    species  virginica                x1_bis      x1_bis  0.9015345 #> 35  9    species  virginica                x1_bis          x2         NA #> 36  9    species  virginica                x1_bis          x3         NA #> 37 10    species  virginica           x1_bis + x1 (Intercept)  3.9068365 #> 38 10    species  virginica           x1_bis + x1      x1_bis  0.9015345 #> 39 10    species  virginica           x1_bis + x1          x2         NA #> 40 10    species  virginica           x1_bis + x1          x3         NA #> 41 11    species  virginica      x1_bis + x1 + x2 (Intercept)  0.6247824 #> 42 11    species  virginica      x1_bis + x1 + x2      x1_bis  0.2599540 #> 43 11    species  virginica      x1_bis + x1 + x2          x2  0.9348189 #> 44 11    species  virginica      x1_bis + x1 + x2          x3         NA #> 45 12    species  virginica x1_bis + x1 + x2 + x3 (Intercept)  0.6998830 #> 46 12    species  virginica x1_bis + x1 + x2 + x3      x1_bis  0.3303370 #> 47 12    species  virginica x1_bis + x1 + x2 + x3          x2  0.9455356 #> 48 12    species  virginica x1_bis + x1 + x2 + x3          x3 -0.1697527"},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots confidence intervals and point estimates — coefplot","title":"Plots confidence intervals and point estimates — coefplot","text":"function plots results estimations (coefficients confidence intervals). function iplot restricts output variables created , either interactions factors raw factors.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots confidence intervals and point estimates — coefplot","text":"","code":"coefplot(   object,   ...,   style = NULL,   sd,   ci_low,   ci_high,   x,   x.shift = 0,   horiz = FALSE,   dict = getFixest_dict(),   keep,   drop,   order,   ci.width = \"1%\",   ci_level = 0.95,   add = FALSE,   pt.pch = c(20, 17, 15, 21, 24, 22),   pt.bg = NULL,   cex = 1,   pt.cex = cex,   col = 1:8,   pt.col = col,   ci.col = col,   lwd = 1,   pt.lwd = lwd,   ci.lwd = lwd,   ci.lty = 1,   grid = TRUE,   grid.par = list(lty = 3, col = \"gray\"),   zero = TRUE,   zero.par = list(col = \"black\", lwd = 1),   pt.join = FALSE,   pt.join.par = list(col = pt.col, lwd = lwd),   ci.join = FALSE,   ci.join.par = list(lwd = lwd, col = col, lty = 2),   ci.fill = FALSE,   ci.fill.par = list(col = \"lightgray\", alpha = 0.5),   ref = \"auto\",   ref.line = \"auto\",   ref.line.par = list(col = \"black\", lty = 2),   lab.cex,   lab.min.cex = 0.85,   lab.max.mar = 0.25,   lab.fit = \"auto\",   xlim.add,   ylim.add,   only.params = FALSE,   sep,   as.multiple = FALSE,   bg,   group = \"auto\",   group.par = list(lwd = 2, line = 3, tcl = 0.75),   main = \"Effect on __depvar__\",   value.lab = \"Estimate and __ci__ Conf. Int.\",   ylab = NULL,   xlab = NULL,   sub = NULL )  iplot(   object,   ...,   i.select = 1,   style = NULL,   sd,   ci_low,   ci_high,   x,   x.shift = 0,   horiz = FALSE,   dict = getFixest_dict(),   keep,   drop,   order,   ci.width = \"1%\",   ci_level = 0.95,   add = FALSE,   pt.pch = c(20, 17, 15, 21, 24, 22),   pt.bg = NULL,   cex = 1,   pt.cex = cex,   col = 1:8,   pt.col = col,   ci.col = col,   lwd = 1,   pt.lwd = lwd,   ci.lwd = lwd,   ci.lty = 1,   grid = TRUE,   grid.par = list(lty = 3, col = \"gray\"),   zero = TRUE,   zero.par = list(col = \"black\", lwd = 1),   pt.join = FALSE,   pt.join.par = list(col = pt.col, lwd = lwd),   ci.join = FALSE,   ci.join.par = list(lwd = lwd, col = col, lty = 2),   ci.fill = FALSE,   ci.fill.par = list(col = \"lightgray\", alpha = 0.5),   ref = \"auto\",   ref.line = \"auto\",   ref.line.par = list(col = \"black\", lty = 2),   lab.cex,   lab.min.cex = 0.85,   lab.max.mar = 0.25,   lab.fit = \"auto\",   xlim.add,   ylim.add,   only.params = FALSE,   sep,   as.multiple = FALSE,   bg,   group = \"auto\",   group.par = list(lwd = 2, line = 3, tcl = 0.75),   main = \"Effect on __depvar__\",   value.lab = \"Estimate and __ci__ Conf. Int.\",   ylab = NULL,   xlab = NULL,   sub = NULL )"},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots confidence intervals and point estimates — coefplot","text":"object Can either: ) estimation object (obtained example feols, ii) list estimation objects (several results plotted ), iii) matrix coefficients table, iv) numeric vector point estimates -- latter requiring extra arguments sd ci_low ci_high. ... arguments passed summary, object estimation, /function plot lines (add = TRUE). style character scalar giving style plot used. can set styles function setFixest_coefplot, setting default values function. missing, switches either \"default\" \"iplot\", depending calling function. sd standard errors estimates. may missing. ci_low sd provided, lower bound confidence interval. estimate. ci_high sd provided, upper bound confidence interval. estimate. x value x-axis. missing, names argument estimate used. x.shift Shifts confidence intervals bars left right, depending value x.shift. Default 0. horiz logical scalar, default FALSE. Whether display confidence intervals horizontally instead vertically. dict named character vector logical scalar. changes original variable names ones contained dictionary. E.g. change variables named b3 (resp.) “$log()$” “$bonus^3$”, use dict=c(=\"$log()$\",b3=\"$bonus^3$\"). default, equal getFixest_dict(), default dictionary can set setFixest_dict. can use dict = FALSE disable . default dict modifies entries global dictionary, disable behavior, use \"reset\" first element (ex: dict=c(\"reset\", mpg=\"Miles per gallon\")). keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. ci.width width extremities confidence intervals. Default 0.1. ci_level Scalar 0 1: level CI. default equal 0.95. add Default FALSE, intervals added existing graph. Note case, argument x MUST numeric. pt.pch patch coefficient estimates. Default 1 (circle). pt.bg background color point estimate (pt.pch 21 25). Defaults NULL. cex Numeric, default 1. Expansion factor points pt.cex size coefficient estimates. Default argument cex. col color points confidence intervals. Default 1 (\"black\"). Note can set colors separately pt.col ci.col. pt.col color coefficient estimates. Default equal argument col. ci.col color confidence intervals. Default equal argument col. lwd General line . Default 1. pt.lwd line width coefficient estimates. Default equal argument lwd. ci.lwd line width confidence intervals. Default equal argument lwd. ci.lty line type confidence intervals. Default 1. grid Logical, default TRUE. Whether grid displayed. can set display grid argument grid.par. grid.par List. Parameters grid. default values : lty = 3 col = \"gray\". can add graphical parameter passed graphics::abline. also two additional arguments: use horiz = FALSE disable horizontal lines, use vert = FALSE disable vertical lines. Eg: grid.par = list(vert = FALSE, col = \"red\", lwd = 2). zero Logical, default TRUE. Whether 0-line emphasized. can set parameters line argument zero.par. zero.par List. Parameters zero-line. default values col = \"black\" lwd = 1. can add graphical parameter passed graphics::abline. Example: zero.par = list(col = \"darkblue\", lwd = 3). pt.join Logical, default FALSE. TRUE, coefficient estimates joined line. pt.join.par List. Parameters line joining coefficients. default values : col = pt.col lwd = lwd. can add graphical parameter passed lines. Eg: pt.join.par = list(lty = 2). ci.join Logical default FALSE. Whether join extremities confidence intervals. TRUE, can set graphical parameters argument ci.join.par. ci.join.par list parameters passed graphics::lines. used ci.join=TRUE. default equal list(lwd = lwd, col = col, lty = 2). ci.fill Logical default FALSE. Whether fill confidence intervals color. TRUE, can set graphical parameters argument ci.fill.par. ci.fill.par list parameters passed graphics::polygon. used ci.fill=TRUE. default equal list(col = \"lightgray\", alpha = 0.5). Note alpha special parameter adds transparency color (ranges 0 1). ref Used add points equal 0 (typically visualize reference points). Either: ) \"auto\" (default), ii) character vector length 1, iii) list length 1, iv) named integer vector length 1, v) numeric vector. default, iplot, argument ref used estimation, references automatically added. ii), ie character scalar, coefficient equal zero added first coefficient. list named integer vector length 1, integer gives position reference among coefficients name gives coefficient name. non-named numeric value ref works x-axis also numeric (can happen iplot). ref.line Logical numeric, default \"auto\", whose behavior depends situation. TRUE : ) interactions plotted, ii) x values numeric iii) reference found. TRUE, vertical line drawn level reference value. Otherwise, numeric vertical line drawn specific value. ref.line.par List. Parameters vertical line reference. default values : col = \"black\" lty = 2. can add graphical parameter passed graphics::abline. Eg: ref.line.par = list(lty = 1, lwd = 3). lab.cex size labels coefficients. Default missing. automatically set internal algorithm can go low lab.min.cex (another argument). lab.min.cex minimum size coefficients labels, set internal algorithm. Default 0.85. lab.max.mar maximum size left margin can take trying fit coefficient labels (horiz = TRUE). used internal algorithm fitting coefficient labels. Default 0.25. lab.fit method fit coefficient labels plotting region (horiz = FALSE). Can \"auto\" (default), \"simple\", \"multi\" \"tilted\". \"simple\", classic axis drawn. \"multi\", coefficient labels fit horizontally across several lines, collide. \"tilted\", labels tilted. \"auto\", automatic choice three made. xlim.add numeric vector length 1 2. represents extension factor xlim, percentage. Eg: xlim.add = c(0, 0.5) extends xlim 50% right. length 1, positive values represent right, negative values left (Eg: xlim.add = -0.5 equivalent xlim.add = c(0.5, 0)). ylim.add numeric vector length 1 2. represents extension factor ylim, percentage. Eg: ylim.add = c(0, 0.5) extends ylim 50% top. length 1, positive values represent top, negative values bottom (Eg: ylim.add = -0.5 equivalent ylim.add = c(0.5, 0)). .params Logical, default FALSE. TRUE graphic displayed, values x y used plot returned. sep distance two estimates -- argument object list estimation results. .multiple Logical: default FALSE. object single estimation result: whether coefficient different color, line type, etc. default get style. bg Background color plot. default white. group list, default missing. element list reports coefficients grouped name element group name. element list can either: ) character vector length 1, ii) length 2, ii) numeric vector. equal : ) interpreted pattern: element fitting regular expression grouped (note can use special character \"^^\" clean beginning names, see example), ii) corrsponds first last elements grouped, iii) corresponds coefficients numbers grouped. equal character vector, can use percentage tell algorithm look coefficients aliasing (e.g. \"%varname\"). Example valid uses: group=list(group_name=\\\"pattern\\\"), group=list(group_name=c(\\\"var_start\\\", \\\"var_end\\\")), group=list(group_name=1:2)). See details. group.par list parameters controlling display group. parameters controlling line : lwd, tcl (length tick), line.adj (adjustment position, default 0), tick (whether add ticks), lwd.ticks, col.ticks. parameters controlling text: text.adj (adjustment position, default 0), text.cex, text.font, text.col. main title plot. Default \"Effect __depvar__\". can use special variable __depvar__ set title (useful set plot default setFixest_coefplot). value.lab label appear side coefficient values. horiz = FALSE, label appears y-axis. horiz = TRUE, appears x-axis. default equal \"Estimate __ci__ Conf. Int.\", __ci__ special variable giving value confidence interval. ylab label y-axis, default NULL. Note horiz = FALSE, overrides value argument value.lab. xlab label x-axis, default NULL. Note horiz = TRUE, overrides value argument value.lab. sub subtitle, default NULL. .select Integer scalar, default 1. iplot, used select variable created () select. used several variables created . index, just try increasing numbers hopefully obtain want. Note works much better variables \"pure\" () variables interacted variables. example: (species, x1) good (species):x1 . latter also work index may feel weird case many () variables.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plots confidence intervals and point estimates — coefplot","text":"iplot(): Plots coefficients generated ()","code":""},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"setting-custom-default-values","dir":"Reference","previous_headings":"","what":"Setting custom default values","title":"Plots confidence intervals and point estimates — coefplot","text":"function coefplot dispose many arguments parametrize plots. arguments can set using function setFixest_coefplot. See Example 3 demonstration.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"iplot","dir":"Reference","previous_headings":"","what":"iplot","title":"Plots confidence intervals and point estimates — coefplot","text":"function iplot restricts coefplot interactions factors created function . one -variables plotted time. several -variables, can navigate .select argument. argument .select index go -variables. work well variables pure, meaning interacted variables. -variables interacted, index may odd behavior (cases) work , just try numbers (hopefully) obtain graph want. Note, importantly, interactions two factor variables (general) disregarded since require 3-D plot properly represented.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"arguments-keep-drop-and-order","dir":"Reference","previous_headings":"","what":"Arguments keep, drop and order","title":"Plots confidence intervals and point estimates — coefplot","text":"arguments keep, drop order use regular expressions. aware regular expressions, urge learn , since extremely powerful way manipulate character strings (exists across programming languages). example drop = \"Wind\" drop variable whose name contains \"Wind\". Note variables \"Temp:Wind\" \"StrongWind\" contain \"Wind\", dropped. drop variable named \"Wind\", need use drop = \"^Wind$\" (\"^\" meaning beginning, resp. \"$\" meaning end, string => language regular expressions). Although can combine several regular expressions single character string using pipes, drop also accepts vector regular expressions. can use special character \"!\" (exclamation mark) reverse effect regular expression (feature specific function). example drop = \"!Wind\" drop variable contain \"Wind\". can use special character \"%\" (percentage) make reference original variable name instead aliased name. example, variable named \"Month6\", use dictionary dict = c(Month6=\"June\"). Thus variable displayed \"June\". want delete variable, can use either drop=\"June\", drop=\"%Month6\" (makes reference original name). argument order takes vector regular expressions, order follow elements vector. vector gives list priorities, left elements highest priority. example, order = c(\"Wind\", \"!Inter\", \"!Temp\") give highest priorities variables containing \"Wind\" (appear first), second highest priority variables containing \"Inter\", last, lowest priority, variables containing \"Temp\". following variables: (Intercept), Temp:Wind, Wind, Temp end following order: Wind, Temp:Wind, Temp, (Intercept).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots confidence intervals and point estimates — coefplot","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/coefplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots confidence intervals and point estimates — coefplot","text":"","code":"# # Example 1: Stacking two sets of results on the same graph #  # Estimation on Iris data with one fixed-effect (Species) est = feols(Petal.Length ~ Petal.Width + Sepal.Length +             Sepal.Width | Species, iris)  # Estimation results with clustered standard-errors # (the default when fixed-effects are present) est_clu = summary(est) # Now with \"regular\" standard-errors est_std = summary(est, se = \"iid\")  # You can plot the two results at once coefplot(list(est_clu, est_std))    # Alternatively, you can use the argument x.shift # to do it sequentially:  # First graph with clustered standard-errors coefplot(est, x.shift = -.2)  # 'x.shift' was used to shift the coefficients on the left.  # Second set of results: this time with #  standard-errors that are not clustered. coefplot(est, se = \"iid\", x.shift = .2,          add = TRUE, col = 2, ci.lty = 2, pch=15)   # Note that we used 'se', an argument that will  #  be passed to summary.fixest  legend(\"topright\", col = 1:2, pch = 20, lwd = 1, lty = 1:2,        legend = c(\"Clustered\", \"IID\"), title = \"Standard-Errors\")    # # Example 2: Interactions #   # Now we estimate and plot the \"yearly\" treatment effects  data(base_did) base_inter = base_did  # We interact the variable 'period' with the variable 'treat' est_did = feols(y ~ x1 + i(period, treat, 5) | id+period, base_inter)  # In the estimation, the variable treat is interacted #  with each value of period but 5, set as a reference  # coefplot will show all the coefficients: coefplot(est_did)   # Note that the grouping of the coefficients is due to 'group = \"auto\"'  # If you want to keep only the coefficients # created with i() (ie the interactions), use iplot iplot(est_did)   # When estimations contain interactions, as before, #  the default behavior of coefplot changes, #  it now only plots interactions: coefplot(est_did)   # We can see that the graph is different from before: #  - only interactions are shown, #  - the reference is present, # => this is fully flexible  iplot(est_did, ref.line = FALSE, pt.join = TRUE)    # # What if the interacted variable is not numeric?  # Let's create a \"month\" variable all_months = c(\"aug\", \"sept\", \"oct\", \"nov\", \"dec\", \"jan\",                \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\") base_inter$period_month = all_months[base_inter$period]  # The new estimation est = feols(y ~ x1 + i(period_month, treat, \"oct\") | id+period, base_inter) # Since 'period_month' of type character, coefplot sorts it iplot(est)   # To respect a plotting order, use a factor base_inter$month_factor = factor(base_inter$period_month, levels = all_months) est = feols(y ~ x1 + i(month_factor, treat, \"oct\") | id+period, base_inter) iplot(est)    # # Example 3: Setting defaults #  # coefplot has many arguments, which makes it highly flexible. # If you don't like the default style of coefplot. No worries, # you can set *your* default by using the function # setFixest_coefplot()  dict = c(\"Petal.Length\"=\"Length (Petal)\", \"Petal.Width\"=\"Width (Petal)\",          \"Sepal.Length\"=\"Length (Sepal)\", \"Sepal.Width\"=\"Width (Sepal)\")  setFixest_coefplot(ci.col = 2, pt.col = \"darkblue\", ci.lwd = 3,                    pt.cex = 2, pt.pch = 15, ci.width = 0, dict = dict)  est = feols(Petal.Length ~ Petal.Width + Sepal.Length +                 Sepal.Width + i(Species), iris)  # And that's it coefplot(est)   # You can set separate default values for iplot setFixest_coefplot(\"iplot\", pt.join = TRUE, pt.join.par = list(lwd = 2, lty = 2)) iplot(est)   # To reset to the default settings: setFixest_coefplot(\"all\", reset = TRUE) coefplot(est)   # # Example 4: group + cleaning #  # You can use the argument group to group variables # You can further use the special character \"^^\" to clean #  the beginning of the coef. name: particularly useful for factors  est = feols(Petal.Length ~ Petal.Width + Sepal.Length +                 Sepal.Width + Species, iris)  # No grouping: coefplot(est)  # now we group by Sepal and Species coefplot(est, group = list(Sepal = \"Sepal\", Species = \"Species\"))   # now we group + clean the beginning of the names using the special character ^^ coefplot(est, group = list(Sepal = \"^^Sepal.\", Species = \"^^Species\"))"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the coefficients table from an estimation — coeftable.default","title":"Extracts the coefficients table from an estimation — coeftable.default","text":"Default method extracts coefficients table sub-components estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the coefficients table from an estimation — coeftable.default","text":"","code":"# S3 method for default coeftable(object, keep, drop, order, ...)  # S3 method for default se(object, keep, drop, order, ...)  # S3 method for default tstat(object, keep, drop, order, ...)  # S3 method for default pvalue(object, keep, drop, order, ...)  # S3 method for matrix se(object, keep, drop, order, ...)"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the coefficients table from an estimation — coeftable.default","text":"object result estimation (fitted model object). Note function made work fixest objects may work specific model provide. keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. ... arguments passed summary. First method summary applied needed, coefficients table extracted output. default method naive hopes resulting coefficients table contained summary fitted model well formed: assumption often wrong. Anyway, development intended since coeftable/se/pvalue/tstat series methods intended work well fixest objects. extract coefficients table fitted models general way, better use tidy broom.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the coefficients table from an estimation — coeftable.default","text":"Returns matrix (coeftable) vectors.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.default.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Extracts the coefficients table from an estimation — coeftable.default","text":"se(default): Extracts standard-errors estimation tstat(default): Extracts standard-errors estimation pvalue(default): Extracts p-values estimation se(matrix): Extracts standard-errors VCOV matrix","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the coefficients table from an estimation — coeftable.default","text":"","code":"# NOTA: This function is really made to handle fixest objects # The default methods works for simple structures, but you'd be # likely better off with broom::tidy for other models  est = lm(mpg ~ cyl, mtcars) coeftable(est) #>             Estimate Std. Error   t value     Pr(>|t|) #> (Intercept) 37.88458  2.0738436 18.267808 8.369155e-18 #> cyl         -2.87579  0.3224089 -8.919699 6.112687e-10  se(est) #> (Intercept)         cyl  #>   2.0738436   0.3224089"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain various statistics from an estimation — coeftable.fixest","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"Set functions directly extract commonly used statistics, like p-value table coefficients, estimations. first implemented fixest estimations, support models.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"","code":"# S3 method for fixest coeftable(   object,   vcov = NULL,   ssc = NULL,   cluster = NULL,   keep = NULL,   drop = NULL,   order = NULL,   list = FALSE,   ... )  # S3 method for fixest se(   object,   vcov = NULL,   ssc = NULL,   cluster = NULL,   keep = NULL,   drop = NULL,   order = NULL,   ... )  # S3 method for fixest tstat(   object,   vcov = NULL,   ssc = NULL,   cluster = NULL,   keep = NULL,   drop = NULL,   order = NULL,   ... )  # S3 method for fixest pvalue(   object,   vcov = NULL,   ssc = NULL,   cluster = NULL,   keep = NULL,   drop = NULL,   order = NULL,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"object fixest object. example estimation obtained feols. vcov function used compute standard-errors fixest object. can pass extra arguments function using argument .vcov_args. See example. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1, \"var2\")], cluster = c(\"var1, \"var2\"), cluster = ~var1+var2. two variables used clusters estimation, use cluster = 1:2 leave blank se = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] cluster). keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. list Logical, default FALSE. TRUE, nested list returned, first layer accessed coefficients names; second layer following values: coef, se, tstat, pvalue. Note variable \"(Intercept)\" renamed \"constant\". ... arguments passed summary.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"Returns table coefficients, rows variables four columns: estimate, standard-error, t-statistic p-value. list = TRUE nested list returned, first layer accessed coefficients names; second layer following values: coef, se, tstat, pvalue. example, res = coeftable(est, list = TRUE) can access SE coefficient x1 res$x1$se; coefficient res$x1$coef, etc.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"set tiny functions primarily constructed fixest estimations.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"se(fixest): Extracts standard-error estimation tstat(fixest): Extracts t-statistics estimation pvalue(fixest): Extracts p-value estimation","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain various statistics from an estimation — coeftable.fixest","text":"","code":"# Some data and estimation data(trade) est = fepois(Euros ~ log(dist_km) | Origin^Product + Year, trade)  # # Coeftable/se/tstat/pvalue #  # Default is clustering along Origin^Product coeftable(est) #>               Estimate Std. Error   t value      Pr(>|t|) #> log(dist_km) -1.023957 0.04728994 -21.65275 5.725404e-104 #> attr(,\"type\") #> [1] \"Clustered (Origin^Product)\" se(est) #> log(dist_km)  #>   0.04728994  tstat(est) #> log(dist_km)  #>    -21.65275  pvalue(est) #>  log(dist_km)  #> 5.725404e-104   # Now with two-way clustered standard-errors #  and using coeftable()  coeftable(est, cluster = ~Origin + Product) #>               Estimate Std. Error   t value    Pr(>|t|) #> log(dist_km) -1.023957  0.0906375 -11.29728 1.35342e-29 #> attr(,\"type\") #> [1] \"Clustered (Origin & Product)\" se(est, cluster = ~Origin + Product) #> log(dist_km)  #>    0.0906375  pvalue(est, cluster = ~Origin + Product) #> log(dist_km)  #>  1.35342e-29  tstat(est, cluster = ~Origin + Product) #> log(dist_km)  #>    -11.29728   # Or you can cluster only once: est_sum = summary(est, cluster = ~Origin + Product) coeftable(est_sum) #>               Estimate Std. Error   t value    Pr(>|t|) #> log(dist_km) -1.023957  0.0906375 -11.29728 1.35342e-29 #> attr(,\"type\") #> [1] \"Clustered (Origin & Product)\" se(est_sum) #> log(dist_km)  #>    0.0906375  tstat(est_sum) #> log(dist_km)  #>    -11.29728  pvalue(est_sum) #> log(dist_km)  #>  1.35342e-29   # You can use the arguments keep, drop, order # to rearrange the results  base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  est_iv = feols(y ~ x1 | x2 ~ x3, base)  tstat(est_iv, keep = \"x1\") #>       x1  #> 7.960735  coeftable(est_iv, keep = \"x1|Int\") #>             Estimate Std. Error  t value     Pr(>|t|) #> (Intercept) 2.438955 0.25349903 9.621160 2.688392e-17 #> x1          0.559183 0.07024264 7.960735 4.261663e-13  coeftable(est_iv, order = \"!Int\") #>              Estimate Std. Error   t value     Pr(>|t|) #> fit_x2      0.4509765 0.01794806 25.126759 4.556383e-55 #> x1          0.5591830 0.07024264  7.960735 4.261663e-13 #> (Intercept) 2.4389548 0.25349903  9.621160 2.688392e-17  # # Using lists #  # Returning the coefficients table as a list can be useful for quick # reference in markdown documents. # Note that the \"(Intercept)\" is renamed into \"constant\"  res = coeftable(est_iv, list = TRUE)  # coefficient of the constant: res$constant$coef #> Estimate  #> 2.438955   # pvalue of x1 res$x1$pvalue #>     Pr(>|t|)  #> 4.261663e-13"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","title":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","text":"Series methods extract coefficients table sub-components fixest_multi objects (.e. outcome multiple estimations).","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","text":"","code":"# S3 method for fixest_multi coeftable(   object,   vcov = NULL,   keep = NULL,   drop = NULL,   order = NULL,   long = FALSE,   wide = FALSE,   ... )  # S3 method for fixest_multi se(   object,   vcov = NULL,   keep = NULL,   drop = NULL,   order = NULL,   long = FALSE,   ... )  # S3 method for fixest_multi tstat(   object,   vcov = NULL,   keep = NULL,   drop = NULL,   order = NULL,   long = FALSE,   ... )  # S3 method for fixest_multi pvalue(   object,   vcov = NULL,   keep = NULL,   drop = NULL,   order = NULL,   long = FALSE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","text":"object fixest_multi object, coming fixest multiple estimation. vcov function used compute standard-errors fixest object. can pass extra arguments function using argument .vcov_args. See example. keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. long Logical scalar, default FALSE. TRUE, information stacked, two columns containing information: \"param\" \"value\". column param contains values coef/se/tstat/pvalue. wide logical scalar, default FALSE. TRUE, list returned: elements list coef/se/tstat/pvalue. element list wide table column per coefficient. ... arguments passed summary.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","text":"returns data.frame containing coefficients tables (just se/pvalue/tstat) along information model estimated. wide = TRUE, list returned. elements list coef/se/tstat/pvalue. element list wide table column per coefficient. long = TRUE, information stacked. removes 4 columns containing coefficient estimates p-values, replace two new columns: \"param\" \"value\". column param contains values coef/se/tstat/pvalue, column values associated numerical information.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest_multi.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","text":"se(fixest_multi): Extracts standard-errors fixest_multi estimations tstat(fixest_multi): Extracts t-stats fixest_multi estimations pvalue(fixest_multi): Extracts p-values fixest_multi estimations","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the coefficients tables from fixest_multi estimations — coeftable.fixest_multi","text":"","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) est_multi = feols(y~ csw(x.[,1:3]), base, split = ~species)  # we get all the coefficient tables at once coeftable(est_multi) #>    id sample.var     sample          rhs coefficient   Estimate Std. Error #> 1   1    species     setosa           x1 (Intercept)  2.6390012 0.31001431 #> 2   1    species     setosa           x1          x1  0.6904897 0.08989888 #> 3   2    species     setosa      x1 + x2 (Intercept)  2.3037382 0.38529423 #> 4   2    species     setosa      x1 + x2          x1  0.6674162 0.09035581 #> 5   2    species     setosa      x1 + x2          x2  0.2834193 0.19722377 #> 6   3    species     setosa x1 + x2 + x3 (Intercept)  2.3518898 0.39286751 #> 7   3    species     setosa x1 + x2 + x3          x1  0.6548350 0.09244742 #> 8   3    species     setosa x1 + x2 + x3          x2  0.2375602 0.20801921 #> 9   3    species     setosa x1 + x2 + x3          x3  0.2521257 0.34686362 #> 10  4    species versicolor           x1 (Intercept)  3.5397347 0.56287357 #> 11  4    species versicolor           x1          x1  0.8650777 0.20193757 #> 12  5    species versicolor      x1 + x2 (Intercept)  2.1164314 0.49425559 #> 13  5    species versicolor      x1 + x2          x1  0.2476422 0.18683892 #> 14  5    species versicolor      x1 + x2          x2  0.7355868 0.12476776 #> 15  6    species versicolor x1 + x2 + x3 (Intercept)  1.8955395 0.50705524 #> 16  6    species versicolor x1 + x2 + x3          x1  0.3868576 0.20454490 #> 17  6    species versicolor x1 + x2 + x3          x2  0.9083370 0.16543248 #> 18  6    species versicolor x1 + x2 + x3          x3 -0.6792238 0.43538206 #> 19  7    species  virginica           x1 (Intercept)  3.9068365 0.75706053 #> 20  7    species  virginica           x1          x1  0.9015345 0.25310551 #> 21  8    species  virginica      x1 + x2 (Intercept)  0.6247824 0.52486745 #> 22  8    species  virginica      x1 + x2          x1  0.2599540 0.15333757 #> 23  8    species  virginica      x1 + x2          x2  0.9348189 0.08960197 #> 24  9    species  virginica x1 + x2 + x3 (Intercept)  0.6998830 0.53360089 #> 25  9    species  virginica x1 + x2 + x3          x1  0.3303370 0.17432873 #> 26  9    species  virginica x1 + x2 + x3          x2  0.9455356 0.09072204 #> 27  9    species  virginica x1 + x2 + x3          x3 -0.1697527 0.19807243 #>       t value     Pr(>|t|) #> 1   8.5125144 3.742438e-11 #> 2   7.6807376 6.709843e-10 #> 3   5.9791662 2.894273e-07 #> 4   7.3865333 2.125173e-09 #> 5   1.4370442 1.573296e-01 #> 6   5.9864707 3.034183e-07 #> 7   7.0833236 6.834434e-09 #> 8   1.1420107 2.593594e-01 #> 9   0.7268727 4.709870e-01 #> 10  6.2886852 9.069049e-08 #> 11  4.2838870 8.771860e-05 #> 12  4.2820586 9.063960e-05 #> 13  1.3254313 1.914351e-01 #> 14  5.8956480 3.870715e-07 #> 15  3.7383295 5.112246e-04 #> 16  1.8913091 6.488965e-02 #> 17  5.4906811 1.666695e-06 #> 18 -1.5600639 1.255990e-01 #> 19  5.1605338 4.656345e-06 #> 20  3.5618920 8.434625e-04 #> 21  1.1903622 2.398819e-01 #> 22  1.6953052 9.663372e-02 #> 23 10.4330175 8.009442e-14 #> 24  1.3116227 1.961563e-01 #> 25  1.8949086 6.439972e-02 #> 26 10.4223360 1.074269e-13 #> 27 -0.8570233 3.958750e-01  # Now just the standard-errors se(est_multi) #>   id sample.var     sample          rhs (Intercept)         x1         x2 #> 1  1    species     setosa           x1   0.3100143 0.08989888         NA #> 2  2    species     setosa      x1 + x2   0.3852942 0.09035581 0.19722377 #> 3  3    species     setosa x1 + x2 + x3   0.3928675 0.09244742 0.20801921 #> 4  4    species versicolor           x1   0.5628736 0.20193757         NA #> 5  5    species versicolor      x1 + x2   0.4942556 0.18683892 0.12476776 #> 6  6    species versicolor x1 + x2 + x3   0.5070552 0.20454490 0.16543248 #> 7  7    species  virginica           x1   0.7570605 0.25310551         NA #> 8  8    species  virginica      x1 + x2   0.5248675 0.15333757 0.08960197 #> 9  9    species  virginica x1 + x2 + x3   0.5336009 0.17432873 0.09072204 #>          x3 #> 1        NA #> 2        NA #> 3 0.3468636 #> 4        NA #> 5        NA #> 6 0.4353821 #> 7        NA #> 8        NA #> 9 0.1980724  # wide = TRUE => leads toa  list of wide tables coeftable(est_multi, wide = TRUE) #> $coef #>   id sample.var     sample          rhs (Intercept)        x1        x2 #> 1  1    species     setosa           x1   2.6390012 0.6904897        NA #> 2  2    species     setosa      x1 + x2   2.3037382 0.6674162 0.2834193 #> 3  3    species     setosa x1 + x2 + x3   2.3518898 0.6548350 0.2375602 #> 4  4    species versicolor           x1   3.5397347 0.8650777        NA #> 5  5    species versicolor      x1 + x2   2.1164314 0.2476422 0.7355868 #> 6  6    species versicolor x1 + x2 + x3   1.8955395 0.3868576 0.9083370 #> 7  7    species  virginica           x1   3.9068365 0.9015345        NA #> 8  8    species  virginica      x1 + x2   0.6247824 0.2599540 0.9348189 #> 9  9    species  virginica x1 + x2 + x3   0.6998830 0.3303370 0.9455356 #>           x3 #> 1         NA #> 2         NA #> 3  0.2521257 #> 4         NA #> 5         NA #> 6 -0.6792238 #> 7         NA #> 8         NA #> 9 -0.1697527 #>  #> $se #>   id sample.var     sample          rhs (Intercept)         x1         x2 #> 1  1    species     setosa           x1   0.3100143 0.08989888         NA #> 2  2    species     setosa      x1 + x2   0.3852942 0.09035581 0.19722377 #> 3  3    species     setosa x1 + x2 + x3   0.3928675 0.09244742 0.20801921 #> 4  4    species versicolor           x1   0.5628736 0.20193757         NA #> 5  5    species versicolor      x1 + x2   0.4942556 0.18683892 0.12476776 #> 6  6    species versicolor x1 + x2 + x3   0.5070552 0.20454490 0.16543248 #> 7  7    species  virginica           x1   0.7570605 0.25310551         NA #> 8  8    species  virginica      x1 + x2   0.5248675 0.15333757 0.08960197 #> 9  9    species  virginica x1 + x2 + x3   0.5336009 0.17432873 0.09072204 #>          x3 #> 1        NA #> 2        NA #> 3 0.3468636 #> 4        NA #> 5        NA #> 6 0.4353821 #> 7        NA #> 8        NA #> 9 0.1980724 #>  #> $tstat #>   id sample.var     sample          rhs (Intercept)       x1        x2 #> 1  1    species     setosa           x1    8.512514 7.680738        NA #> 2  2    species     setosa      x1 + x2    5.979166 7.386533  1.437044 #> 3  3    species     setosa x1 + x2 + x3    5.986471 7.083324  1.142011 #> 4  4    species versicolor           x1    6.288685 4.283887        NA #> 5  5    species versicolor      x1 + x2    4.282059 1.325431  5.895648 #> 6  6    species versicolor x1 + x2 + x3    3.738329 1.891309  5.490681 #> 7  7    species  virginica           x1    5.160534 3.561892        NA #> 8  8    species  virginica      x1 + x2    1.190362 1.695305 10.433017 #> 9  9    species  virginica x1 + x2 + x3    1.311623 1.894909 10.422336 #>           x3 #> 1         NA #> 2         NA #> 3  0.7268727 #> 4         NA #> 5         NA #> 6 -1.5600639 #> 7         NA #> 8         NA #> 9 -0.8570233 #>  #> $pvalue #>   id sample.var     sample          rhs  (Intercept)           x1           x2 #> 1  1    species     setosa           x1 3.742438e-11 6.709843e-10           NA #> 2  2    species     setosa      x1 + x2 2.894273e-07 2.125173e-09 1.573296e-01 #> 3  3    species     setosa x1 + x2 + x3 3.034183e-07 6.834434e-09 2.593594e-01 #> 4  4    species versicolor           x1 9.069049e-08 8.771860e-05           NA #> 5  5    species versicolor      x1 + x2 9.063960e-05 1.914351e-01 3.870715e-07 #> 6  6    species versicolor x1 + x2 + x3 5.112246e-04 6.488965e-02 1.666695e-06 #> 7  7    species  virginica           x1 4.656345e-06 8.434625e-04           NA #> 8  8    species  virginica      x1 + x2 2.398819e-01 9.663372e-02 8.009442e-14 #> 9  9    species  virginica x1 + x2 + x3 1.961563e-01 6.439972e-02 1.074269e-13 #>         x3 #> 1       NA #> 2       NA #> 3 0.470987 #> 4       NA #> 5       NA #> 6 0.125599 #> 7       NA #> 8       NA #> 9 0.395875 #>   # long = TRUE, all the information is stacked coeftable(est_multi, long = TRUE) #>     id sample.var     sample          rhs coefficient  param         value #> 1    1    species     setosa           x1 (Intercept)   coef  2.639001e+00 #> 2    1    species     setosa           x1 (Intercept)     se  3.100143e-01 #> 3    1    species     setosa           x1 (Intercept)  tstat  8.512514e+00 #> 4    1    species     setosa           x1 (Intercept) pvalue  3.742438e-11 #> 5    1    species     setosa           x1          x1   coef  6.904897e-01 #> 6    1    species     setosa           x1          x1     se  8.989888e-02 #> 7    1    species     setosa           x1          x1  tstat  7.680738e+00 #> 8    1    species     setosa           x1          x1 pvalue  6.709843e-10 #> 9    2    species     setosa      x1 + x2 (Intercept)   coef  2.303738e+00 #> 10   2    species     setosa      x1 + x2 (Intercept)     se  3.852942e-01 #> 11   2    species     setosa      x1 + x2 (Intercept)  tstat  5.979166e+00 #> 12   2    species     setosa      x1 + x2 (Intercept) pvalue  2.894273e-07 #> 13   2    species     setosa      x1 + x2          x1   coef  6.674162e-01 #> 14   2    species     setosa      x1 + x2          x1     se  9.035581e-02 #> 15   2    species     setosa      x1 + x2          x1  tstat  7.386533e+00 #> 16   2    species     setosa      x1 + x2          x1 pvalue  2.125173e-09 #> 17   2    species     setosa      x1 + x2          x2   coef  2.834193e-01 #> 18   2    species     setosa      x1 + x2          x2     se  1.972238e-01 #> 19   2    species     setosa      x1 + x2          x2  tstat  1.437044e+00 #> 20   2    species     setosa      x1 + x2          x2 pvalue  1.573296e-01 #> 21   3    species     setosa x1 + x2 + x3 (Intercept)   coef  2.351890e+00 #> 22   3    species     setosa x1 + x2 + x3 (Intercept)     se  3.928675e-01 #> 23   3    species     setosa x1 + x2 + x3 (Intercept)  tstat  5.986471e+00 #> 24   3    species     setosa x1 + x2 + x3 (Intercept) pvalue  3.034183e-07 #> 25   3    species     setosa x1 + x2 + x3          x1   coef  6.548350e-01 #> 26   3    species     setosa x1 + x2 + x3          x1     se  9.244742e-02 #> 27   3    species     setosa x1 + x2 + x3          x1  tstat  7.083324e+00 #> 28   3    species     setosa x1 + x2 + x3          x1 pvalue  6.834434e-09 #> 29   3    species     setosa x1 + x2 + x3          x2   coef  2.375602e-01 #> 30   3    species     setosa x1 + x2 + x3          x2     se  2.080192e-01 #> 31   3    species     setosa x1 + x2 + x3          x2  tstat  1.142011e+00 #> 32   3    species     setosa x1 + x2 + x3          x2 pvalue  2.593594e-01 #> 33   3    species     setosa x1 + x2 + x3          x3   coef  2.521257e-01 #> 34   3    species     setosa x1 + x2 + x3          x3     se  3.468636e-01 #> 35   3    species     setosa x1 + x2 + x3          x3  tstat  7.268727e-01 #> 36   3    species     setosa x1 + x2 + x3          x3 pvalue  4.709870e-01 #> 37   4    species versicolor           x1 (Intercept)   coef  3.539735e+00 #> 38   4    species versicolor           x1 (Intercept)     se  5.628736e-01 #> 39   4    species versicolor           x1 (Intercept)  tstat  6.288685e+00 #> 40   4    species versicolor           x1 (Intercept) pvalue  9.069049e-08 #> 41   4    species versicolor           x1          x1   coef  8.650777e-01 #> 42   4    species versicolor           x1          x1     se  2.019376e-01 #> 43   4    species versicolor           x1          x1  tstat  4.283887e+00 #> 44   4    species versicolor           x1          x1 pvalue  8.771860e-05 #> 45   5    species versicolor      x1 + x2 (Intercept)   coef  2.116431e+00 #> 46   5    species versicolor      x1 + x2 (Intercept)     se  4.942556e-01 #> 47   5    species versicolor      x1 + x2 (Intercept)  tstat  4.282059e+00 #> 48   5    species versicolor      x1 + x2 (Intercept) pvalue  9.063960e-05 #> 49   5    species versicolor      x1 + x2          x1   coef  2.476422e-01 #> 50   5    species versicolor      x1 + x2          x1     se  1.868389e-01 #> 51   5    species versicolor      x1 + x2          x1  tstat  1.325431e+00 #> 52   5    species versicolor      x1 + x2          x1 pvalue  1.914351e-01 #> 53   5    species versicolor      x1 + x2          x2   coef  7.355868e-01 #> 54   5    species versicolor      x1 + x2          x2     se  1.247678e-01 #> 55   5    species versicolor      x1 + x2          x2  tstat  5.895648e+00 #> 56   5    species versicolor      x1 + x2          x2 pvalue  3.870715e-07 #> 57   6    species versicolor x1 + x2 + x3 (Intercept)   coef  1.895540e+00 #> 58   6    species versicolor x1 + x2 + x3 (Intercept)     se  5.070552e-01 #> 59   6    species versicolor x1 + x2 + x3 (Intercept)  tstat  3.738329e+00 #> 60   6    species versicolor x1 + x2 + x3 (Intercept) pvalue  5.112246e-04 #> 61   6    species versicolor x1 + x2 + x3          x1   coef  3.868576e-01 #> 62   6    species versicolor x1 + x2 + x3          x1     se  2.045449e-01 #> 63   6    species versicolor x1 + x2 + x3          x1  tstat  1.891309e+00 #> 64   6    species versicolor x1 + x2 + x3          x1 pvalue  6.488965e-02 #> 65   6    species versicolor x1 + x2 + x3          x2   coef  9.083370e-01 #> 66   6    species versicolor x1 + x2 + x3          x2     se  1.654325e-01 #> 67   6    species versicolor x1 + x2 + x3          x2  tstat  5.490681e+00 #> 68   6    species versicolor x1 + x2 + x3          x2 pvalue  1.666695e-06 #> 69   6    species versicolor x1 + x2 + x3          x3   coef -6.792238e-01 #> 70   6    species versicolor x1 + x2 + x3          x3     se  4.353821e-01 #> 71   6    species versicolor x1 + x2 + x3          x3  tstat -1.560064e+00 #> 72   6    species versicolor x1 + x2 + x3          x3 pvalue  1.255990e-01 #> 73   7    species  virginica           x1 (Intercept)   coef  3.906836e+00 #> 74   7    species  virginica           x1 (Intercept)     se  7.570605e-01 #> 75   7    species  virginica           x1 (Intercept)  tstat  5.160534e+00 #> 76   7    species  virginica           x1 (Intercept) pvalue  4.656345e-06 #> 77   7    species  virginica           x1          x1   coef  9.015345e-01 #> 78   7    species  virginica           x1          x1     se  2.531055e-01 #> 79   7    species  virginica           x1          x1  tstat  3.561892e+00 #> 80   7    species  virginica           x1          x1 pvalue  8.434625e-04 #> 81   8    species  virginica      x1 + x2 (Intercept)   coef  6.247824e-01 #> 82   8    species  virginica      x1 + x2 (Intercept)     se  5.248675e-01 #> 83   8    species  virginica      x1 + x2 (Intercept)  tstat  1.190362e+00 #> 84   8    species  virginica      x1 + x2 (Intercept) pvalue  2.398819e-01 #> 85   8    species  virginica      x1 + x2          x1   coef  2.599540e-01 #> 86   8    species  virginica      x1 + x2          x1     se  1.533376e-01 #> 87   8    species  virginica      x1 + x2          x1  tstat  1.695305e+00 #> 88   8    species  virginica      x1 + x2          x1 pvalue  9.663372e-02 #> 89   8    species  virginica      x1 + x2          x2   coef  9.348189e-01 #> 90   8    species  virginica      x1 + x2          x2     se  8.960197e-02 #> 91   8    species  virginica      x1 + x2          x2  tstat  1.043302e+01 #> 92   8    species  virginica      x1 + x2          x2 pvalue  8.009442e-14 #> 93   9    species  virginica x1 + x2 + x3 (Intercept)   coef  6.998830e-01 #> 94   9    species  virginica x1 + x2 + x3 (Intercept)     se  5.336009e-01 #> 95   9    species  virginica x1 + x2 + x3 (Intercept)  tstat  1.311623e+00 #> 96   9    species  virginica x1 + x2 + x3 (Intercept) pvalue  1.961563e-01 #> 97   9    species  virginica x1 + x2 + x3          x1   coef  3.303370e-01 #> 98   9    species  virginica x1 + x2 + x3          x1     se  1.743287e-01 #> 99   9    species  virginica x1 + x2 + x3          x1  tstat  1.894909e+00 #> 100  9    species  virginica x1 + x2 + x3          x1 pvalue  6.439972e-02 #> 101  9    species  virginica x1 + x2 + x3          x2   coef  9.455356e-01 #> 102  9    species  virginica x1 + x2 + x3          x2     se  9.072204e-02 #> 103  9    species  virginica x1 + x2 + x3          x2  tstat  1.042234e+01 #> 104  9    species  virginica x1 + x2 + x3          x2 pvalue  1.074269e-13 #> 105  9    species  virginica x1 + x2 + x3          x3   coef -1.697527e-01 #> 106  9    species  virginica x1 + x2 + x3          x3     se  1.980724e-01 #> 107  9    species  virginica x1 + x2 + x3          x3  tstat -8.570233e-01 #> 108  9    species  virginica x1 + x2 + x3          x3 pvalue  3.958750e-01"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the coefficients table from an estimation — coeftable","title":"Extracts the coefficients table from an estimation — coeftable","text":"Methods extracts coefficients table sub-components estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the coefficients table from an estimation — coeftable","text":"","code":"coeftable(object, ...)  se(object, ...)  pvalue(object, ...)  tstat(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/coeftable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the coefficients table from an estimation — coeftable","text":"object estimation (fitted model object), e.g. fixest object. ... arguments methods.","code":""},{"path":"https://lrberge.github.io/fixest/reference/coeftable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the coefficients table from an estimation — coeftable","text":"Returns matrix (coeftable) vectors.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/coeftable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the coefficients table from an estimation — coeftable","text":"","code":"est = lm(mpg ~ cyl, mtcars) coeftable(est) #>             Estimate Std. Error   t value     Pr(>|t|) #> (Intercept) 37.88458  2.0738436 18.267808 8.369155e-18 #> cyl         -2.87579  0.3224089 -8.919699 6.112687e-10"},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":null,"dir":"Reference","previous_headings":"","what":"Collinearity diagnostics for fixest objects — collinearity","title":"Collinearity diagnostics for fixest objects — collinearity","text":"occasions, optimization algorithm femlm may fail converge, variance-covariance matrix may available. common reason happens collinearity among variables. function helps find set variables problematic.","code":""},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collinearity diagnostics for fixest objects — collinearity","text":"","code":"collinearity(x, verbose)"},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collinearity diagnostics for fixest objects — collinearity","text":"x fixest object obtained , e.g. functions femlm, feols feglm. verbose integer. higher equal 1, note prompted step algorithm. default verbose = 0 small problems 1 large problems.","code":""},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collinearity diagnostics for fixest objects — collinearity","text":"returns text message identified diagnostics.","code":""},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collinearity diagnostics for fixest objects — collinearity","text":"function tests: 1) collinearity fixed-effect variables, 2) perfect multi-collinearity variables, 4) perfect multi-collinearity several variables fixed-effects, 4) identification issues non-linear parameters parts.","code":""},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collinearity diagnostics for fixest objects — collinearity","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/collinearity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collinearity diagnostics for fixest objects — collinearity","text":"","code":"# Creating an example data base: set.seed(1) fe_1 = sample(3, 100, TRUE) fe_2 = sample(20, 100, TRUE) x = rnorm(100, fe_1)**2 y = rnorm(100, fe_2)**2 z = rnorm(100, 3)**2 dep = rpois(100, x*y*z) base = data.frame(fe_1, fe_2, x, y, z, dep)  # creating collinearity problems: base$v1 = base$v2 = base$v3 = base$v4 = 0 base$v1[base$fe_1 == 1] = 1 base$v2[base$fe_1 == 2] = 1 base$v3[base$fe_1 == 3] = 1 base$v4[base$fe_2 == 1] = 1  # Estimations:  # Collinearity with the fixed-effects: res_1 = femlm(dep ~ log(x) + v1 + v2 + v4 | fe_1 + fe_2, base) #> Warning: [femlm]: The optimization algorithm did not converge, the results are not reliable. The information matrix is singular: presence of collinearity. collinearity(res_1) #> [1] \"Variables 'v1' and 'v2' are collinear with fixed-effects `fe_1`.\"  # => collinearity with the first fixed-effect identified, we drop v1 and v2 res_1bis = femlm(dep ~ log(x) + v4 | fe_1 + fe_2, base) #> Warning: [femlm]: The information matrix is singular: presence of collinearity. collinearity(res_1bis) #> [1] \"Variable 'v4' is collinear with fixed-effects `fe_2`.\"  # Multi-Collinearity: res_2 =  femlm(dep ~ log(x) + v1 + v2 + v3 + v4, base) #> Warning: [femlm]: The optimization algorithm did not converge, the results are not reliable. The information matrix is singular: presence of collinearity. collinearity(res_2) #> [1] \"Variable `v1` is collinear with variables '(Intercept)', 'v2' and 'v3'.\""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence interval for parameters estimated with fixest — confint.fixest","title":"Confidence interval for parameters estimated with fixest — confint.fixest","text":"function computes confidence interval parameter estimates obtained model estimated femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence interval for parameters estimated with fixest — confint.fixest","text":"","code":"# S3 method for fixest confint(   object,   parm,   level = 0.95,   vcov,   se,   cluster,   ssc = NULL,   coef.col = FALSE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence interval for parameters estimated with fixest — confint.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. parm parameters compute confidence interval (either integer vector character vector parameter name). missing, parameters used. level confidence level. Default 0.95. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. coef.col Logical, default FALSE. TRUE column coefficient inserted first position containing coefficient names. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence interval for parameters estimated with fixest — confint.fixest","text":"Returns data.frame two columns giving respectively lower upper bound confidence interval. many rows parameters.","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence interval for parameters estimated with fixest — confint.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence interval for parameters estimated with fixest — confint.fixest","text":"","code":"# Load trade data data(trade)  # We estimate the effect of distance on trade (with 3 fixed-effects) est_pois = femlm(Euros ~ log(dist_km) + log(Year) | Origin + Destination +                  Product, trade)  # confidence interval with \"normal\" VCOV confint(est_pois) #>                  2.5 %    97.5 % #> log(dist_km) -1.754564 -1.301171 #> log(Year)    58.934594 86.305838  # confidence interval with \"clustered\" VCOV (w.r.t. the Origin factor) confint(est_pois, se = \"cluster\") #>                  2.5 %    97.5 % #> log(dist_km) -1.754564 -1.301171 #> log(Year)    58.934594 86.305838"},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for fixest_multi objects — confint.fixest_multi","title":"Confidence intervals for fixest_multi objects — confint.fixest_multi","text":"Computes confidence intervals parameter estimates fixest's multiple estimation objects (aka fixest_multi).","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for fixest_multi objects — confint.fixest_multi","text":"","code":"# S3 method for fixest_multi confint(   object,   parm,   level = 0.95,   vcov = NULL,   se = NULL,   cluster = NULL,   ssc = NULL,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for fixest_multi objects — confint.fixest_multi","text":"object fixest_multi object obtained multiple estimation fixest. parm parameters compute confidence interval (either integer vector character vector parameter name). missing, parameters used. level confidence level. Default 0.95. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals for fixest_multi objects — confint.fixest_multi","text":"returns data frame whose first columns indicate model estimated. last three columns indicate coefficient name, lower upper confidence intervals.","code":""},{"path":"https://lrberge.github.io/fixest/reference/confint.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence intervals for fixest_multi objects — confint.fixest_multi","text":"","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) est = feols(y ~ csw(x.[,1:3]) | sw0(species), base, vcov = \"iid\")  confint(est) #>    id   fixef          rhs coefficient      2.5 %      97.5 % #> 1   1       1           x1 (Intercept)  5.5798647  7.47258038 #> 2   1       1           x1          x1 -0.5298200  0.08309785 #> 3   2       1      x1 + x2 (Intercept)  1.7590943  2.73918600 #> 4   2       1      x1 + x2          x1  0.4585161  0.73253337 #> 5   2       1      x1 + x2          x2  0.4380915  0.50574857 #> 6   3       1 x1 + x2 + x3 (Intercept)  1.3603752  2.35161975 #> 7   3       1 x1 + x2 + x3          x1  0.5191189  0.78255545 #> 8   3       1 x1 + x2 + x3          x2  0.5970350  0.82122888 #> 9   3       1 x1 + x2 + x3          x3 -0.8085615 -0.30440382 #> 10  4 species           x1          x1  0.5933983  1.01372348 #> 11  5 species      x1 + x2          x1  0.2713535  0.59308089 #> 12  5 species      x1 + x2          x2  0.6486505  0.90260841 #> 13  6 species x1 + x2 + x3          x1  0.3257653  0.66601260 #> 14  6 species x1 + x2 + x3          x2  0.6937939  0.96469395 #> 15  6 species x1 + x2 + x3          x3 -0.6140049 -0.01630542  # focusing only on the coefficient 'x3' confint(est, \"x3\") #>   id   fixef          rhs coefficient      2.5 %      97.5 % #> 1  3       1 x1 + x2 + x3          x3 -0.8085615 -0.30440382 #> 2  6 species x1 + x2 + x3          x3 -0.6140049 -0.01630542  # the 'id' provides the index of the estimation est[c(3, 6)] #> Standard-errors: IID  #> Expl. vars.: x1 + x2 + x3 #> Fixed-effects: 1 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 *** #> --- #> Fixed-effects: species #>     Estimate Std. Error  t value   Pr(>|t|)     #> x1  0.495889   0.086070  5.76147 4.8675e-08 *** #> x2  0.829244   0.068528 12.10087  < 2.2e-16 *** #> x3 -0.315155   0.151196 -2.08442 3.8888e-02 *"},{"path":"https://lrberge.github.io/fixest/reference/degrees_freedom.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the degrees of freedom of a fixest estimation — degrees_freedom","title":"Gets the degrees of freedom of a fixest estimation — degrees_freedom","text":"Simple utility extract degrees freedom fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/degrees_freedom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the degrees of freedom of a fixest estimation — degrees_freedom","text":"","code":"degrees_freedom(   x,   type,   vars = NULL,   vcov = NULL,   se = NULL,   cluster = NULL,   ssc = NULL,   stage = 2 )  degrees_freedom_iid(x, type)"},{"path":"https://lrberge.github.io/fixest/reference/degrees_freedom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the degrees of freedom of a fixest estimation — degrees_freedom","text":"x fixest estimation. type Character scalar, equal \"k\", \"resid\", \"t\". \"k\", number regressors returned. \"resid\", \"residuals degree freedom\", .e. number observations minus number regressors. \"t\", degrees freedom used t-test. Note values affected VCOV x computed, particular VCOV clustered. vars vector variable names, regressors. optional. provided, type set 1 default number regressors contained vars returned. useful presence collinearity want subset regressors . (Mostly internal use.) vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. stage Either 1 2. concerns IV regressions, stage look . type VCOV can influence degrees freedom. particular, VCOV clustered, DoF returned accordance way small sample correction performed computing VCOV. type value general mind think \"degrees freedom\". obtain ones intuitive, please use degrees_freedom_iid instead.","code":""},{"path":"https://lrberge.github.io/fixest/reference/degrees_freedom.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Gets the degrees of freedom of a fixest estimation — degrees_freedom","text":"degrees_freedom_iid(): Gets degrees freedom fixest estimation","code":""},{"path":"https://lrberge.github.io/fixest/reference/degrees_freedom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the degrees of freedom of a fixest estimation — degrees_freedom","text":"","code":"# First: an estimation  base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\") est = feols(y ~ x1 + x2 | species, base)  # \"Normal\" standard-errors (SE) est_standard = summary(est, se = \"st\")  # Clustered SEs est_clustered = summary(est, se = \"clu\")  # The different degrees of freedom  # => different type 1 DoF (because of the clustering) degrees_freedom(est_standard, type = \"k\") #> [1] 5 degrees_freedom(est_clustered, type = \"k\") # fixed-effects are excluded #> [1] 3  # => different type 2 DoF (because of the clustering) degrees_freedom(est_standard, type = \"resid\") # => equivalent to the df.residual from lm #> [1] 145 degrees_freedom(est_clustered, type = \"resid\") #> [1] 147"},{"path":"https://lrberge.github.io/fixest/reference/demean.html","id":null,"dir":"Reference","previous_headings":"","what":"Centers a set of variables around a set of factors — demean","title":"Centers a set of variables around a set of factors — demean","text":"User-level access internal demeaning algorithm fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/demean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centers a set of variables around a set of factors — demean","text":"","code":"demean(   X,   f,   slope.vars,   slope.flag,   data,   weights,   nthreads = getFixest_nthreads(),   notes = getFixest_notes(),   iter = 2000,   tol = 1e-06,   fixef.reorder = TRUE,   na.rm = TRUE,   as.matrix = is.atomic(X),   im_confident = FALSE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/demean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centers a set of variables around a set of factors — demean","text":"X matrix, vector, data.frame list formula feols estimation. equal formula, argument data required, must type: x1 + x2 ~ f1 + fe2 LHS variables centered, RHS factors used centering. Note can use variables varying slopes syntax fe[v1, v2] (see details feols). feols estimation, variables (LHS+RHS) demeaned returned (estimated fixed-effects). Otherwise, must represent data centered. course number observations data must factors used centering (argument f). f matrix, vector, data.frame list. factors used center variables argument X. Matrices coerced using .data.frame. slope.vars vector, matrix list representing variables varying slopes. Matrices coerced using .data.frame. Note argument used MUST conjunction argument slope.flag maps factors varying slopes attached. See examples. slope.flag integer vector length number variables f (factors used centering). indicates factor number variables varying slopes associated. Positive values mean raw factor also included centering, negative values excluded. Sorry complicated... see examples may get clearer. data data.frame containing variables argument X. used X formula, case data mandatory. weights Vector, can missing NULL. present, must contain number observations X. nthreads Number threads used. default equal getFixest_nthreads(). notes Logical, whether display message NA values removed. default equal getFixest_notes(). iter Number iterations, default 2000. tol Stopping criterion algorithm. Default 1e-6. algorithm stops maximum absolute increase coefficients values lower tol. fixef.reorder Logical, default TRUE. Whether reorder fixed-effects frequencies feeding algorithm. FALSE, original fixed-effects order provided user maintained. general, reordering leads faster precise performance. na.rm Logical, default TRUE. TRUE input data contains NA value, observation NA discarded leading output less observations input. FALSE, NAs present output also filled NAs NA observation input. .matrix Logical, TRUE matrix returned, FALSE data.frame. default depends input, atomic matrix returned. im_confident Logical, default FALSE. EXPERT USERS ! argument allows skip preprocessing arguments given input. TRUE, X MUST numeric vector/matrix/list (formula!), f MUST list, slope.vars MUST list, slope.vars MUST consistent slope.flag, weights, given, MUST numeric (integer!). MUST NA value, number observations element MUST consistent. Non compliance rules may simply lead R session break. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/demean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centers a set of variables around a set of factors — demean","text":"returns data.frame number columns number variables centered. na.rm = TRUE, number rows equal number rows input minus number NA values (contained X, f, slope.vars weights). default output number observations input (filled NAs appropriate). matrix can returned .matrix = TRUE.","code":""},{"path":"https://lrberge.github.io/fixest/reference/demean.html","id":"varying-slopes","dir":"Reference","previous_headings":"","what":"Varying slopes","title":"Centers a set of variables around a set of factors — demean","text":"can add variables varying slopes fixed-effect part formula. syntax follows: fixef_var[var1, var2]. variables var1 var2 varying slopes (one slope per value fixef_var) fixed-effect fixef_var also added. add variables varying slopes fixed-effect, use double square brackets: fixef_var[[var1, var2]]. words: fixef_var[var1, var2] equivalent fixef_var + fixef_var[[var1]] + fixef_var[[var2]] fixef_var[[var1, var2]] equivalent fixef_var[[var1]] + fixef_var[[var2]] general, convergence reasons, recommended always add fixed-effect avoid using variable varying slope (.e. use single square brackets).","code":""},{"path":"https://lrberge.github.io/fixest/reference/demean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centers a set of variables around a set of factors — demean","text":"","code":"# Illustration of the FWL theorem data(trade)  base = trade base$ln_dist = log(base$dist_km) base$ln_euros = log(base$Euros)  # We center the two variables ln_dist and ln_euros #  on the factors Origin and Destination X_demean = demean(X = base[, c(\"ln_dist\", \"ln_euros\")],                   f = base[, c(\"Origin\", \"Destination\")]) base[, c(\"ln_dist_dm\", \"ln_euros_dm\")] = X_demean  est = feols(ln_euros_dm ~ ln_dist_dm, base) est_fe = feols(ln_euros ~ ln_dist | Origin + Destination, base)  # The results are the same as if we used the two factors # as fixed-effects etable(est, est_fe, se = \"st\") #>                                est             est_fe #> Dependent Var.:        ln_euros_dm           ln_euros #>                                                       #> Constant        -6.89e-14 (0.0116)                    #> ln_dist_dm      -2.072*** (0.0271)                    #> ln_dist                            -2.072*** (0.0271) #> Fixed-Effects:  ------------------ ------------------ #> Origin                          No                Yes #> Destination                     No                Yes #> _______________ __________________ __________________ #> S.E. type                      IID                IID #> Observations                38,325             38,325 #> R2                         0.13218            0.50428 #> Within R2                       --            0.13218 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Variables with varying slopes #  # You can center on factors but also on variables with varying slopes  # Let's have an illustration base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # # We center y and x1 on species and x2 * species  # using a formula base_dm = demean(y + x1 ~ species[x2], data = base)  # using vectors base_dm_bis = demean(X = base[, c(\"y\", \"x1\")], f = base$species,                      slope.vars = base$x2, slope.flag = 1)  # Let's look at the equivalences res_vs_1 = feols(y ~ x1 + species + x2:species, base) res_vs_2 = feols(y ~ x1, base_dm) res_vs_3 = feols(y ~ x1, base_dm_bis)  # only the small sample adj. differ in the SEs etable(res_vs_1, res_vs_2, res_vs_3, keep = \"x1\") #>                           res_vs_1           res_vs_2           res_vs_3 #> Dependent Var.:                  y                  y                  y #>                                                                          #> x1              0.4500*** (0.0806) 0.4500*** (0.0792) 0.4500*** (0.0792) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   150                150                150 #> R2                         0.86900            0.17894            0.17894 #> Adj. R2                    0.86351            0.17340            0.17340 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # center on x2 * species and on another FE  base$fe = rep(1:5, 10)  # using a formula => double square brackets! base_dm = demean(y + x1 ~ fe + species[[x2]], data = base)  # using vectors => note slope.flag! base_dm_bis = demean(X = base[, c(\"y\", \"x1\")], f = base[, c(\"fe\", \"species\")],                      slope.vars = base$x2, slope.flag = c(0, -1))  # Explanations slope.flag = c(0, -1): # - the first 0: the first factor (fe) is associated to no variable # - the \"-1\": #    * |-1| = 1: the second factor (species) is associated to ONE variable #    *   -1 < 0: the second factor should not be included as such  # Let's look at the equivalences res_vs_1 = feols(y ~ x1 + i(fe) + x2:species, base) res_vs_2 = feols(y ~ x1, base_dm) res_vs_3 = feols(y ~ x1, base_dm_bis)  # only the small sample adj. differ in the SEs etable(res_vs_1, res_vs_2, res_vs_3, keep = \"x1\") #>                           res_vs_1           res_vs_2           res_vs_3 #> Dependent Var.:                  y                  y                  y #>                                                                          #> x1              0.4915*** (0.0839) 0.4915*** (0.0819) 0.4915*** (0.0819) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   150                150                150 #> R2                         0.85514            0.19580            0.19580 #> Adj. R2                    0.84693            0.19037            0.19037 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/deviance.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the deviance of a fixest estimation — deviance.fixest","title":"Extracts the deviance of a fixest estimation — deviance.fixest","text":"Returns deviance fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/deviance.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the deviance of a fixest estimation — deviance.fixest","text":"","code":"# S3 method for fixest deviance(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/deviance.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the deviance of a fixest estimation — deviance.fixest","text":"object fixest object. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/deviance.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the deviance of a fixest estimation — deviance.fixest","text":"Returns numeric scalar equal deviance.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/deviance.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the deviance of a fixest estimation — deviance.fixest","text":"","code":"est = feols(Petal.Length ~ Petal.Width, iris) deviance(est) #> [1] 33.84475  est_pois = fepois(Petal.Length ~ Petal.Width, iris) deviance(est_pois) #> [1] 19.18111"},{"path":"https://lrberge.github.io/fixest/reference/did_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Treated and control sample descriptives — did_means","title":"Treated and control sample descriptives — did_means","text":"function shows means standard-deviations several variables conditional whether treated control group. groups can split according pre/post variable. Results can seamlessly exported Latex.","code":""},{"path":"https://lrberge.github.io/fixest/reference/did_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treated and control sample descriptives — did_means","text":"","code":"did_means(   fml,   base,   treat_var,   post_var,   tex = FALSE,   treat_dict,   dict = getFixest_dict(),   file,   replace = FALSE,   title,   label,   raw = FALSE,   indiv,   treat_first,   prepostnames = c(\"Before\", \"After\"),   diff.inv = FALSE )"},{"path":"https://lrberge.github.io/fixest/reference/did_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treated and control sample descriptives — did_means","text":"fml Either formula type var1 + ... + varN ~ treat var1 + ... + varN ~ treat | post. Either data.frame/matrix containing variables means computed (must numeric course). treatment post variables must contain exactly two values. can use point select variables data set: . ~ treat. base data base containing variables formula fml. treat_var argument fml formula. vector identifying treated control observations (vector can type must contain two possible values). Must length data. post_var argument fml formula. vector identifying periods (pre/post) observations (vector can type must contain two possible values). first value (sorted sense) vector taken pre period. Must length data. tex result displayed Latex? Default FALSE. Automatically set TRUE table saved file using argument file. treat_dict character vector length two. names treated control? dictionary: e.g. c(\"1\"=\"Treated\", \"0\" = \"Control\"). dict named character vector. dictionary variables names alias. instance dict=c(\"x\"=\"Inflation Rate\") replace variable name x “Inflation Rate”. file file path. given, table written Latex file. replace Default TRUE, means table exported, existing file erased. title Character string giving Latex title table. (exported.) label Character string giving Latex label table. (exported.) raw Logical, default FALSE. TRUE, returns information without formatting. indiv Either variable name individual identifiers, one sided formula, vector. data panel, can used track number individuals per group. treat_first value 'treatment' vector appear left? default max value appears first (e.g. treatment variable 0/1 vector, 1 appears first). prepostnames 'post' variable. names pre post periods displayed Latex. Default c(\"\", \"\"). diff.inv Logical, default FALSE. Whether inverse difference.","code":""},{"path":"https://lrberge.github.io/fixest/reference/did_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treated and control sample descriptives — did_means","text":"returns data.frame Latex table conditional means statistical differences groups.","code":""},{"path":"https://lrberge.github.io/fixest/reference/did_means.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Treated and control sample descriptives — did_means","text":"default, user tries apply function nun-numeric variables, error raised. exception variables selected dot (like . ~ treat. case, non-numeric variables automatically omitted (message). NAs removed automatically: data contains NAs information message prompted. First observations containing NAs relating treatment post variables removed. still NAs variables, excluded separately variable, new message detailing NA breakup prompted.","code":""},{"path":"https://lrberge.github.io/fixest/reference/did_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treated and control sample descriptives — did_means","text":"","code":"# Playing around with the DiD data data(base_did)  # means of treat/control did_means(y+x1+period~treat, base_did) #>           vars    cond: 1      cond: 0 Difference t-stat #> 1            y    3.3 (6)     0.68 (5)       2.64   7.83 #> 2           x1 0.13 (3.1) -0.066 (2.8)      0.199    1.1 #> 3       period  5.5 (2.9)    5.5 (2.9)          0      0 #> 4 Observations        550          530                    # same but inverting the difference did_means(y+x1+period~treat, base_did, diff.inv = TRUE) #>           vars    cond: 1      cond: 0 Difference t-stat #> 1            y    3.3 (6)     0.68 (5)      -2.64  -7.83 #> 2           x1 0.13 (3.1) -0.066 (2.8)     -0.199   -1.1 #> 3       period  5.5 (2.9)    5.5 (2.9)          0      0 #> 4 Observations        550          530                    # now treat/control, before/after did_means(y+x1+period~treat|post, base_did) #>           vars    cond: 1     cond: 0 Difference t-stat     cond: 1     cond: 0 #> 1            y 0.47 (5.1)    0.32 (5)      0.142  0.326   6.2 (5.5)       1 (5) #> 2           x1 0.17 (3.1) 0.046 (2.9)      0.125  0.487 0.095 (3.1) -0.18 (2.8) #> 3       period    3 (1.4)     3 (1.4)          0      0     8 (1.4)     8 (1.4) #> 4 Observations        275         265                           275         265 #>   Difference t-stat #> 1       5.14   11.4 #> 2      0.272   1.07 #> 3          0      0 #> 4                    # same but with a new line giving the number of unique \"indiv\" for each case did_means(y+x1+period~treat|post, base_did, indiv = \"id\") #>            vars    cond: 1     cond: 0 Difference t-stat     cond: 1 #> 1             y 0.47 (5.1)    0.32 (5)      0.142  0.326   6.2 (5.5) #> 2            x1 0.17 (3.1) 0.046 (2.9)      0.125  0.487 0.095 (3.1) #> 3        period    3 (1.4)     3 (1.4)          0      0     8 (1.4) #> 4  Observations        275         265                           275 #> 5 # Individuals         55          53                            55 #>       cond: 0 Difference t-stat #> 1       1 (5)       5.14   11.4 #> 2 -0.18 (2.8)      0.272   1.07 #> 3     8 (1.4)          0      0 #> 4         265                   #> 5          53                    # same but with the treat case \"0\" coming first did_means(y+x1+period~treat|post, base_did, indiv = ~id, treat_first = 0) #>            vars     cond: 0    cond: 1 Difference t-stat     cond: 0 #> 1             y    0.32 (5) 0.47 (5.1)     -0.142 -0.326       1 (5) #> 2            x1 0.046 (2.9) 0.17 (3.1)     -0.125 -0.487 -0.18 (2.8) #> 3        period     3 (1.4)    3 (1.4)          0      0     8 (1.4) #> 4  Observations         265        275                           265 #> 5 # Individuals          53         55                            53 #>       cond: 1 Difference t-stat #> 1   6.2 (5.5)      -5.14  -11.4 #> 2 0.095 (3.1)     -0.272  -1.07 #> 3     8 (1.4)          0      0 #> 4         275                   #> 5          55                    # Selecting all the variables with \".\" did_means(.~treat|post, base_did, indiv = \"id\") #>            vars    cond: 1     cond: 0 Difference t-stat     cond: 1 #> 1             y 0.47 (5.1)    0.32 (5)      0.142  0.326   6.2 (5.5) #> 2            x1 0.17 (3.1) 0.046 (2.9)      0.125  0.487 0.095 (3.1) #> 3        period    3 (1.4)     3 (1.4)          0      0     8 (1.4) #> 4  Observations        275         265                           275 #> 5 # Individuals         55          53                            55 #>       cond: 0 Difference t-stat #> 1       1 (5)       5.14   11.4 #> 2 -0.18 (2.8)      0.272   1.07 #> 3     8 (1.4)          0      0 #> 4         265                   #> 5          53"},{"path":"https://lrberge.github.io/fixest/reference/dsb.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple and powerful string manipulation with the dot square bracket operator — dsb","title":"Simple and powerful string manipulation with the dot square bracket operator — dsb","text":"Compactly performs many low level string operations. Advanced support pluralization.","code":""},{"path":"https://lrberge.github.io/fixest/reference/dsb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple and powerful string manipulation with the dot square bracket operator — dsb","text":"","code":"dsb(   ...,   frame = parent.frame(),   sep = \"\",   vectorize = FALSE,   nest = TRUE,   collapse = NULL )"},{"path":"https://lrberge.github.io/fixest/reference/dsb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple and powerful string manipulation with the dot square bracket operator — dsb","text":"... Character scalars collapsed argument sep. can use \".[x]\" within character string insert value x string. can add string operations \".[]\" instance syntax \"'arg'op ? x\" (resp. \"'arg'op ! x\") apply operation 'op' argument 'arg' x (resp. verbatim x). Otherwise, say? Ah, nesting enabled, since 30 operators, bit complicated sort small space. type dsb(\"--help\") prompt (almost) extensive help. frame environment used evaluate variables \".[]\". sep Character scalar, default \"\". used collapse elements .... vectorize Logical, default FALSE. TRUE, , elements ... collapsed together, instead vectorised. nest Logical, default TRUE. Whether original character strings nested \".[]\". TRUE, things like dsb(\"S!one, two\") equivalent dsb(\".[S!one, two]\") hence create vector c(\"one\", \"two\"). collapse Character scalar NULL (default). provided, resulting character vector collapsed character scalar using value separator. 30 basic string operations, supports pluralization, fast (e.g. faster glue benchmarks), string operations can nested (may powerful feature), operators sensible defaults. See detailed help console dsb(\"--help\"). real help fact \"Examples\" section.","code":""},{"path":"https://lrberge.github.io/fixest/reference/dsb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple and powerful string manipulation with the dot square bracket operator — dsb","text":"returns character vector whose length depends elements operations \".[]\".","code":""},{"path":"https://lrberge.github.io/fixest/reference/dsb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple and powerful string manipulation with the dot square bracket operator — dsb","text":"","code":"# # BASIC USAGE #### #  x = c(\"Romeo\", \"Juliet\")  # .[x] inserts x dsb(\"Hello .[x]!\") #> Hello Romeo! #> Hello Juliet!  # elements in ... are collapsed with \"\" (default) dsb(\"Hello .[x[1]], \",     \"how is .[x[2]] doing?\") #> Hello Romeo, how is Juliet doing?  # Splitting a comma separated string # The mechanism is explained later dsb(\"/J. Mills, David, Agnes, Dr Strong\") #> J. Mills #> David #> Agnes #> Dr Strong  # Nota: this is equivalent to (explained later) dsb(\"', *'S !J. Mills, David, Agnes, Dr Strong\") #> J. Mills #> David #> Agnes #> Dr Strong  # # Applying low level operations to strings #  # Two main syntax:  # A) expression evaluation # .[operation ? x] #             | | #             |  \\-> the expression to be evaluated #              \\-> ? means that the expression will be evaluated  # B) verbatim # .[operation ! x] #             | | #             |  \\-> the expression taken as verbatim (here ' x') #              \\-> ! means that the expression is taken as verbatim  # operation: usually 'arg'op with op an operation code.  # Example: splitting x = \"hello dear\" dsb(\".[' 's ? x]\") #> hello #> dear # x is split by ' '  dsb(\".[' 's !hello dear]\") #> hello #> dear # 'hello dear' is split by ' ' # had we used ?, there would have been an error  # By default, the string is nested in .[], so in that case no need to use .[]: dsb(\"' 's ? x\") #> hello #> dear dsb(\"' 's !hello dear\") #> hello #> dear  # There are 35 string operators # Operators usually have a default value # Operations can be chained by separating them with a comma  # Example: default of 's' is ' ' + chaining with collapse dsb(\"s, ' my 'c!hello dear\") #> hello my dear  # # Nesting #  # .[operations ! s1.[expr]s2] #              |    | #              |     \\-> expr will be evaluated then added to the string #               \\-> nesting requires verbatim evaluation: '!'  dsb(\"The variables are: .[C!x.[1:4]].\") #> The variables are: x1, x2, x3 and x4.  # This one is a bit ugly but it shows triple nesting dsb(\"The variables are: .[w, C!.[2* ! x.[1:4]].[S, 4** ! , _sq]].\") #> The variables are: x1, x2, x3, x4, x1_sq, x2_sq, x3_sq and x4_sq.  # # Splitting #  # s: split with fixed pattern, default is ' ' dsb(\"s !a b c\") #> a #> b #> c dsb(\"' b 's !a b c\") #> a #> c  # S: split with regex pattern, default is ', *' dsb(\"S !a, b, c\") #> a #> b #> c dsb(\"'[[:punct:] ]'S !a! b; c\") #> a #> b #> c  # # Collapsing #  # c and C do the same, their default is different # syntax: 's1||s2' with # - s1 the string used for collapsing # - s2 (optional) the string used for the last collapse  # c: default is ' ' dsb(\"c?1:3\") #> 1 2 3  # C: default is ', || and ' dsb(\"C?1:3\") #> 1, 2 and 3  dsb(\"', || or 'c?1:4\") #> 1, 2, 3 or 4  # # Extraction #  # x: extracts the first pattern # X: extracts all patterns # syntax: 'pattern'x # Default is '[[:alnum:]]+'  x = \"This years is... 2020\" dsb(\"x ? x\") #> This dsb(\"X ? x\") #> This #> years #> is #> 2020  dsb(\"'\\\\d+'x ? x\") #> 2020  # # STRING FORMATTING #### #  # # u, U: uppercase first/all letters  # first letter dsb(\"u!julia mills\") #> Julia mills  # title case: split -> upper first letter -> collapse dsb(\"s, u, c!julia mills\") #> Julia Mills  # upper all letters dsb(\"U!julia mills\") #> JULIA MILLS  # # L: lowercase  dsb(\"L!JULIA MILLS\") #> julia mills  # # q, Q: single or double quote  dsb(\"S, q, C!Julia, David, Wilkins\") #> 'Julia', 'David' and 'Wilkins' dsb(\"S, Q, C!Julia, David, Wilkins\") #> \"Julia\", \"David\" and \"Wilkins\"  # # f, F: formats the string to fit the same length   score = c(-10, 2050) nm = c(\"Wilkins\", \"David\") dsb(\"Monopoly scores:\\n.['\\n'c ! - .[f ? nm]: .[F ? score] US$]\") #> Monopoly scores: #>  - Wilkins:  -10 US$ #>  - David  : 2050 US$  # OK that example may have been a bit too complex, # let's make it simple:  dsb(\"Scores: .[f ? score]\") #> Scores: -10  #> Scores: 2050 dsb(\"Names: .[F ? nm]\") #> Names: Wilkins #> Names:   David  # # w, W: reformat the white spaces # w: suppresses trimming white spaces + normalizes successive white spaces # W: same but also includes punctuation  dsb(\"w ! The   white  spaces are now clean.  \") #> The white spaces are now clean.  dsb(\"W ! I, really -- truly; love punctuation!!!\") #> I really truly love punctuation   # # %: applies sprintf formatting  dsb(\"pi = .['.2f'% ? pi]\") #> pi = 3.14  # # a: appends text on each item # syntax: 's1|s2'a, adds s1 at the beginning and s2 at the end of the string # It accepts the special values :1:, :i:, :I:, :a:, :A: # These values create enumerations (only one such value is accepted)  # appending square brackets dsb(\"'[|]'a, ' + 'c!x.[1:4]\") #> [x1] + [x2] + [x3] + [x4]  # Enumerations acad = dsb(\"/you like admin, you enjoy working on weekends, you really love emails\") dsb(\"Main reasons to pursue an academic career:\\n .[':i:) 'a, C ? acad].\") #> Main reasons to pursue an academic career: #>  i) you like admin, ii) you enjoy working on weekends and iii) you really love emails.  # # A: same as 'a' but adds at the begging/end of the full string (not on the elements) # special values: :n:, :N:, give the number of elements  characters = dsb(\"/David, Wilkins, Dora, Agnes\") dsb(\"There are .[':N: characters: 'A, C ? characters].\") #> There are four characters: David, Wilkins, Dora and Agnes.   # # stop: removes basic English stopwords # the list is from the Snowball project: http://snowball.tartarus.org/algorithms/english/stop.txt  dsb(\"stop, w!It is a tale told by an idiot, full of sound and fury, signifying nothing.\") #> tale told idiot, full sound fury, signifying nothing.  # # k: keeps the first n characters # syntax: nk: keeps the first n characters #         'n|s'k: same + adds 's' at the end of shortened strings #         'n||s'k: same but 's' counts in the n characters kept  words = dsb(\"/short, constitutional\") dsb(\"5k ? words\") #> short #> const  dsb(\"'5|..'k ? words\") #> short #> const..  dsb(\"'5||..'k ? words\") #> short #> con..  # # K: keeps the first n elements # syntax: nK: keeps the first n elements #         'n|s'K: same + adds the element 's' at the end #         'n||s'K: same but 's' counts in the n elements kept # # Special values :rest: and :REST:, give the number of items dropped  bx = dsb(\"/Pessac Leognan, Saint Emilion, Marguaux, Saint Julien, Pauillac\") dsb(\"Bordeaux wines I like: .[3K, ', 'C ? bx].\") #> Bordeaux wines I like: Pessac Leognan, Saint Emilion, Marguaux.  dsb(\"Bordeaux wines I like: .['3|etc..'K, ', 'C ? bx].\") #> Bordeaux wines I like: Pessac Leognan, Saint Emilion, Marguaux, etc...  dsb(\"Bordeaux wines I like: .['3||etc..'K, ', 'C ? bx].\") #> Bordeaux wines I like: Pessac Leognan, Saint Emilion, etc...  dsb(\"Bordeaux wines I like: .['3|and at least :REST: others'K, ', 'C ? bx].\") #> Bordeaux wines I like: Pessac Leognan, Saint Emilion, Marguaux, and at least two others.  # # Ko, KO: special operator which keeps the first n elements and adds \"others\" # syntax: nKo # KO gives the rest in letters  dsb(\"Bordeaux wines I like: .[4KO, C ? bx].\") #> Bordeaux wines I like: Pessac Leognan, Saint Emilion, Marguaux and two others.  # # r, R: string replacement # syntax: 's'R: deletes the content in 's' (replaces with the empty string) #         's1 => s2'R replaces s1 into s2 # r: fixed / R: perl = TRUE  dsb(\"'e'r !The letter e is deleted\") #> Th lttr  is dltd  # adding a perl look-behind dsb(\"'(?<! )e'R !The letter e is deleted\") #> Th lttr e is dltd  dsb(\"'e => a'r !The letter e becomes a\") #> Tha lattar a bacomas a  dsb(\"'([[:alpha:]]{3})[[:alpha:]]+ => \\\\1.'R !Trimming the words\") #> Tri. the wor.  # # *, *c, **, **c: replication, replication + collapse # syntax: n* or n*c # ** is the same as * but uses \"each\" in the replication  dsb(\"N.[10*c!o]!\") #> Noooooooooo!  dsb(\"3*c ? 1:3\") #> 123123123 dsb(\"3**c ? 1:3\") #> 111222333  # # d: replaces the items by the empty string # -> useful in conditions  dsb(\"d!I am going to be annihilated\") #>   # # ELEMENT MANIPULATION #### #  # # D: deletes all elements # -> useful in conditions  x = dsb(\"/I'll, be, deleted\") dsb(\"D ? x\") #>   # # i, I: inserts an item # syntax: 's1|s2'i: inserts s1 first and s2 last # I: is the same as i but is 'invisibly' included  characters = dsb(\"/David, Wilkins, Dora, Agnes, Trotwood\") dsb(\"'Heep|Spenlow'i, C ? characters\") #> Heep, David, Wilkins, Dora, Agnes, Trotwood and Spenlow  dsb(\"'Heep|Spenlow'I, C ? characters\") #> Heep #> David, Wilkins, Dora, Agnes and Trotwood #> Spenlow   # # PLURALIZATION #### #  # There is support for pluralization  # # *s, *s_: adds 's' or 's ' depending on the number of elements  nb = 1:5 dsb(\"Number.[*s, D ? nb]: .[C ? nb]\") #> Numbers: 1, 2, 3, 4 and 5 dsb(\"Number.[*s, D ? 2 ]: .[C ? 2 ]\") #> Number: 2  # or dsb(\"Number.[*s, ': 'A, C ? nb]\") #> Numbers: 1, 2, 3, 4 and 5   # # v, V: adds a verb at the beginning/end of the string # syntax: 'verb'v  # Unpopular opinion? brand = c(\"Apple\", \"Samsung\") dsb(\".[V, C ? brand] overrated.\") #> Apple and Samsung are overrated. dsb(\".[V, C ? brand[1]] overrated.\") #> Apple is overrated.  win = dsb(\"/Peggoty, Agnes, Emily\") dsb(\"The winner.[*s_, v, C ? win].\") #> The winners are Peggoty, Agnes and Emily. dsb(\"The winner.[*s_, v, C ? win[1]].\") #> The winner is Peggoty.  # Other verbs dsb(\".[' have'V, C ? win] won a prize.\") #> Peggoty, Agnes and Emily have won a prize. dsb(\".[' have'V, C ? win[1]] won a prize.\") #> Peggoty has won a prize.  dsb(\".[' was'V, C ? win] unable to come.\") #> Peggoty, Agnes and Emily were unable to come. dsb(\".[' was'V, C ? win[1]] unable to come.\") #> Peggoty was unable to come.  # # *A: appends text depending on the length of the vector # syntax: 's1|s2 / s3|s4' #         if length == 1: applies 's1|s2'A #         if length >  1: applies 's3|s4'A  win = dsb(\"/Barkis, Micawber, Murdstone\") dsb(\"The winner.[' is /s are '*A, C ? win].\") #> The winners are Barkis, Micawber and Murdstone. dsb(\"The winner.[' is /s are '*A, C ? win[1]].\") #> The winner is Barkis.  # # CONDITIONS #### #  # Conditions can be applied with 'if' statements.\", # The syntax is 'type comp value'if(true : false), with # - type: either 'len', 'char', 'fixed' or 'regex' #   + len: number of elements in the vector #   + char: number of characters #   + fixed: fixed pattern #   + regex: regular expression pattern # - comp: a comparator: #   + valid for len/char: >, <, >=, <=, !=, == #   + valid for fixed/regex: !=, == # - value: a value for which the comparison is applied. # - true: operations to be applied if true (can be void) # - false: operations to be applied if false (can be void)  dsb(\"'char <= 2'if('(|)'a : '[|]'a), ' + 'c ? c(1, 12, 123)\") #> (1) + (12) + [123]  sentence = \"This is a sentence with some longish words.\" dsb(\"s, 'char<=4'if(D), c ? sentence\") #> sentence longish words.  dsb(\"s, 'fixed == e'if(:D), c ! Only words with an e are selected.\") #> e are selected.  # # ARGUMENTS FROM THE FRAME #### #  # Arguments can be evaluated from the calling frame. # Simply use backticks instead of quotes.  dollar = 6 reason = \"glory\" dsb(\"Why do you develop packages? For .[`dollar`*c!$]?\",     \"For money? No... for .[U,''s, c?reason]!\", sep = \"\\n\") #> Why do you develop packages? For $$$$$$? #> For money? No... for G L O R Y!"},{"path":"https://lrberge.github.io/fixest/reference/estfun.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the scores from a fixest estimation — estfun.fixest","title":"Extracts the scores from a fixest estimation — estfun.fixest","text":"Extracts scores fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/estfun.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the scores from a fixest estimation — estfun.fixest","text":"","code":"# S3 method for fixest estfun(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/estfun.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the scores from a fixest estimation — estfun.fixest","text":"x fixest object, obtained instance feols. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/estfun.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the scores from a fixest estimation — estfun.fixest","text":"Returns matrix number rows number observations used estimation, number columns variables.","code":""},{"path":"https://lrberge.github.io/fixest/reference/estfun.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the scores from a fixest estimation — estfun.fixest","text":"","code":"data(iris) est = feols(Petal.Length ~ Petal.Width + Sepal.Width, iris) head(estfun(est)) #>      (Intercept)  Petal.Width Sepal.Width #> [1,] -0.04666458 -0.009332917 -0.16332605 #> [2,] -0.22418187 -0.044836375 -0.67254562 #> [3,] -0.25317496 -0.050634992 -0.81015987 #> [4,] -0.08867842 -0.017735683 -0.27490309 #> [5,] -0.01116113 -0.002232225 -0.04018005 #> [6,] -0.03577286 -0.014309142 -0.13951414"},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates a fixest estimation from a fixest environment — est_env","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"function advanced users allows estimate fixest estimation fixest environment obtained .env = TRUE fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"","code":"est_env(env, y, X, weights, endo, inst)"},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"env environment obtained fixest estimation .env = TRUE. intended advanced users error handling: kind input fail poor error message. y vector representing dependent variable. length number observations initial estimation. X matrix representing independent variables. dimension initial estimation. weights vector weights (.e. positive values). length number observations initial estimation. identical scalar 1, mean weights used estimation. endo matrix representing endogenous regressors IV estimations. dimension original endogenous regressors. inst matrix representing instruments IV estimations. dimension original instruments.","code":""},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"returns results fixest estimation: one summoned obtaining environment.","code":""},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"function created advanced users, mostly avoid overheads making simulations fixest. can help make simulations? First make core estimation .env = TRUE, usually .coef = TRUE (avoid extra things take time compute). loop modifying appropriate things directly environment. Beware make mistake (typically giving stuff wrong length), can make R session crash error-handling! Finally estimate est_env(env = core_env) store results. Instead est_env, use directly fixest estimations , like feols, since accept env argument. function est_env add bit generality avoid trouble user write conditions (look source, just one liner). Objects main interest environment : lhsThe left hand side, dependent variable. linear.matThe matrix right-hand-side, explanatory variables. iv_lhsThe matrix endogenous variables IV regressions. iv.matThe matrix instruments IV regressions. weights.valueThe vector weights. strongly discourage changing dimension elements, else crash can occur. However, can change values (given dimension stay ). exception weights, tolerates changing dimension: can identical scalar 1 (meaning weights), something length number observations. also discourage changing anything fixed-effects (even value) since almost surely lead crash. Note function mostly useful overheads/estimation ratio high. means OLS benefit function. GLM/Max.Lik. estimations, ratio small since overheads tiny portion total estimation time. Hence function less useful models.","code":""},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/est_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates a fixest estimation from a fixest environment — est_env","text":"","code":"# Let's make a short simulation # Inspired from Grant McDermott bboot function # See https://twitter.com/grant_mcdermott/status/1487528757418102787  # Simple function that computes a Bayesian bootstrap bboot = function(x, n_sim = 100){   # We bootstrap on the weights   # Works with fixed-effects/IVs   #  and with any fixest function that accepts weights    core_env = update(x, only.coef = TRUE, only.env = TRUE)   n_obs = x$nobs    res_all = vector(\"list\", n_sim)   for(i in 1:n_sim){     # # begin: NOT RUN     # # We could directly assign in the environment:     # assign(\"weights.value\", rexp(n_obs, rate = 1), core_env)     # res_all[[i]] = est_env(env = core_env)     #   end: NOT RUN      # Instead we can use the argument weights, which does the same     res_all[[i]] = est_env(env = core_env, weights = rexp(n_obs, rate = 1))   }    do.call(rbind, res_all) }   est = feols(mpg ~ wt + hp, mtcars)  boot_res = bboot(est) coef = colMeans(boot_res) std_err = apply(boot_res, 2, sd)  # Comparing the results with the main estimation coeftable(est) #>                Estimate Std. Error   t value     Pr(>|t|) #> (Intercept) 37.22727012 1.59878754 23.284689 2.565459e-20 #> wt          -3.87783074 0.63273349 -6.128695 1.119647e-06 #> hp          -0.03177295 0.00902971 -3.518712 1.451229e-03 #> attr(,\"type\") #> [1] \"IID\" cbind(coef, std_err) #>                    coef     std_err #> (Intercept) 37.06416839 1.878346352 #> wt          -3.82426295 0.613391938 #> hp          -0.03262888 0.006218552"},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"Aggregates results multiple estimations displays form either Latex table data.frame. Note need booktabs package Latex table render properly.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"","code":"etable(   ...,   vcov = NULL,   stage = 2,   agg = NULL,   se = NULL,   ssc = NULL,   cluster = NULL,   .vcov = NULL,   .vcov_args = NULL,   digits = 4,   digits.stats = 5,   tex,   fitstat = NULL,   title = NULL,   coefstat = \"se\",   ci = 0.95,   se.row = NULL,   se.below = NULL,   keep = NULL,   drop = NULL,   order = NULL,   dict = TRUE,   file = NULL,   replace = FALSE,   convergence = NULL,   signif.code = NULL,   label = NULL,   float = NULL,   headers = list(\"auto\"),   fixef_sizes = FALSE,   fixef_sizes.simplify = TRUE,   keepFactors = TRUE,   family = NULL,   powerBelow = -5,   interaction.combine = NULL,   interaction.order = NULL,   i.equal = NULL,   depvar = TRUE,   style.tex = NULL,   style.df = NULL,   notes = NULL,   group = NULL,   extralines = NULL,   fixef.group = NULL,   placement = \"htbp\",   drop.section = NULL,   poly_dict = c(\"\", \" square\", \" cube\"),   postprocess.tex = NULL,   postprocess.df = NULL,   tpt = FALSE,   arraystretch = NULL,   adjustbox = NULL,   fontsize = NULL,   fit_format = \"__var__\",   coef.just = NULL,   tabular = \"normal\",   highlight = NULL,   coef.style = NULL,   meta = NULL,   meta.time = NULL,   meta.author = NULL,   meta.sys = NULL,   meta.call = NULL,   meta.comment = NULL,   view = FALSE,   export = NULL,   markdown = NULL,   page.width = \"fit\",   div.class = \"etable\" )  setFixest_etable(   digits = 4,   digits.stats = 5,   fitstat,   coefstat = c(\"se\", \"tstat\", \"confint\"),   ci = 0.95,   se.below = TRUE,   keep,   drop,   order,   dict,   float,   fixef_sizes = FALSE,   fixef_sizes.simplify = TRUE,   family,   powerBelow = -5,   interaction.order = NULL,   depvar,   style.tex = NULL,   style.df = NULL,   notes = NULL,   group = NULL,   extralines = NULL,   fixef.group = NULL,   placement = \"htbp\",   drop.section = NULL,   view = FALSE,   markdown = NULL,   view.cache = FALSE,   page.width = \"fit\",   postprocess.tex = NULL,   postprocess.df = NULL,   fit_format = \"__var__\",   meta.time = NULL,   meta.author = NULL,   meta.sys = NULL,   meta.call = NULL,   meta.comment = NULL,   reset = FALSE,   save = FALSE )  getFixest_etable()  # S3 method for etable_tex print(x, ...)  # S3 method for etable_df print(x, ...)  log_etable(type = \"pdflatex\")  esttable(   ...,   vcov = NULL,   stage = 2,   agg = NULL,   se = NULL,   ssc = NULL,   cluster = NULL,   .vcov = NULL,   .vcov_args = NULL,   digits = 4,   digits.stats = 5,   fitstat = NULL,   coefstat = \"se\",   ci = 0.95,   se.row = NULL,   se.below = NULL,   keep = NULL,   drop = NULL,   order = NULL,   dict = TRUE,   file = NULL,   replace = FALSE,   convergence = NULL,   signif.code = NULL,   headers = list(\"auto\"),   fixef_sizes = FALSE,   fixef_sizes.simplify = TRUE,   keepFactors = TRUE,   family = NULL,   powerBelow = -5,   interaction.combine = NULL,   interaction.order = NULL,   i.equal = NULL,   depvar = TRUE,   style.df = NULL,   group = NULL,   extralines = NULL,   fixef.group = NULL,   drop.section = NULL,   poly_dict = c(\"\", \" square\", \" cube\"),   postprocess.df = NULL,   fit_format = \"__var__\",   coef.just = NULL,   highlight = NULL,   coef.style = NULL,   export = NULL,   page.width = \"fit\",   div.class = \"etable\" )  esttex(   ...,   vcov = NULL,   stage = 2,   agg = NULL,   se = NULL,   ssc = NULL,   cluster = NULL,   .vcov = NULL,   .vcov_args = NULL,   digits = 4,   digits.stats = 5,   fitstat = NULL,   title = NULL,   coefstat = \"se\",   ci = 0.95,   se.row = NULL,   se.below = NULL,   keep = NULL,   drop = NULL,   order = NULL,   dict = TRUE,   file = NULL,   replace = FALSE,   convergence = NULL,   signif.code = NULL,   label = NULL,   float = NULL,   headers = list(\"auto\"),   fixef_sizes = FALSE,   fixef_sizes.simplify = TRUE,   keepFactors = TRUE,   family = NULL,   powerBelow = -5,   interaction.combine = NULL,   interaction.order = NULL,   i.equal = NULL,   depvar = TRUE,   style.tex = NULL,   notes = NULL,   group = NULL,   extralines = NULL,   fixef.group = NULL,   placement = \"htbp\",   drop.section = NULL,   poly_dict = c(\"\", \" square\", \" cube\"),   postprocess.tex = NULL,   tpt = FALSE,   arraystretch = NULL,   adjustbox = NULL,   fontsize = NULL,   fit_format = \"__var__\",   tabular = \"normal\",   highlight = NULL,   coef.style = NULL,   meta = NULL,   meta.time = NULL,   meta.author = NULL,   meta.sys = NULL,   meta.call = NULL,   meta.comment = NULL,   view = FALSE,   export = NULL,   markdown = NULL,   page.width = \"fit\",   div.class = \"etable\" )"},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"... Used capture different fixest estimation objects (obtained femlm, feols feglm). Note type element discarded. Note can give list fixest objects. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. stage Can equal 2 (default), 1, 1:2 2:1. used object IV estimation: defines stage summary applied. stage = 1 multiple endogenous regressors stage length 2, object class fixest_multi returned. agg character scalar describing variable names aggregated, pattern-based. sunab estimations, following keywords work: \"att\", \"period\", \"cohort\" FALSE (full disaggregation). variables match pattern aggregated. must form \"(root)\", parentheses must resulting variable name \"root\". can add another root parentheses: \"(root1)regex(root2)\", case resulting name \"root1::root2\". name resulting variable differently can pass named vector: c(\"name\" = \"pattern\") c(\"name\" = \"pattern(root2)\"). bit intricate sorry, please see examples. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". .vcov function used compute standard-errors fixest object. can pass extra arguments function using argument .vcov_args. See example. .vcov_args list containing arguments passed function .vcov. digits Integer character scalar. Default 4 represents number significant digits displayed coefficients standard-errors. apply rounding instead significance use, e.g., digits = \"r3\" round first 3 decimals. character, must form \"rd\" \"sd\" d digit (r round s significance). number digits fit statistics, use digits.stats. Note significance used exactly display number significant digits: see details exact meaning. digits.stats Integer character scalar. Default 5 represents number significant digits displayed fit statistics. apply rounding instead significance use, e.g., digits = \"r3\" round first 3 decimals. character, must form \"rd\" \"sd\" d digit (r round s significance). Note significance used exactly display number significant digits: see details exact meaning. tex Logical: whether results data.frame Latex table. default, argument TRUE argument file (used exportation) missing; equal FALSE otherwise. fitstat character vector one sided formula (lowercase letters). vector listing fit statistics display. valid types 'n', 'll', 'aic', 'bic' r2 types like 'r2', 'pr2', 'war2', etc (see valid types r2). Also accepts valid types function fitstat. default value depends models display. Example use: fitstat=c('n', 'cor2', 'ar2', 'war2'), fitstat=~n+cor2+ar2+war2 using formula. can use dot refer default values: ~ . + ll add log-likelihood default fit statistics. title (Tex .) Character scalar. title Latex table. coefstat One \"se\" (default), \"tstat\" \"confint\". statistic report coefficient: standard-error, t-statistics confidence interval. can adjust confidence interval argument ci. ci Level confidence interval, defaults 0.95. used coefstat = confint. se.row Logical scalar, default NULL. Whether displayed row type standard-error model. tex = FALSE, default TRUE. tex = FALSE, row showed table-footer types standard-errors differ across models. se.Logical NULL (default). standard-errors displayed coefficients? NULL, TRUE Latex FALSE otherwise. keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. order Character vector. element used user wants variables ordered certain way. vector regular expressions (see base::regex help info). variables satisfying first regular expression placed first, order follows sequence regular expressions. argument applied post aliasing (see argument dict). Example: following variables: month1 month6, x1 x5, year1 year6. want display first x's, years, months use: order = c(\"x\", \"year\"). first character exclamation mark, effect reversed (e.g. order = \"!Intercept\" means: every variable contain “Intercept” goes first).  See details. dict named character vector logical scalar. changes original variable names ones contained dictionary. E.g. change variables named b3 (resp.) “$log()$” “$bonus^3$”, use dict=c(=\"$log()$\",b3=\"$bonus^3$\"). default, equal getFixest_dict(), default dictionary can set setFixest_dict. can use dict = FALSE disable . default dict modifies entries global dictionary, disable behavior, use \"reset\" first element (ex: dict=c(\"reset\", mpg=\"Miles per gallon\")). file character scalar. provided, Latex (data frame) table saved file whose path file. provide argument, Latex table exported, export regular data.frame, use argument tex = FALSE. replace Logical, default FALSE. used option file used. exported table written new file replaces existing file? convergence Logical, default missing. convergence state algorithm displayed? default, convergence information displayed least one model converge. signif.code Named numeric vector, used provide significance codes respect p-value coefficients. Default c(\"***\"=0.01, \"**\"=0.05, \"*\"=0.10) Latex table c(\"***\"=0.001, \"**\"=0.01, \"*\"=0.05, \".\"=0.10) data.frame (conform R's default). suppress significance codes, use signif.code=NA signif.code=NULL. Can also equal \"letters\", default becomes c(\"\"=0.01, \"b\"=0.05, \"c\"=0.10). label (Tex .) Character scalar. label Latex table. float (Tex .) Logical. default, argument title label provided, set TRUE. Otherwise, set FALSE. headers Character vector list. Adds one header lines table. header line can represented character vector named list numbers names cell values numbers span. Example: headers=list(\"M\"=2, \"F\"=3) create row 2 times \"M\" three time \"F\" (identical headers=rep(c(\"M\", \"F\"), c(2, 3))). can stack header lines within list, case list names displayed leftmost cell. Example: headers=list(Gender=list(\"M\"=2, \"F\"=3), Country=\"US\" create two header lines. tex = TRUE, can add rule separate groups using \":_:\" somewhere row name (ex: headers=list(\":_:Gender\"=list(\"M\"=2, \"F\"=3)). can monitor placement inserting special character row name: \"^\" means top, \"-\" means middle (default) \"_\" means bottom. Example: headers=list(\"_Country\"=\"US\") add country row last header row (model row). Finally, can use special value \"auto\" include automatic headers data contains split sample estimations. default equal list(\"auto\"). can use .() instead list(). fixef_sizes (Tex .) Logical, default FALSE. TRUE fixed-effects used models, number \"units\" per fixed-effect dimension also displayed. fixef_sizes.simplify Logical, default TRUE. used fixef_sizes = TRUE. TRUE, fixed-effects sizes displayed parentheses instead separate line ambiguity (.e. size constant across models). keepFactors Logical, default TRUE. FALSE, factor variables displayed fixed-effects coefficient shown. family Logical, default missing. Whether display families models. default line displayed least two models different families. powerBelow (Tex .) Integer, default -5. coefficient whose value 10**(powerBelow+1) written power Latex. example 0.0000456 written 4.56$\\\\times 10^{-5}$ default. Setting powerBelow = -6 lead 0.00004 Latex. interaction.combine Character scalar, defaults \" $\\\\times$ \" Tex \" = \" otherwise. estimation contains interactions, variables names (aliasing) combined argument. example: dict = c(x1=\"Wind\", x2=\"Rain\") following interaction x1:x2, renamed (default) Wind $\\\\times$ Rain -- using interaction.combine = \"*\" lead Wind*Rain. interaction.order Character vector regular expressions. affects variables interacted like x1 x2 feols(y ~ x1*x2, data). can change order interacted variables displayed: e.g. interaction.order = \"x2\" lead \"x1 x x2\" instead \"x1 x x2\". Please look argument 'order' dedicated section help page information. .equal Character scalar, defaults \" $=$ \" tex = TRUE \" = \" otherwise. affects factor variables created function , tells variable linked value. example Species factor iris data set, default display variable Species = Setosa, etc. .equal = \": \" display becomes Species: Setosa. depvar Logical, default TRUE. Whether first line containing dependent variables shown. style.tex object created function style.tex. represents style Latex table, see documentation style.tex. style.df object created function style.df represents style data frame returned (tex = FALSE), see documentation style.df. notes (Tex .) Character vector. provided, \"notes\" section added end right end table, containing text argument. vector, collapsed new lines. tpt = TRUE, behavior different: element vector item. first element vector starts \"@\", included verbatim, case tpt = TRUE, right first item. element provided, replace value defined style.tex(notes.intro) style.tex(notes.tpt.intro). group list. list elements vectors regular expressions. elements list: new line table created, variables matched regular expressions discarded (effect argument drop) TRUE FALSE appear model cell, depending whether previous variables found model. Example: group=list(\"Controls: personal traits\"=c(\"gender\", \"height\", \"weight\")) create new line \"Controls: personal traits\" leftmost cell, three variables gender, height weight discarded, TRUE appearing model containing least one three variables (style TRUE/FALSE governed argument yesNo). can control placement new row using 1 2 special characters start row name. meaning special characters : 1) \"^\": coef., \"-\": fixed-effect, \"_\": stats, section; 2) \"^\": 1st, \"_\": last, row. example: group=list(\"_^Controls\"=stuff) place line top 'stats' section, using group=list(\"^_Controls\"=stuff) make row appear bottom coefficients section. details, see dedicated section. extralines vector, list one sided formula. list elements either vector representing value cell, list form list(\"item1\" = #item1, \"item2\" = #item2, etc), function. argument can many things, please look dedicated help section; simplified description follows. elements list: new line table created, list name row name vector content cells. Example: extralines=list(\"Sub-sample\"=c(\"<20 yo\", \"\", \">50 yo\")) create new line \"Sub-sample\" leftmost cell, vector filling content cells three models. can control placement new row using 1 2 special characters start row name. meaning special characters : 1) \"^\": coef., \"-\": fixed-effect, \"_\": stats, section; 2) \"^\": 1st, \"_\": last, row. example: extralines=list(\"__Controls\"=stuff) place line bottom stats section, using extralines=list(\"^^Controls\"=stuff) make row appear top 'coefficients' section. details, see dedicated section. can use .() instead list(). fixef.group Logical scalar list (default NULL). equal TRUE, fixed-effects always appearing jointly models grouped one row. list, elements must character vectors regular expressions list names row names. ex. fixef.group=list(\"Dates fixed-effects\"=\"Month|Day\") remove \"Month\" \"Day\" fixed effects display replace single row named \"Dates fixed-effects\". can monitor placement new row two special characters telling place row within section: first section appear: \"^\" (coef.), \"-\" (fixed-effects), \"_\" (stat.) section; whether row \"^\" (first), \"_\" (last). two special characters must appear first row names. Please see dedicated section placement (Tex .) Character string giving position float Latex. Default \"htbp\". must consist characters 'h', 't', 'b', 'p', 'H' '!'. Reminder: h: ; t: top; b: bottom; p: float page; H: definitely ; !: prevents Latex look positions. Note can equal empty string (get default placement). drop.section Character vector can length 0 (.e. equal NULL). Can contain values \"coef\", \"fixef\", \"slopes\" \"stats\". drop, respectively, coefficients section, fixed-effects section, variables varying slopes section fit statistics section. poly_dict Character vector, default c(\"\", \" square\", \" cube\"). raw polynomials (x^2, etc) used, variables automatically renamed poly_dict rules display power. powers greater number elements vector, value displayed $^{pow}$ Latex ^ pow R console. postprocess.tex function postprocess character vector defining latex table. tex = TRUE. default equal NULL, meaning postprocessing. tex = FALSE, see argument postprocess.df. See details. postprocess.df function postprocess.tex resulting data.frame. tex = FALSE. default equal NULL, meaning postprocessing. tex = TRUE, see argument postprocess.tex. tpt (Tex .) Logical scalar, default FALSE. Whether use threeparttable environment. , notes integrated tablenotes environment. arraystretch (Tex .) numeric scalar, default NULL. provided, command \\\\renewcommand*{\\\\arraystretch{x}} inserted, replacing x value arraystretch. changes specific current table affect rest document. adjustbox (Tex .) logical, numeric character scalar, default NULL. NULL, table inserted within adjustbox environment. default options width = 1\\\\textwidth, center (TRUE). numeric value changes value \\\\textwidth. can also add character form \"x tw\" \"x th\" x number tw (th) stands text-width (text-height). Finally character value passed verbatim adjustbox option. fontsize (Tex .) character scalar, default NULL. Can equal tiny, scriptsize, footnotesize, small, normalsize, large, Large. change affect table (rest document). fit_format Character scalar, default \"__var__\". used presence IVs. default endogenous regressors named fit_varname second stage. format endogenous regressor appear table governed fit_format. instance, default, prefix \"fit_\" removed, leading varname appear. fit_format = \"$\\\\\\\\hat{__var__$\"}, \"$\\\\hat{varname$\"} appear table. coef.just (DF .) Either \".\", \"(\", \"l\", \"c\" \"r\", default NULL. coefficients justified. NULL right aligned se.= FALSE aligned dot se.= TRUE. keywords stand respectively dot-, parenthesis-, left-, center- right-aligned. tabular (Tex .) Character scalar equal \"normal\" (default), \"*\" \"X\". Represents type tabular environment use: either tabular, tabular* tabularx. highlight List containing coefficients highlight. Highlighting form .(\"options1\" = \"coefs1\", \"options2\" = \"coefs2\", etc). coefficients highlighted can written three forms: 1) row, eg \"x1\" highlight full row variable x1; 2) cells, use '@' coefficient name give column, accepts ranges, eg \"x1@2, 4-6, 8\" highlight columns 2, 4, 5, 6, 8 variable x1; 3) range, giving top-left bottom-right values separated semi-colon, eg \"x1@2 ; x3@5\" highlight column 2 x1 5th column x3. Coefficient names partially matched, use '%' first refer original name (dictionary) use '@' first use regular expression. can add vector row/cell/range. options comma-separated list items. default highlighting done frame (thick box) around coefficient, use 'rowcol' highlight row color instead. options: 'se' highlight standard-errors ; 'square' square box (instead rounded); 'thick1' 'thick6' monitor width box; 'sep0' 'sep9' monitor inner spacing. Finally remaining option color: simply add R color (must valid R color!). can use \"color!alpha\" \"alpha\" number 0 100 change alpha channel color. coef.style Named list containing styles applied coefficients. must form .(\"style1\" = \"coefs1\", \"style2\" = \"coefs2\", etc). style must contain string \":coef:\" (\":coef_se:\" style coefficient standard-error). string :coef: replaced verbatim coefficient value. example use \"\\\\textbf{:coef:}\" put coefficient bold. Note markdown markup enabled \"**:coef:**\" also put bold. coefficients styled can written three forms: 1) row, eg \"x1\" style full row variable x1; 2) cells, use '@' coefficient name give column, accepts ranges, eg \"x1@2, 4-6, 8\" style columns 2, 4, 5, 6, 8 variable x1; 3) range, giving top-left bottom-right values separated semi-colon, eg \"x1@2 ; x3@5\" style column 2 x1 5th column x3. Coefficient names partially matched, use '%' first refer original name (dictionary) use '@' first use regular expression. can add vector row/cell/range. meta (Tex .) one-sided formula shall contain following elements: date time, sys, author, comment call. Default NULL. argument shortcut controlling meta information can displayed comments table. Typically element formula, means argument equal TRUE. Example: meta = ~time+call equivalent meta.time = TRUE meta.call = TRUE. \"author\" \"comment\" elements bit special. Using meta = ~author(\"Mark\") equivalent meta.author = \"Mark\" meta=~author equiv. meta.author = TRUE. \"comment\" must used character string inside: meta = ~comment(\"comment\"). order formula controls order appearance meta elements. also precedence meta.XX arguments. meta.time (Tex .) Either logical scalar (default FALSE) \"time\" \"date\". Whether include time (TRUE \"time\") date (\"date\") creation table comment right table. meta.author (Tex .) logical scalar (default FALSE) character vector. TRUE identity author (deduced system user Sys.info()) inserted comment right table. character vector, contain author names inserted comments table, prefixed \"Created :\". free-form comments see argument meta.comment. meta.sys (Tex .) logical scalar, default FALSE. Whether include system information (Sys.info()) comment right table. meta.call (Tex .) Logical scalar, default FALSE. TRUE call function inserted right table comment. meta.comment (Tex .) character vector containing free-form comments inserted right table. view Logical, default FALSE. TRUE, table generated Latex etable displayed viewer pane. Note option work need ) pdflatex, ii) imagemagick iii) ghostscript. three software must installed path. export Character scalar giving path PNG file created, default NULL. provided, Latex table converted PNG copied export location. Note option work need working distribution pdflatex, imagemagick ghostscript. markdown Character scalar giving location directory, logical scalar. Default NULL. argument works Rmarkdown documents, knitting document. provided: two behaviors depending context. ) output document Latex, table exported Latex. B) output document Latex, table exported PNG desired location inserted document via markdown link. equal TRUE, default location PNGs temporary folder R > 4.0.0, \"images/etable/\" earlier versions. page.width Character scalar equal 'fit' (default), 'a4' 'us'; single Latex measure (like '17cm') double one (like \"21, 2cm\"). used Latex table viewed (view = TRUE), exported (export != NULL) displayed Rmarkdown (markdown != NULL). represents text width page Latex table inserted. default, 'fit', page fits exactly table (.e. text width = table width). 'a4' 'us', two times 2cm removed page width account margins. Providing page width margin width, like \"17in, 1in\", enables correct display argument adjustbox. Note margin width represent width single side margin (hence doubled). div.class Character scalar, default \"etable\". used Rmarkdown documents markdown = TRUE. table image format embedded <div> container, container class div.class. view.cache Logical, default FALSE. used view = TRUE. Whether PNGs tables cached. reset (setFixest_etable .) Logical, default FALSE. TRUE, reset default values already set user previous calls. save Either logical equal \"reset\". Default FALSE. TRUE value set permanently project level, means restart R, still obtain previously saved defaults. done writing \".Renviron\" file, located project's working directory, hence must write permission work, works Rstudio. equal \"reset\", default project level erased. Since writing file involved, permission asked user. x object returned etable. type Character scalar equal 'pdflatex' (default), 'magick', 'dir' 'tex'. log file report; 'tex', full source code tex file returned, 'dir': directory log files returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"tex = TRUE, lines composing Latex table returned invisibly table directly prompted console. tex = FALSE, data.frame directly returned. argument file missing, data.frame printed returned invisibly.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"function esttex equivalent function etable argument tex = TRUE. function esttable equivalent function etable argument tex = FALSE. display table, need Latex package booktabs contains \\\\toprule, \\\\midrule \\\\bottomrule commands. can permanently change way table looks Latex using setFixest_etable. following vignette gives example well illustrates use style postprocessing functions: Exporting estimation tables. argument postprocessing.tex missing, two additional tags included character vector returned etable: \"%start:tab\\\\n\" \"%end:tab\\\\n\". can used identify start end tabular useful insert code within table environment.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"esttable(): Exports results multiple fixest estimations Latex table. esttex(): Exports results multiple fixest estimations Latex table.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"how-does-digits-handle-the-number-of-decimals-displayed-","dir":"Reference","previous_headings":"","what":"How does digits handle the number of decimals displayed?","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"default display decimals outcome algorithm. take example digits = 3 \"kind \" requires 3 significant digits displayed. numbers greater 1 (absolute terms), integral part always displayed number decimals shown equal digits minus number digits integral part. means 12.345 displayed 12.3. number decimals 0, single decimal displayed suggest number whole. means 1234.56 displayed 1234.5. Note number whole, decimals shown. numbers lower 1 (absolute terms), number decimals displayed equal digits except 0s case first significant digit shown. means 0.01234 displayed 0.012 (first rule), 0.000123 displayed 0.0001 (second rule).","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"arguments-keep-drop-and-order","dir":"Reference","previous_headings":"","what":"Arguments keep, drop and order","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"arguments keep, drop order use regular expressions. aware regular expressions, urge learn , since extremely powerful way manipulate character strings (exists across programming languages). example drop = \"Wind\" drop variable whose name contains \"Wind\". Note variables \"Temp:Wind\" \"StrongWind\" contain \"Wind\", dropped. drop variable named \"Wind\", need use drop = \"^Wind$\" (\"^\" meaning beginning, resp. \"$\" meaning end, string => language regular expressions). Although can combine several regular expressions single character string using pipes, drop also accepts vector regular expressions. can use special character \"!\" (exclamation mark) reverse effect regular expression (feature specific function). example drop = \"!Wind\" drop variable contain \"Wind\". can use special character \"%\" (percentage) make reference original variable name instead aliased name. example, variable named \"Month6\", use dictionary dict = c(Month6=\"June\"). Thus variable displayed \"June\". want delete variable, can use either drop=\"June\", drop=\"%Month6\" (makes reference original name). argument order takes vector regular expressions, order follow elements vector. vector gives list priorities, left elements highest priority. example, order = c(\"Wind\", \"!Inter\", \"!Temp\") give highest priorities variables containing \"Wind\" (appear first), second highest priority variables containing \"Inter\", last, lowest priority, variables containing \"Temp\". following variables: (Intercept), Temp:Wind, Wind, Temp end following order: Wind, Temp:Wind, Temp, (Intercept).","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"the-argument-extralines","dir":"Reference","previous_headings":"","what":"The argument extralines","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"argument extralines adds well... extra lines table. accepts either list, one-sided formula. line, can define values taken cell using 4 different ways: ) vector, b) list, c) function, d) formula. vector, represent values taken cell. Note length vector smaller number models, values recycled across models, length vector required divisor number models. list, form list(\"item1\" = #item1, \"item2\" = #item2, etc). example list(\"\"=2, \"B\"=3) leads c(\"\", \"\", \"B\", \"B\", \"B\"). Note number items 1, need add = 1. example list(\"\"=2, \"B\") valid leads c(\"\", \"\", \"B\". vector values recycled necessary. function, applied model return scalar (NA values returned accepted). formula, must one-sided elements formula must represent either extralines macros, either fit statistics (.e. valid types function fitstat). One new line added element formula. register extralines macros, must first register extralines_register. Finally, can combine many lines wished nesting list. names nesting list row titles (values leftmost cell). example extralines = list(~r2, Controls = TRUE, Group = list(\"\"=2, \"B\")) add three lines, titles \"R2\", \"Controls\" \"Group\".","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"controlling-the-placement-of-extra-lines","dir":"Reference","previous_headings":"","what":"Controlling the placement of extra lines","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"arguments group, extralines fixef.group allow add customized lines table. can defined via list list name row name. default, placement extra line right coefficients (except fixef.group, covered last paragraph). instance, group = list(\"Controls\" = \"x[[:digit:]]\") create line right coefficients telling models contain control variables. placement can customized. previous example (controls) used illustration (mechanism extralines fixef.group identical). row names accept 2 special characters start. first character tells section line appear: can equal \"^\", \"-\", \"_\", meaning respectively coefficients, fixed-effects statistics section (typically appear top, mid bottom table). second one governs placement new line within section: can equal \"^\", meaning first line, \"_\", meaning last line. examples. Using previous example, writing \"_^Controls\" place new line top statistics section. Writing \"-_Controls\" places last row fixed-effects section; \"^^Controls\" top row coefficients section; etc... second character optional, default placement bottom. means \"_Controls\" place bottom statistics section. placement fixef.group defined similarly, default placement different. default placement top fixed-effects section.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"escaping-special-latex-characters","dir":"Reference","previous_headings":"","what":"Escaping special Latex characters","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"default instances (notable exception elements style.tex) special Latex characters escaped. means title=\"Exports million $.\" exported \"Exports million \\\\$.\": dollar sign escaped. true following characters: &, $, %, _, ^ #. Note, importantly, equations escaped. means title=\"Functional form $a_i \\\\times x^b$, variation %.\" displayed : \"Functional form $a_i \\\\times x^b$, variation \\\\%.\": last percentage escaped. reason want escaping take place, arguments headers extralines ones allowing . disable escaping, add special token \":tex:\" row names. Example: headers=list(\":tex:Row title\"=\"weird & & %\\\\n tex stuff\\\\\\\\\"), elements displayed verbatim. course, since can easily ruin table, recommended super users.","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"markdown-markup","dir":"Reference","previous_headings":"","what":"Markdown markup","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"Within anything Latex-escaped (see previous section), can use markdown-style markup put text italic /bold. Use *text*, **text** ***text*** put text , respectively, italic (\\\\textit), bold (\\\\textbf) italic-bold. markup can escaped using backslash first. example \"***: \\\\***, three stars***\" leave three stars middle untouched.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/etable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimations table (export the results of multiples estimations to a DF or to Latex) — etable","text":"","code":"est1 = feols(Ozone ~ i(Month) / Wind + Temp, data = airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). est2 = feols(Ozone ~ i(Month, Wind) + Temp | Month, data = airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37).  # Displaying the two results in a single table etable(est1, est2) #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Constant         -100.2*** (26.35)                    #> Month = 6          -54.99* (26.34)                    #> Month = 7           35.89. (18.37)                    #> Month = 8           44.52* (18.05)                    #> Month = 9           -11.78 (18.22)                    #> Temp             2.042*** (0.3078)  2.042*** (0.2242) #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> Observations                   116                116 #> R2                         0.68106            0.68106 #> Within R2                       --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # keep/drop: keeping only interactions etable(est1, est2, keep = \" x \") #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> Observations                   116                116 #> R2                         0.68106            0.68106 #> Within R2                       --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # or using drop  (see regexp help): etable(est1, est2, drop = \"^(Month|Temp|\\\\()\") #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Constant         -100.2*** (26.35)                    #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> Observations                   116                116 #> R2                         0.68106            0.68106 #> Within R2                       --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # keep/drop: dropping interactions etable(est1, est2, drop = \" x \") #>                              est1              est2 #> Dependent Var.:             Ozone             Ozone #>                                                     #> Constant        -100.2*** (26.35)                   #> Month = 6         -54.99* (26.34)                   #> Month = 7          35.89. (18.37)                   #> Month = 8          44.52* (18.05)                   #> Month = 9          -11.78 (18.22)                   #> Temp            2.042*** (0.3078) 2.042*** (0.2242) #> Fixed-Effects:  ----------------- ----------------- #> Month                          No               Yes #> _______________ _________________ _________________ #> S.E. type                     IID         by: Month #> Observations                  116               116 #> R2                        0.68106           0.68106 #> Within R2                      --           0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # or using keep (\"!\" reverses the effect): etable(est1, est2, keep = \"! x \") #>                              est1              est2 #> Dependent Var.:             Ozone             Ozone #>                                                     #> Constant        -100.2*** (26.35)                   #> Month = 6         -54.99* (26.34)                   #> Month = 7          35.89. (18.37)                   #> Month = 8          44.52* (18.05)                   #> Month = 9          -11.78 (18.22)                   #> Temp            2.042*** (0.3078) 2.042*** (0.2242) #> Fixed-Effects:  ----------------- ----------------- #> Month                          No               Yes #> _______________ _________________ _________________ #> S.E. type                     IID         by: Month #> Observations                  116               116 #> R2                        0.68106           0.68106 #> Within R2                      --           0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # order: Wind variable first, intercept last (note the \"!\" to reverse the effect) etable(est1, est2, order = c(\"Wind\", \"!Inter\")) #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Constant         -100.2*** (26.35)                    #> Month = 6          -54.99* (26.34)                    #> Month = 7           35.89. (18.37)                    #> Month = 8           44.52* (18.05)                    #> Month = 9           -11.78 (18.22)                    #> Temp             2.042*** (0.3078)  2.042*** (0.2242) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> Observations                   116                116 #> R2                         0.68106            0.68106 #> Within R2                       --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Month, then interactions, then the rest etable(est1, est2, order = c(\"^Month\", \" x \")) #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Month = 6          -54.99* (26.34)                    #> Month = 7           35.89. (18.37)                    #> Month = 8           44.52* (18.05)                    #> Month = 9           -11.78 (18.22)                    #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Constant         -100.2*** (26.35)                    #> Temp             2.042*** (0.3078)  2.042*** (0.2242) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> Observations                   116                116 #> R2                         0.68106            0.68106 #> Within R2                       --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # dict #  # You can rename variables with dict = c(var1 = alias1, var2 = alias2, etc) # You can also rename values taken by factors. # Here's a full example: dict = c(Temp = \"Temperature\", \"Month::5\"=\"May\", \"6\"=\"Jun\") etable(est1, est2, dict = dict) #>                                 est1               est2 #> Dependent Var.:                Ozone              Ozone #>                                                         #> Constant           -100.2*** (26.35)                    #> Month = Jun          -54.99* (26.34)                    #> Month = 7             35.89. (18.37)                    #> Month = 8             44.52* (18.05)                    #> Month = 9             -11.78 (18.22)                    #> Temperature        2.042*** (0.3078)  2.042*** (0.2242) #> Wind x May            -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = Jun     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7   -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8   -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9      -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:     ----------------- ------------------ #> Month                             No                Yes #> __________________ _________________ __________________ #> S.E. type                        IID          by: Month #> Observations                     116                116 #> R2                           0.68106            0.68106 #> Within R2                         --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Note the difference of treatment between Jun and May  # Assume the following dictionary: dict = c(\"Month::5\"=\"May\", \"Month::6\"=\"Jun\", \"Month::7\"=\"Jul\",          \"Month::8\"=\"Aug\", \"Month::9\"=\"Sep\")  # We would like to keep only the Months, but now the names are all changed... # How to do? # We can use the special character '%' to make reference to the original names.  etable(est1, est2, dict = dict, keep = \"%Month\") #>                              est1               est2 #> Dependent Var.:             Ozone              Ozone #>                                                      #> Jun               -54.99* (26.34)                    #> Jul                35.89. (18.37)                    #> Aug                44.52* (18.05)                    #> Sep                -11.78 (18.22)                    #> Wind x May         -1.086 (1.127)  -1.086** (0.1408) #> Wind x Jun          2.046 (1.784)  2.046*** (0.0398) #> Wind x Jul      -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Aug      -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Sep         -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:  ----------------- ------------------ #> Month                          No                Yes #> _______________ _________________ __________________ #> S.E. type                     IID          by: Month #> Observations                  116                116 #> R2                        0.68106            0.68106 #> Within R2                      --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # signif.code #  etable(est1, est2, signif.code = c(\" A\"=0.01, \" B\"=0.05, \" C\"=0.1, \" D\"=0.15, \" F\"=1)) #>                              est1              est2 #> Dependent Var.:             Ozone             Ozone #>                                                     #> Constant         -100.2 A (26.35)                   #> Month = 6        -54.99 B (26.34)                   #> Month = 7         35.89 C (18.37)                   #> Month = 8         44.52 B (18.05)                   #> Month = 9        -11.78 F (18.22)                   #> Temp             2.042 A (0.3078)  2.042 A (0.2242) #> Wind x Month = 5 -1.086 F (1.127) -1.086 A (0.1408) #> Wind x Month = 6  2.046 F (1.784)  2.046 A (0.0398) #> Wind x Month = 7 -5.616 A (1.316) -5.616 A (0.1554) #> Wind x Month = 8 -6.515 A (1.220) -6.515 A (0.2203) #> Wind x Month = 9 -1.349 F (1.147) -1.349 B (0.3175) #> Fixed-Effects:   ---------------- ----------------- #> Month                          No               Yes #> ________________ ________________ _________________ #> S.E. type                     IID         by: Month #> Observations                  116               116 #> R2                        0.68106           0.68106 #> Within R2                      --           0.58296 #> --- #> Signif. codes: 0 ' A' 0.01 ' B' 0.05 ' C' 0.1 ' D' 0.15 ' F' 1 ' ' 1  # # Using the argument style to customize Latex exports #  # If you don't like the default layout of the table, no worries! # You can modify many parameters with the argument style  # To drop the headers before each section, use: # Note that a space adds an extra line style_noHeaders = style.tex(var.title = \"\", fixef.title = \"\", stats.title = \" \") etable(est1, est2, dict = dict, tex = TRUE, style.tex = style_noHeaders) #> \\begingroup #> \\centering #> \\begin{tabular}{lcc} #>    \\tabularnewline \\midrule \\midrule #>    Dependent Variable: & \\multicolumn{2}{c}{Ozone}\\\\ #>    Model:             & (1)            & (2)\\\\   #>    Constant           & -100.2$^{***}$ &   \\\\    #>                       & (26.35)        &   \\\\    #>    Jun                & -54.99$^{**}$  &   \\\\    #>                       & (26.34)        &   \\\\    #>    Jul                & 35.89$^{*}$    &   \\\\    #>                       & (18.37)        &   \\\\    #>    Aug                & 44.52$^{**}$   &   \\\\    #>                       & (18.05)        &   \\\\    #>    Sep                & -11.78         &   \\\\    #>                       & (18.22)        &   \\\\    #>    Temp               & 2.042$^{***}$  & 2.042$^{***}$\\\\    #>                       & (0.3078)       & (0.2242)\\\\    #>    Wind $\\times$ May  & -1.086         & -1.086$^{***}$\\\\    #>                       & (1.127)        & (0.1408)\\\\    #>    Wind $\\times$ Jun  & 2.046          & 2.046$^{***}$\\\\    #>                       & (1.784)        & (0.0398)\\\\    #>    Wind $\\times$ Jul  & -5.616$^{***}$ & -5.616$^{***}$\\\\    #>                       & (1.316)        & (0.1554)\\\\    #>    Wind $\\times$ Aug  & -6.515$^{***}$ & -6.515$^{***}$\\\\    #>                       & (1.220)        & (0.2203)\\\\    #>    Wind $\\times$ Sep  & -1.349         & -1.349$^{**}$\\\\    #>                       & (1.147)        & (0.3175)\\\\    #>    Month              &                & Yes\\\\   #>     \\\\ #>    Observations       & 116            & 116\\\\   #>    R$^2$              & 0.68106        & 0.68106\\\\   #>    Within R$^2$       &                & 0.58296\\\\   #>    \\midrule \\midrule #>    \\multicolumn{3}{l}{\\emph{Signif. Codes: ***: 0.01, **: 0.05, *: 0.1}}\\\\ #> \\end{tabular} #> \\par\\endgroup  # To change the lines of the table + dropping the table footer style_lines = style.tex(line.top = \"\\\\toprule\", line.bottom = \"\\\\bottomrule\",                     tablefoot = FALSE) etable(est1, est2, dict = dict, tex = TRUE, style.tex = style_lines) #> \\begingroup #> \\centering #> \\begin{tabular}{lcc} #>    \\toprule #>    Dependent Variable: & \\multicolumn{2}{c}{Ozone}\\\\ #>    Model:             & (1)            & (2)\\\\   #>    \\midrule #>    \\emph{Variables}\\\\ #>    Constant           & -100.2$^{***}$ &   \\\\    #>                       & (26.35)        &   \\\\    #>    Jun                & -54.99$^{**}$  &   \\\\    #>                       & (26.34)        &   \\\\    #>    Jul                & 35.89$^{*}$    &   \\\\    #>                       & (18.37)        &   \\\\    #>    Aug                & 44.52$^{**}$   &   \\\\    #>                       & (18.05)        &   \\\\    #>    Sep                & -11.78         &   \\\\    #>                       & (18.22)        &   \\\\    #>    Temp               & 2.042$^{***}$  & 2.042$^{***}$\\\\    #>                       & (0.3078)       & (0.2242)\\\\    #>    Wind $\\times$ May  & -1.086         & -1.086$^{***}$\\\\    #>                       & (1.127)        & (0.1408)\\\\    #>    Wind $\\times$ Jun  & 2.046          & 2.046$^{***}$\\\\    #>                       & (1.784)        & (0.0398)\\\\    #>    Wind $\\times$ Jul  & -5.616$^{***}$ & -5.616$^{***}$\\\\    #>                       & (1.316)        & (0.1554)\\\\    #>    Wind $\\times$ Aug  & -6.515$^{***}$ & -6.515$^{***}$\\\\    #>                       & (1.220)        & (0.2203)\\\\    #>    Wind $\\times$ Sep  & -1.349         & -1.349$^{**}$\\\\    #>                       & (1.147)        & (0.3175)\\\\    #>    \\midrule #>    \\emph{Fixed-effects}\\\\ #>    Month              &                & Yes\\\\   #>    \\midrule #>    \\emph{Fit statistics}\\\\ #>    Standard-Errors    & IID            & Month \\\\    #>    Observations       & 116            & 116\\\\   #>    R$^2$              & 0.68106        & 0.68106\\\\   #>    Within R$^2$       &                & 0.58296\\\\   #>    \\bottomrule #> \\end{tabular} #> \\par\\endgroup  # Or you have the predefined type \"aer\" etable(est1, est2, dict = dict, tex = TRUE, style.tex = style.tex(\"aer\")) #> \\begingroup #> \\centering #> \\begin{tabular}{lcc} #>    \\toprule #>     & \\multicolumn{2}{c}{Ozone}\\\\ #>                        & (1)            & (2)\\\\   #>    \\midrule  #>    Constant            & -100.2$^{***}$ &   \\\\    #>                        & (26.35)        &   \\\\    #>    Jun                 & -54.99$^{**}$  &   \\\\    #>                        & (26.34)        &   \\\\    #>    Jul                 & 35.89$^{*}$    &   \\\\    #>                        & (18.37)        &   \\\\    #>    Aug                 & 44.52$^{**}$   &   \\\\    #>                        & (18.05)        &   \\\\    #>    Sep                 & -11.78         &   \\\\    #>                        & (18.22)        &   \\\\    #>    Temp                & 2.042$^{***}$  & 2.042$^{***}$\\\\    #>                        & (0.3078)       & (0.2242)\\\\    #>    Wind $\\times$ May   & -1.086         & -1.086$^{***}$\\\\    #>                        & (1.127)        & (0.1408)\\\\    #>    Wind $\\times$ Jun   & 2.046          & 2.046$^{***}$\\\\    #>                        & (1.784)        & (0.0398)\\\\    #>    Wind $\\times$ Jul   & -5.616$^{***}$ & -5.616$^{***}$\\\\    #>                        & (1.316)        & (0.1554)\\\\    #>    Wind $\\times$ Aug   & -6.515$^{***}$ & -6.515$^{***}$\\\\    #>                        & (1.220)        & (0.2203)\\\\    #>    Wind $\\times$ Sep   & -1.349         & -1.349$^{**}$\\\\    #>                        & (1.147)        & (0.3175)\\\\    #>     \\\\ #>    Standard-Errors     & IID            & Month \\\\    #>    Observations        & 116            & 116\\\\   #>    R$^2$               & 0.68106        & 0.68106\\\\   #>    Within R$^2$        &                & 0.58296\\\\   #>     \\\\ #>    Month fixed effects &                & $\\checkmark$\\\\    #>    \\bottomrule #> \\end{tabular} #> \\par\\endgroup  # # Group and extralines #  # Sometimes it's useful to group control variables into a single line # You can achieve that with the group argument  setFixest_fml(..ctrl = ~ poly(Wind, 2) + poly(Temp, 2)) est_c0 = feols(Ozone ~ Solar.R, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). est_c1 = feols(Ozone ~ Solar.R + ..ctrl, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). est_c2 = feols(Ozone ~ Solar.R + Solar.R^2 + ..ctrl, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  etable(est_c0, est_c1, est_c2, group = list(Controls = \"poly\")) #>                             est_c0            est_c1           est_c2 #> Dependent Var.:              Ozone             Ozone            Ozone #>                                                                       #> Constant           18.60** (6.748)  29.83*** (4.101) 25.79*** (6.506) #> Solar.R         0.1272*** (0.0328) 0.0659** (0.0201)  0.1347 (0.0881) #> Solar.R square                                       -0.0002 (0.0003) #> Controls                        No               Yes              Yes #> _______________ __________________ _________________ ________________ #> S.E. type                      IID               IID              IID #> Observations                   111               111              111 #> R2                         0.12134           0.71231          0.71408 #> Adj. R2                    0.11328           0.69861          0.69758 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # 'group' here does the same as drop = \"poly\", but adds an extra line # with TRUE/FALSE where the variables were found  # 'extralines' adds an extra line, where you can add the value for each model est_all  = feols(Ozone ~ Solar.R + Temp + Wind, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). est_sub1 = feols(Ozone ~ Solar.R + Temp + Wind, data = airquality,                  subset = ~ Month %in% 5:6) #> NOTE: 28 observations removed because of NA values (LHS: 26, RHS: 4). est_sub2 = feols(Ozone ~ Solar.R + Temp + Wind, data = airquality,                  subset = ~ Month %in% 7:8) #> NOTE: 13 observations removed because of NA values (LHS: 10, RHS: 3). est_sub3 = feols(Ozone ~ Solar.R + Temp + Wind, data = airquality,                  subset = ~ Month == 9) #> NOTE: 1 observation removed because of NA values (LHS: 1).  etable(est_all, est_sub1, est_sub2, est_sub3,        extralines = list(\"Sub-sample\" = c(\"All\", \"May-June\", \"Jul.-Aug.\", \"Sept.\"))) #>                            est_all         est_sub1          est_sub2 #> Dependent Var.:              Ozone            Ozone             Ozone #>                                                                       #> Constant          -64.34** (23.05)   -48.52 (30.42)    -80.06 (57.59) #> Solar.R           0.0598* (0.0232)  0.0249 (0.0319)  0.0993* (0.0414) #> Temp             1.652*** (0.2535) 1.184** (0.4123)  2.037** (0.6508) #> Wind            -3.334*** (0.6544)  -1.107 (0.9236) -5.830*** (1.124) #> Sub-sample                     All         May-June         Jul.-Aug. #> _______________ __________________ ________________ _________________ #> S.E. type                      IID              IID               IID #> Observations                   111               33                49 #> R2                         0.60589          0.35006           0.66607 #> Adj. R2                    0.59484          0.28282           0.64381 #>  #>                          est_sub3 #> Dependent Var.:             Ozone #>                                   #> Constant         -112.9** (34.81) #> Solar.R           0.0225 (0.0322) #> Temp            2.005*** (0.3716) #> Wind              -1.353 (0.9065) #> Sub-sample                  Sept. #> _______________ _________________ #> S.E. type                     IID #> Observations                   29 #> R2                        0.71724 #> Adj. R2                   0.68330 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # You can monitor the placement of the new lines with two special characters # at the beginning of the row name. # 1) \"^\", \"-\" or \"_\" which mean the coefficients, the fixed-effects or the # statistics section. # 2) \"^\" or \"_\" which mean first or last line of the section # # Ex: starting with \"_^\" will place the line at the top of the stat. section #     starting with \"-_\" will place the line at the bottom of the FEs section #     etc. # # You can use a single character which will represent the section, # the line would then appear at the bottom of the section.  # Examples etable(est_c0, est_c1, est_c2, group = list(\"_Controls\" = \"poly\")) #>                             est_c0            est_c1           est_c2 #> Dependent Var.:              Ozone             Ozone            Ozone #>                                                                       #> Constant           18.60** (6.748)  29.83*** (4.101) 25.79*** (6.506) #> Solar.R         0.1272*** (0.0328) 0.0659** (0.0201)  0.1347 (0.0881) #> Solar.R square                                       -0.0002 (0.0003) #> _______________ __________________ _________________ ________________ #> S.E. type                      IID               IID              IID #> Observations                   111               111              111 #> R2                         0.12134           0.71231          0.71408 #> Adj. R2                    0.11328           0.69861          0.69758 #> Controls                        No               Yes              Yes #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 etable(est_all, est_sub1, est_sub2, est_sub3,        extralines = list(\"^^Sub-sample\" = c(\"All\", \"May-June\", \"Jul.-Aug.\", \"Sept.\"))) #>                            est_all         est_sub1          est_sub2 #> Dependent Var.:              Ozone            Ozone             Ozone #>                                                                       #> Sub-sample                     All         May-June         Jul.-Aug. #> Constant          -64.34** (23.05)   -48.52 (30.42)    -80.06 (57.59) #> Solar.R           0.0598* (0.0232)  0.0249 (0.0319)  0.0993* (0.0414) #> Temp             1.652*** (0.2535) 1.184** (0.4123)  2.037** (0.6508) #> Wind            -3.334*** (0.6544)  -1.107 (0.9236) -5.830*** (1.124) #> _______________ __________________ ________________ _________________ #> S.E. type                      IID              IID               IID #> Observations                   111               33                49 #> R2                         0.60589          0.35006           0.66607 #> Adj. R2                    0.59484          0.28282           0.64381 #>  #>                          est_sub3 #> Dependent Var.:             Ozone #>                                   #> Sub-sample                  Sept. #> Constant         -112.9** (34.81) #> Solar.R           0.0225 (0.0322) #> Temp            2.005*** (0.3716) #> Wind              -1.353 (0.9065) #> _______________ _________________ #> S.E. type                     IID #> Observations                   29 #> R2                        0.71724 #> Adj. R2                   0.68330 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # headers #   # You can add header lines with 'headers' # These lines will appear at the top of the table  # first, 3 estimations est_header = feols(c(Ozone, Solar.R, Wind) ~  poly(Temp, 2), airquality)  # header => vector: adds a line w/t title etable(est_header, headers = c(\"A\", \"A\", \"B\")) #>                     est_header.1     est_header.2      est_header.3 #>                                A                A                 B #> Dependent Var.:            Ozone          Solar.R              Wind #>                                                                     #> Constant        42.14*** (2.086) 185.2*** (7.218) 9.958*** (0.2548) #> poly(Temp)1     272.4*** (25.94) 317.2*** (91.89) -19.89*** (3.152) #> poly(Temp)2     102.8*** (27.46)   -33.07 (92.49)   -0.6379 (3.152) #> _______________ ________________ ________________ _________________ #> S.E. type                    IID              IID               IID #> Observations                 116              146               153 #> R2                       0.54422          0.07691           0.20997 #> Adj. R2                  0.53615          0.06400           0.19943 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # header => list: identical way to do the previous header # The form is: list(item1 = #item1, item2 = #item2,  etc) etable(est_header, headers = list(\"A\" = 2, \"B\" = 1)) #>                     est_header.1     est_header.2      est_header.3 #>                                A                A                 B #> Dependent Var.:            Ozone          Solar.R              Wind #>                                                                     #> Constant        42.14*** (2.086) 185.2*** (7.218) 9.958*** (0.2548) #> poly(Temp)1     272.4*** (25.94) 317.2*** (91.89) -19.89*** (3.152) #> poly(Temp)2     102.8*** (27.46)   -33.07 (92.49)   -0.6379 (3.152) #> _______________ ________________ ________________ _________________ #> S.E. type                    IID              IID               IID #> Observations                 116              146               153 #> R2                       0.54422          0.07691           0.20997 #> Adj. R2                  0.53615          0.06400           0.19943 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Adding a title + # when an element is to be repeated only once, you can avoid the \"= 1\": etable(est_header, headers = list(Group = list(\"A\" = 2, \"B\"))) #>                     est_header.1     est_header.2      est_header.3 #> Group                          A                A                 B #> Dependent Var.:            Ozone          Solar.R              Wind #>                                                                     #> Constant        42.14*** (2.086) 185.2*** (7.218) 9.958*** (0.2548) #> poly(Temp)1     272.4*** (25.94) 317.2*** (91.89) -19.89*** (3.152) #> poly(Temp)2     102.8*** (27.46)   -33.07 (92.49)   -0.6379 (3.152) #> _______________ ________________ ________________ _________________ #> S.E. type                    IID              IID               IID #> Observations                 116              146               153 #> R2                       0.54422          0.07691           0.20997 #> Adj. R2                  0.53615          0.06400           0.19943 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # To change the placement, add as first character: # - \"^\" => top # - \"-\" => mid (default) # - \"_\" => bottom # Note that \"mid\" and \"top\" are only distinguished when tex = TRUE  # Placing the new header line at the bottom etable(est_header, headers = list(\"_Group\" = c(\"A\", \"A\", \"B\"),                                   \"^Currency\" = list(\"US $\" = 2, \"CA $\" = 1))) #>                     est_header.1     est_header.2      est_header.3 #> Currency                    US $             US $              CA $ #> Dependent Var.:            Ozone          Solar.R              Wind #> Group                          A                A                 B #>                                                                     #> Constant        42.14*** (2.086) 185.2*** (7.218) 9.958*** (0.2548) #> poly(Temp)1     272.4*** (25.94) 317.2*** (91.89) -19.89*** (3.152) #> poly(Temp)2     102.8*** (27.46)   -33.07 (92.49)   -0.6379 (3.152) #> _______________ ________________ ________________ _________________ #> S.E. type                    IID              IID               IID #> Observations                 116              146               153 #> R2                       0.54422          0.07691           0.20997 #> Adj. R2                  0.53615          0.06400           0.19943 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # In Latex, you can add \"grouped underlines\" (cmidrule from the booktabs package) # by adding \":_:\" in the title: etable(est_header, tex = TRUE,        headers = list(\"^:_:Group\" = c(\"A\", \"A\", \"B\"))) #> \\begingroup #> \\centering #> \\begin{tabular}{lccc} #>    \\tabularnewline \\midrule \\midrule #>    Group & \\multicolumn{2}{c}{A} & B \\\\ \\cmidrule(lr){2-3} \\cmidrule(lr){4-4} #>    Dependent Variables: & Ozone         & Solar.R       & Wind\\\\   #>    Model:               & (1)           & (2)           & (3)\\\\   #>    \\midrule #>    \\emph{Variables}\\\\ #>    Constant             & 42.14$^{***}$ & 185.2$^{***}$ & 9.958$^{***}$\\\\    #>                         & (2.086)       & (7.218)       & (0.2548)\\\\    #>    poly(Temp)1          & 272.4$^{***}$ & 317.2$^{***}$ & -19.89$^{***}$\\\\    #>                         & (25.94)       & (91.89)       & (3.152)\\\\    #>    poly(Temp)2          & 102.8$^{***}$ & -33.07        & -0.6379\\\\    #>                         & (27.46)       & (92.49)       & (3.152)\\\\    #>    \\midrule #>    \\emph{Fit statistics}\\\\ #>    Observations         & 116           & 146           & 153\\\\   #>    R$^2$                & 0.54422       & 0.07691       & 0.20997\\\\   #>    Adjusted R$^2$       & 0.53615       & 0.06400       & 0.19943\\\\   #>    \\midrule \\midrule #>    \\multicolumn{4}{l}{\\emph{IID standard-errors in parentheses}}\\\\ #>    \\multicolumn{4}{l}{\\emph{Signif. Codes: ***: 0.01, **: 0.05, *: 0.1}}\\\\ #> \\end{tabular} #> \\par\\endgroup  # # extralines and headers: .() for list() #  # In the two arguments extralines and headers, .() can be used for list() # For example: etable(est_header, headers = .(\"^Currency\" = .(\"US $\" = 2, \"CA $\" = 1))) #>                     est_header.1     est_header.2      est_header.3 #> Currency                    US $             US $              CA $ #> Dependent Var.:            Ozone          Solar.R              Wind #>                                                                     #> Constant        42.14*** (2.086) 185.2*** (7.218) 9.958*** (0.2548) #> poly(Temp)1     272.4*** (25.94) 317.2*** (91.89) -19.89*** (3.152) #> poly(Temp)2     102.8*** (27.46)   -33.07 (92.49)   -0.6379 (3.152) #> _______________ ________________ ________________ _________________ #> S.E. type                    IID              IID               IID #> Observations                 116              146               153 #> R2                       0.54422          0.07691           0.20997 #> Adj. R2                  0.53615          0.06400           0.19943 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1    # # fixef.group #  # You can group the fixed-effects line with fixef.group  est_0fe = feols(Ozone ~ Solar.R + Temp + Wind, airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). est_1fe = feols(Ozone ~ Solar.R + Temp + Wind | Month, airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). est_2fe = feols(Ozone ~ Solar.R + Temp + Wind | Month + Day, airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  # A) automatic way => simply use fixef.group = TRUE  etable(est_0fe, est_2fe, fixef.group = TRUE) #>                            est_0fe          est_2fe #> Dependent Var.:              Ozone            Ozone #>                                                     #> Constant          -64.34** (23.05)                  #> Solar.R           0.0598* (0.0232)  0.0509 (0.0428) #> Temp             1.652*** (0.2535) 2.052** (0.2390) #> Wind            -3.334*** (0.6544)  -3.289* (1.051) #> Fixed-Effects:  ------------------ ---------------- #> Month and Day                   No              Yes #> _______________ __________________ ________________ #> S.E. type                      IID        by: Month #> Observations                   111              111 #> R2                         0.60589          0.81604 #> Within R2                       --          0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Note that when grouping would lead to inconsistencies across models, # it is avoided  etable(est_0fe, est_1fe, est_2fe, fixef.group = TRUE) #>                            est_0fe           est_1fe          est_2fe #> Dependent Var.:              Ozone             Ozone            Ozone #>                                                                       #> Constant          -64.34** (23.05)                                    #> Solar.R           0.0598* (0.0232)   0.0522 (0.0408)  0.0509 (0.0428) #> Temp             1.652*** (0.2535) 1.875*** (0.1816) 2.052** (0.2390) #> Wind            -3.334*** (0.6544)   -3.109. (1.306)  -3.289* (1.051) #> Fixed-Effects:  ------------------ ----------------- ---------------- #> Month                           No               Yes              Yes #> Day                             No                No              Yes #> _______________ __________________ _________________ ________________ #> S.E. type                      IID         by: Month        by: Month #> Observations                   111               111              111 #> R2                         0.60589           0.63686          0.81604 #> Within R2                       --           0.53154          0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # B) customized way => use a list  etable(est_0fe, est_2fe, fixef.group = list(\"Dates\" = \"Month|Day\")) #>                            est_0fe          est_2fe #> Dependent Var.:              Ozone            Ozone #>                                                     #> Constant          -64.34** (23.05)                  #> Solar.R           0.0598* (0.0232)  0.0509 (0.0428) #> Temp             1.652*** (0.2535) 2.052** (0.2390) #> Wind            -3.334*** (0.6544)  -3.289* (1.051) #> Fixed-Effects:  ------------------ ---------------- #> Dates                           No              Yes #> _______________ __________________ ________________ #> S.E. type                      IID        by: Month #> Observations                   111              111 #> R2                         0.60589          0.81604 #> Within R2                       --          0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Note that when a user grouping would lead to inconsistencies, # the term partial replaces yes/no and the fixed-effects are not removed.  etable(est_0fe, est_1fe, est_2fe, fixef.group = list(\"Dates\" = \"Month|Day\")) #> Warning: In etable(est_0fe, est_1fe, est_2fe, fixef.group = l...: #>  In 'fixef.group', the group leads to an inconsistent row (defined by #> \"Month|Day\"). #> To create inconsistent rows: use drop.section = 'fixef' combined with #> the arghument 'extralines'. #>                            est_0fe           est_1fe          est_2fe #> Dependent Var.:              Ozone             Ozone            Ozone #>                                                                       #> Constant          -64.34** (23.05)                                    #> Solar.R           0.0598* (0.0232)   0.0522 (0.0408)  0.0509 (0.0428) #> Temp             1.652*** (0.2535) 1.875*** (0.1816) 2.052** (0.2390) #> Wind            -3.334*** (0.6544)   -3.109. (1.306)  -3.289* (1.051) #> Fixed-Effects:  ------------------ ----------------- ---------------- #> Dates                           No           partial              Yes #> Month                           No               Yes              Yes #> Day                             No                No              Yes #> _______________ __________________ _________________ ________________ #> S.E. type                      IID         by: Month        by: Month #> Observations                   111               111              111 #> R2                         0.60589           0.63686          0.81604 #> Within R2                       --           0.53154          0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Using customized placement => as with 'group' and 'extralines', # the user can control the placement of the new line. # See the previous 'group' examples and the dedicated section in the help.  # On top of the coefficients: etable(est_0fe, est_2fe, fixef.group = list(\"^^Dates\" = \"Month|Day\")) #>                            est_0fe          est_2fe #> Dependent Var.:              Ozone            Ozone #>                                                     #> Dates                           No              Yes #> Constant          -64.34** (23.05)                  #> Solar.R           0.0598* (0.0232)  0.0509 (0.0428) #> Temp             1.652*** (0.2535) 2.052** (0.2390) #> Wind            -3.334*** (0.6544)  -3.289* (1.051) #> _______________ __________________ ________________ #> S.E. type                      IID        by: Month #> Observations                   111              111 #> R2                         0.60589          0.81604 #> Within R2                       --          0.61471 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Last line of the statistics etable(est_0fe, est_2fe, fixef.group = list(\"_Dates\" = \"Month|Day\")) #>                            est_0fe          est_2fe #> Dependent Var.:              Ozone            Ozone #>                                                     #> Constant          -64.34** (23.05)                  #> Solar.R           0.0598* (0.0232)  0.0509 (0.0428) #> Temp             1.652*** (0.2535) 2.052** (0.2390) #> Wind            -3.334*** (0.6544)  -3.289* (1.051) #> _______________ __________________ ________________ #> S.E. type                      IID        by: Month #> Observations                   111              111 #> R2                         0.60589          0.81604 #> Within R2                       --          0.61471 #> Dates                           No              Yes #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1    # # Using custom functions to compute the standard errors #  # You can use external functions to compute the VCOVs # by feeding functions in the 'vcov' argument. # Let's use some covariances from the sandwich package  etable(est_c0, est_c1, est_c2, vcov = sandwich::vcovHC) #>                             est_c0             est_c1            est_c2 #> Dependent Var.:              Ozone              Ozone             Ozone #>                                                                         #> Constant          18.60*** (3.949)   29.83*** (3.064)  25.79*** (4.436) #> Solar.R         0.1272*** (0.0266) 0.0659*** (0.0150)  0.1347* (0.0651) #> poly(Wind)1                         -155.5*** (39.20) -153.6*** (39.12) #> poly(Wind)2                           98.77** (36.32)   98.88** (36.42) #> poly(Temp)1                          166.7*** (25.38)  159.3*** (25.99) #> poly(Temp)2                            67.20* (27.38)    68.77* (27.36) #> Solar.R square                                         -0.0002 (0.0002) #> _______________ __________________ __________________ _________________ #> S.E. type                   vcovHC             vcovHC            vcovHC #> Observations                   111                111               111 #> R2                         0.12134            0.71231           0.71408 #> Adj. R2                    0.11328            0.69861           0.69758 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # To add extra arguments to vcovHC, you need to write your wrapper: etable(est_c0, est_c1, est_c2, vcov = function(x) sandwich::vcovHC(x, type = \"HC0\")) #>                             est_c0             est_c1            est_c2 #> Dependent Var.:              Ozone              Ozone             Ozone #>                                                                         #> Constant          18.60*** (3.850)   29.83*** (2.890)  25.79*** (4.091) #> Solar.R         0.1272*** (0.0260) 0.0659*** (0.0140)  0.1347* (0.0603) #> poly(Wind)1                         -155.5*** (35.29) -153.6*** (35.11) #> poly(Wind)2                           98.77** (32.31)   98.88** (32.35) #> poly(Temp)1                          166.7*** (23.41)  159.3*** (23.76) #> poly(Temp)2                           67.20** (24.84)   68.77** (24.68) #> Solar.R square                                         -0.0002 (0.0002) #> _______________ __________________ __________________ _________________ #> S.E. type       vcovHC(type=\"HC0\") vcovHC(type=\"HC0\") vcovHC(type=\"HC.. #> Observations                   111                111               111 #> R2                         0.12134            0.71231           0.71408 #> Adj. R2                    0.11328            0.69861           0.69758 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # Customize which fit statistic to display #  # You can change the fit statistics with the argument fitstat # and you can rename them with the dictionary etable(est1, est2, fitstat = ~ r2 + n + G) #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Constant         -100.2*** (26.35)                    #> Month = 6          -54.99* (26.34)                    #> Month = 7           35.89. (18.37)                    #> Month = 8           44.52* (18.05)                    #> Month = 9           -11.78 (18.22)                    #> Temp             2.042*** (0.3078)  2.042*** (0.2242) #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> R2                         0.68106            0.68106 #> Observations                   116                116 #> G                              105                  5 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # If you use a formula, '.' means the default: etable(est1, est2, fitstat = ~ ll + .) #>                               est1               est2 #> Dependent Var.:              Ozone              Ozone #>                                                       #> Constant         -100.2*** (26.35)                    #> Month = 6          -54.99* (26.34)                    #> Month = 7           35.89. (18.37)                    #> Month = 8           44.52* (18.05)                    #> Month = 9           -11.78 (18.22)                    #> Temp             2.042*** (0.3078)  2.042*** (0.2242) #> Wind x Month = 5    -1.086 (1.127)  -1.086** (0.1408) #> Wind x Month = 6     2.046 (1.784)  2.046*** (0.0398) #> Wind x Month = 7 -5.616*** (1.316) -5.616*** (0.1554) #> Wind x Month = 8 -6.515*** (1.220) -6.515*** (0.2203) #> Wind x Month = 9    -1.349 (1.147)   -1.349* (0.3175) #> Fixed-Effects:   ----------------- ------------------ #> Month                           No                Yes #> ________________ _________________ __________________ #> S.E. type                      IID          by: Month #> Log-Likelihood             -503.37            -503.37 #> Observations                   116                116 #> R2                         0.68106            0.68106 #> Within R2                       --            0.58296 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # Computing a different SE for each model #  est = feols(Ozone ~ Solar.R + Wind + Temp, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  # # Method 1: use summary  s1 = summary(est, \"iid\") s2 = summary(est, cluster = ~ Month) s3 = summary(est, cluster = ~ Day) s4 = summary(est, cluster = ~ Day + Month)  etable(list(s1, s2, s3, s4)) #>                            model 1           model 2            model 3 #> Dependent Var.:              Ozone             Ozone              Ozone #>                                                                         #> Constant          -64.34** (23.05)   -64.34* (21.30)   -64.34** (20.15) #> Solar.R           0.0598* (0.0232)   0.0598 (0.0335) 0.0598*** (0.0162) #> Wind            -3.334*** (0.6544)   -3.334* (1.181) -3.334*** (0.8343) #> Temp             1.652*** (0.2535) 1.652*** (0.1583)  1.652*** (0.1927) #> _______________ __________________ _________________ __________________ #> S.E. type                      IID         by: Month            by: Day #> Observations                   111               111                111 #> R2                         0.60589           0.60589            0.60589 #> Adj. R2                    0.59484           0.59484            0.59484 #>  #>                           model 4 #> Dependent Var.:             Ozone #>                                   #> Constant          -64.34* (19.66) #> Solar.R           0.0598 (0.0314) #> Wind              -3.334* (1.135) #> Temp            1.652*** (0.1386) #> _______________ _________________ #> S.E. type         by: Day & Month #> Observations                  111 #> R2                        0.60589 #> Adj. R2                   0.59484 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Method 2: using a list in the argument 'vcov'  est_bis = feols(Ozone ~ Solar.R + Wind + Temp | Month, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). etable(est, est_bis, vcov = list(\"hetero\", ~ Month)) #>                                est           est_bis #> Dependent Var.:              Ozone             Ozone #>                                                      #> Constant          -64.34** (21.23)                   #> Solar.R          0.0598** (0.0191)   0.0522 (0.0408) #> Wind            -3.334*** (0.8749)   -3.109. (1.306) #> Temp             1.652*** (0.2025) 1.875*** (0.1816) #> Fixed-Effects:  ------------------ ----------------- #> Month                           No               Yes #> _______________ __________________ _________________ #> S.E. type       Heteroskedas.-rob.         by: Month #> Observations                   111               111 #> R2                         0.60589           0.63686 #> Within R2                       --           0.53154 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # When you have only one model, this model is replicated # along the elements of the vcov list. etable(est, vcov = list(\"hetero\", ~ Month)) #>                                est             est.1 #> Dependent Var.:              Ozone             Ozone #>                                                      #> Constant          -64.34** (21.23)   -64.34* (21.30) #> Solar.R          0.0598** (0.0191)   0.0598 (0.0335) #> Wind            -3.334*** (0.8749)   -3.334* (1.181) #> Temp             1.652*** (0.2025) 1.652*** (0.1583) #> _______________ __________________ _________________ #> S.E. type       Heteroskedas.-rob.         by: Month #> Observations                   111               111 #> R2                         0.60589           0.60589 #> Adj. R2                    0.59484           0.59484 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Method 3: Using \"each\" or \"times\" in vcov  # If the first element of the list in 'vcov' is \"each\" or \"times\", # then all models will be replicated and all the VCOVs will be # applied to each model. The order in which they are replicated # are governed by the each/times keywords.   # each etable(est, est_bis, vcov = list(\"each\", \"iid\", ~ Month, ~ Day)) #>                                est             est.1              est.2 #> Dependent Var.:              Ozone             Ozone              Ozone #>                                                                         #> Constant          -64.34** (23.05)   -64.34* (21.30)   -64.34** (20.15) #> Solar.R           0.0598* (0.0232)   0.0598 (0.0335) 0.0598*** (0.0162) #> Wind            -3.334*** (0.6544)   -3.334* (1.181) -3.334*** (0.8343) #> Temp             1.652*** (0.2535) 1.652*** (0.1583)  1.652*** (0.1927) #> Fixed-Effects:  ------------------ ----------------- ------------------ #> Month                           No                No                 No #> _______________ __________________ _________________ __________________ #> S.E. type                      IID         by: Month            by: Day #> Observations                   111               111                111 #> R2                         0.60589           0.60589            0.60589 #> Within R2                       --                --                 -- #>  #>                            est_bis         est_bis.1          est_bis.2 #> Dependent Var.:              Ozone             Ozone              Ozone #>                                                                         #> Constant                                                                #> Solar.R           0.0522* (0.0237)   0.0522 (0.0408)   0.0522* (0.0202) #> Wind            -3.109*** (0.6601)   -3.109. (1.306) -3.109*** (0.7986) #> Temp             1.875*** (0.3407) 1.875*** (0.1816)  1.875*** (0.3671) #> Fixed-Effects:  ------------------ ----------------- ------------------ #> Month                          Yes               Yes                Yes #> _______________ __________________ _________________ __________________ #> S.E. type                      IID         by: Month            by: Day #> Observations                   111               111                111 #> R2                         0.63686           0.63686            0.63686 #> Within R2                  0.53154           0.53154            0.53154 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # times etable(est, est_bis, vcov = list(\"times\", \"iid\", ~ Month, ~ Day)) #>                                est            est_bis             est.1 #> Dependent Var.:              Ozone              Ozone             Ozone #>                                                                         #> Constant          -64.34** (23.05)                      -64.34* (21.30) #> Solar.R           0.0598* (0.0232)   0.0522* (0.0237)   0.0598 (0.0335) #> Wind            -3.334*** (0.6544) -3.109*** (0.6601)   -3.334* (1.181) #> Temp             1.652*** (0.2535)  1.875*** (0.3407) 1.652*** (0.1583) #> Fixed-Effects:  ------------------ ------------------ ----------------- #> Month                           No                Yes                No #> _______________ __________________ __________________ _________________ #> S.E. type                      IID                IID         by: Month #> Observations                   111                111               111 #> R2                         0.60589            0.63686           0.60589 #> Within R2                       --            0.53154                -- #>  #>                         est_bis.1              est.2          est_bis.2 #> Dependent Var.:             Ozone              Ozone              Ozone #>                                                                         #> Constant                            -64.34** (20.15)                    #> Solar.R           0.0522 (0.0408) 0.0598*** (0.0162)   0.0522* (0.0202) #> Wind              -3.109. (1.306) -3.334*** (0.8343) -3.109*** (0.7986) #> Temp            1.875*** (0.1816)  1.652*** (0.1927)  1.875*** (0.3671) #> Fixed-Effects:  ----------------- ------------------ ------------------ #> Month                         Yes                 No                Yes #> _______________ _________________ __________________ __________________ #> S.E. type               by: Month            by: Day            by: Day #> Observations                  111                111                111 #> R2                        0.63686            0.60589            0.63686 #> Within R2                 0.53154                 --            0.53154 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Notes and markup #  # Notes can be also be set in a dictionary # You can use markdown markup to put text into italic/bold  dict = c(\"note 1\" = \"*Notes:* This data is not really random.\",          \"source 1\" = \"**Source:** the internet?\")  est = feols(Ozone ~ csw(Solar.R, Wind, Temp), data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). #>       |-> this msg only concerns the variables common to all estimations  etable(est, dict = dict, tex = TRUE, notes = c(\"note 1\", \"source 1\")) #> \\begingroup #> \\centering #> \\begin{tabular}{lccc} #>    \\tabularnewline \\midrule \\midrule #>    Dependent Variable: & \\multicolumn{3}{c}{Ozone}\\\\ #>    Model:         & (1)            & (2)            & (3)\\\\   #>    \\midrule #>    \\emph{Variables}\\\\ #>    Constant       & 18.60$^{***}$  & 77.25$^{***}$  & -64.34$^{***}$\\\\    #>                   & (6.748)        & (9.068)        & (23.05)\\\\    #>    Solar.R        & 0.1272$^{***}$ & 0.1004$^{***}$ & 0.0598$^{**}$\\\\    #>                   & (0.0328)       & (0.0263)       & (0.0232)\\\\    #>    Wind           &                & -5.402$^{***}$ & -3.334$^{***}$\\\\    #>                   &                & (0.6732)       & (0.6544)\\\\    #>    Temp           &                &                & 1.652$^{***}$\\\\    #>                   &                &                & (0.2535)\\\\    #>    \\midrule #>    \\emph{Fit statistics}\\\\ #>    Observations   & 111            & 111            & 111\\\\   #>    R$^2$          & 0.12134        & 0.44949        & 0.60589\\\\   #>    Adjusted R$^2$ & 0.11328        & 0.43930        & 0.59484\\\\   #>    \\midrule \\midrule #>    \\multicolumn{4}{l}{\\emph{IID standard-errors in parentheses}}\\\\ #>    \\multicolumn{4}{l}{\\emph{Signif. Codes: ***: 0.01, **: 0.05, *: 0.1}}\\\\ #> \\end{tabular} #>   #> \\par \\raggedright  #> \\textit{Notes:} This data is not really random.\\\\ #> \\textbf{Source:} the internet? #> \\par\\endgroup"},{"path":"https://lrberge.github.io/fixest/reference/extralines_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register extralines macros to be used in etable — extralines_register","title":"Register extralines macros to be used in etable — extralines_register","text":"function used create extralines (argument etable) macros can easily summoned etable.","code":""},{"path":"https://lrberge.github.io/fixest/reference/extralines_register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register extralines macros to be used in etable — extralines_register","text":"","code":"extralines_register(type, fun, alias)"},{"path":"https://lrberge.github.io/fixest/reference/extralines_register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register extralines macros to be used in etable — extralines_register","text":"type character scalar giving type-name. fun function applied fixest estimation. must return scalar. alias character scalar. alias used lieu type name form row name.","code":""},{"path":"https://lrberge.github.io/fixest/reference/extralines_register.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register extralines macros to be used in etable — extralines_register","text":"can register many macros wish, constraint type name conflict fitstat type name.","code":""},{"path":"https://lrberge.github.io/fixest/reference/extralines_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register extralines macros to be used in etable — extralines_register","text":"","code":"# We register a function computing the standard-deviation of the dependent variable my_fun = function(x) sd(model.matrix(x, type = \"lhs\")) extralines_register(\"sdy\", my_fun, \"SD(y)\")  # An estimation data(iris) est = feols(Petal.Length ~ Sepal.Length | Species, iris)  # Now we can easily create a row with the SD of y. # We just \"summon\" it in a one-sided formula etable(est, extralines = ~ sdy) #>                              est #> Dependent Var.:     Petal.Length #>                                  #> Sepal.Length    0.6321* (0.1232) #> SD(y)                      1.765 #> Fixed-Effects:  ---------------- #> Species                      Yes #> _______________ ________________ #> S.E.: Clustered      by: Species #> Observations                 150 #> R2                       0.97489 #> Within R2                0.57178 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # We can change the alias on the fly: etable(est, extralines = list(\"_Standard deviation of the dep. var.\" = ~ sdy)) #>                                                  est #> Dependent Var.:                         Petal.Length #>                                                      #> Sepal.Length                        0.6321* (0.1232) #> Fixed-Effects:                      ---------------- #> Species                                          Yes #> _______________                     ________________ #> S.E.: Clustered                          by: Species #> Observations                                     150 #> R2                                           0.97489 #> Within R2                                    0.57178 #> Standard deviation of the dep. var.            1.765 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/fdim.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted dimension — fdim","title":"Formatted dimension — fdim","text":"Prints dimension data set, user-readable way","code":""},{"path":"https://lrberge.github.io/fixest/reference/fdim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted dimension — fdim","text":"","code":"fdim(x)"},{"path":"https://lrberge.github.io/fixest/reference/fdim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted dimension — fdim","text":"x R object, usually data.frame (can also vector).","code":""},{"path":"https://lrberge.github.io/fixest/reference/fdim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted dimension — fdim","text":"return anything, output directly printed console.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fdim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Formatted dimension — fdim","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/fdim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted dimension — fdim","text":"","code":"fdim(iris) #> 150 rows and 5 columns  fdim(iris$Species) #> 150  obs"},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed-effects GLM estimations — feglm","title":"Fixed-effects GLM estimations — feglm","text":"Estimates GLM models number fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed-effects GLM estimations — feglm","text":"","code":"feglm(   fml,   data,   family = \"gaussian\",   vcov,   offset,   weights,   subset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   panel.id,   start = NULL,   etastart = NULL,   mustart = NULL,   fixef,   fixef.rm = \"perfect\",   fixef.tol = 1e-06,   fixef.iter = 10000,   collin.tol = 1e-10,   glm.iter = 25,   glm.tol = 1e-08,   nthreads = getFixest_nthreads(),   lean = FALSE,   warn = TRUE,   notes = getFixest_notes(),   verbose = 0,   only.coef = FALSE,   combine.quick,   mem.clean = FALSE,   only.env = FALSE,   env,   ... )  feglm.fit(   y,   X,   fixef_df,   family = \"gaussian\",   vcov,   offset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   weights,   subset,   start = NULL,   etastart = NULL,   mustart = NULL,   fixef.rm = \"perfect\",   fixef.tol = 1e-06,   fixef.iter = 10000,   collin.tol = 1e-10,   glm.iter = 25,   glm.tol = 1e-08,   nthreads = getFixest_nthreads(),   lean = FALSE,   warn = TRUE,   notes = getFixest_notes(),   mem.clean = FALSE,   verbose = 0,   only.env = FALSE,   only.coef = FALSE,   env,   ... )  fepois(   fml,   data,   vcov,   offset,   weights,   subset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   panel.id,   start = NULL,   etastart = NULL,   mustart = NULL,   fixef,   fixef.rm = \"perfect\",   fixef.tol = 1e-06,   fixef.iter = 10000,   collin.tol = 1e-10,   glm.iter = 25,   glm.tol = 1e-08,   nthreads = getFixest_nthreads(),   lean = FALSE,   warn = TRUE,   notes = getFixest_notes(),   verbose = 0,   combine.quick,   mem.clean = FALSE,   only.env = FALSE,   only.coef = FALSE,   env,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed-effects GLM estimations — feglm","text":"fml formula representing relation estimated. example: fml = z~x+y. include fixed-effects, insert formula using pipe: e.g. fml = z~x+y|fixef_1+fixef_2. Multiple estimations can performed : multiple dep. vars, wrap c(): ex c(y1, y2). multiple indep. vars, use stepwise functions: ex x1 + csw(x2, x3). formula fml = c(y1, y2) ~ x1 + cw0(x2, x3) leads 6 estimation, see details. Square brackets starting dot can used call global variables: y.[] ~ x.[1:2] lead y3 ~ x1 + x2 equal 3 current environment (see details xpd). data data.frame containing necessary variables run model. variables non-linear right hand side formula identified data.frame names. Can also matrix. family Family used estimation. Defaults gaussian(). See family details family functions. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. offset formula numeric vector. offset can added estimation. equal formula, form (example) ~0.5*x**2. offset linearly added elements main formula 'fml'. weights formula numeric vector. observation can weighted, weights must greater 0. equal formula, one-sided: example ~ var_weight. subset vector (logical numeric) one-sided formula. provided, estimation performed observations defined argument. split one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. also want include estimation full sample, use argument fsplit instead. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). fsplit one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. argument split also includes full sample first estimation. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). split.keep character vector. used split, fsplit, supplied. provided, sample split values split.keep. values split.keep partially matched values split. enable regular expressions, need add '@' first. example split.keep = c(\"v1\", \"@|var\") keep value split partially matched \"v1\" values containing \"\" \"var\". split.drop character vector. used split, fsplit, supplied. provided, sample split values split.drop. values split.drop partially matched values split. enable regular expressions, need add '@' first. example split.drop = c(\"v1\", \"@|var\") drop value split partially matched \"v1\" values containing \"\" \"var\". cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. panel.id panel identifiers. Can either : ) one sided formula (e.g. panel.id = ~id+time), ii) character vector length 2 (e.g. panel.id=c('id', 'time'), iii) character scalar two variables separated comma (e.g. panel.id='id,time'). Note can combine variables ^ inside formulas (see dedicated section feols). start Starting values coefficients. Can : ) numeric length 1 (e.g. start = 0), ii) numeric vector exact length number variables, iii) named vector length (names used initialize appropriate coefficients). Default missing. etastart Numeric vector length data. Starting values linear predictor. Default missing. mustart Numeric vector length data. Starting values vector means. Default missing. fixef Character vector. names variables used fixed-effects. variables contain identifier observation (e.g., think panel identifier). Note recommended way include fixed-effects insert directly formula. fixef.rm Can equal \"perfect\" (default), \"singleton\", \"\" \"none\". Controls observations removed. \"perfect\", observations fixed-effect perfect fit (e.g. 0 outcomes Poisson estimations) removed. \"singleton\", observations fixed-effect appears removed. meaning \"\" \"none\" direct. fixef.tol Precision used obtain fixed-effects. Defaults 1e-6. corresponds maximum absolute difference allowed two coefficients successive iterations. fixef.iter Maximum number iterations fixed-effects algorithm (use 2+ fixed-effects). Default 10000. collin.tol Numeric scalar, default 1e-10. Threshold deciding variables considered collinear subsequently removed estimation. Higher values means variables removed (presence collinearity). One signal presence collinearity t-stats extremely low (instance t-stats < 1e-3). glm.iter Number iterations glm algorithm. Default 25. glm.tol Tolerance level glm algorithm. Default 1e-8. nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. lean Logical, default FALSE. TRUE large objects removed returned result: save memory block possibility use many methods. recommended use arguments se cluster obtain appropriate standard-errors estimation time, since obtaining different SEs possible afterwards. warn Logical, default TRUE. Whether warnings displayed (concerns warnings relating convergence state). notes Logical. default, three notes displayed: NAs removed, fixed-effects removed 0 (0/1) outcomes, variable dropped collinearity. avoid displaying messages, can set notes = FALSE. can remove messages permanently using setFixest_notes(FALSE). verbose Integer. Higher values give information. particular, can detail number iterations demeaning algoritmh (first number left-hand-side, numbers right-hand-side variables). can also detail step-halving algorithm. .coef Logical, default FALSE. TRUE, estimated coefficients returned. Note length vector returned always length number coefficients estimated: means variables found collinear returned NA value. combine.quick Logical. combine different variables transform single fixed-effects can e.g. y ~ x | paste(var1, var2). algorithm provides shorthand operation: y ~ x | var1^var2. pasting variables costly operation, internal algorithm may use numerical trick hasten process. cost lose labels. interested getting value fixed-effects coefficients estimation, use combine.quick = FALSE. default equal FALSE number observations lower 50,000, TRUE otherwise. mem.clean Logical, default FALSE. used data set large compared available RAM. TRUE intermediary objects removed much possible gc run substantial C++ section internal code avoid memory issues. .env (Advanced users.) Logical, default FALSE. TRUE, environment used make estimation returned. env (Advanced users.) fixest environment created fixest estimation .env = TRUE. Default missing. provided, data environment used perform estimation. ... currently used. y Numeric vector/matrix/data.frame dependent variable(s). Multiple dependent variables return fixest_multi object. X Numeric matrix regressors. fixef_df Matrix/data.frame fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed-effects GLM estimations — feglm","text":"fixest object. Note fixest objects contain many elements internal use, presented information. access , safer use user-level methods (e.g. vcov.fixest, resid.fixest, etc) functions (like instance fitstat access fit statistic). nobs number observations. fml linear formula call. call call function. method method used estimate model. family family used estimate model. fml_all list containing different parts formula. Always contain linear formula. , relevant: fixef: fixed-effects. nparams number parameters model. fixef_vars names fixed-effect dimension. fixef_id list (length number fixed-effects) fixed-effects identifiers observation. fixef_sizes size fixed-effect (.e. number unique identifierfor fixed-effect dimension). y (relevant.) dependent variable (used compute within-R2 fixed-effects present). convStatus Logical, convergence status IRWLS algorithm. irls_weights weights last iteration IRWLS algorithm. obs_selection (relevant.) List containing vectors integers. represents sequential selection observation vis vis original data set. fixef_removed (relevant.) case fixed-effects observations removed 0/1 outcome within fixed-effect, gives list (fixed-effect dimension) fixed-effect identifiers removed. coefficients named vector estimated coefficients. coeftable table coefficients standard errors, z-values p-values. loglik loglikelihood. deviance Deviance fitted model. iterations Number iterations algorithm. ll_null Log-likelihood null model (.e. intercept ). ssr_null Sum squared residuals null model (containing intercept). pseudo_r2 adjusted pseudo R2. fitted.values fitted values expected value dependent variable fitted model: \\(E(Y|X)\\). linear.predictors linear predictors. residuals residuals (y minus fitted values). sq.cor Squared correlation dependent variable expected predictor (.e. fitted.values) obtained estimation. hessian Hessian parameters. cov.iid variance-covariance matrix parameters. se standard-error parameters. scores matrix scores (first derivative observation). residuals difference dependent variable expected predictor. sumFE sum fixed-effects coefficients observation. offset (relevant.) offset formula. weights (relevant.) weights formula. collin.var (relevant.) Vector containing variables removed collinearity. collin.coef (relevant.) Vector coefficients, values variables removed collinearity NA.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixed-effects GLM estimations — feglm","text":"core GLM weighted OLS estimations. estimations performed feols. method used demean variable along fixed-effects based Berge (2018), since problem solve Gaussian case ML setup.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"combining-the-fixed-effects","dir":"Reference","previous_headings":"","what":"Combining the fixed-effects","title":"Fixed-effects GLM estimations — feglm","text":"can combine two variables make new fixed-effect using ^. syntax follows: fe_1^fe_2. created new variable combination two variables fe_1 fe_2. identical paste0(fe_1, \"_\", fe_2) convenient. Note pasting costly operation, especially large data sets. Thus, internal algorithm uses numerical trick fast, drawback identity observation lost (.e. now equal meaningless number instead equal paste0(fe_1, \"_\", fe_2)). “identities” useful interested value fixed-effects (can extract fixef.fixest). interested coefficients variables, matter. Anyway, can use combine.quick = FALSE tell internal algorithm use paste instead numerical trick. default, numerical trick performed large data sets.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"varying-slopes","dir":"Reference","previous_headings":"","what":"Varying slopes","title":"Fixed-effects GLM estimations — feglm","text":"can add variables varying slopes fixed-effect part formula. syntax follows: fixef_var[var1, var2]. variables var1 var2 varying slopes (one slope per value fixef_var) fixed-effect fixef_var also added. add variables varying slopes fixed-effect, use double square brackets: fixef_var[[var1, var2]]. words: fixef_var[var1, var2] equivalent fixef_var + fixef_var[[var1]] + fixef_var[[var2]] fixef_var[[var1, var2]] equivalent fixef_var[[var1]] + fixef_var[[var2]] general, convergence reasons, recommended always add fixed-effect avoid using variable varying slope (.e. use single square brackets).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"lagging-variables","dir":"Reference","previous_headings":"","what":"Lagging variables","title":"Fixed-effects GLM estimations — feglm","text":"use leads/lags variables estimation, can: ) either provide argument panel.id, ii) either set data set panel function panel, f d. can provide several leads/lags/differences : e.g. formula equal f(y) ~ l(x, -1:1), means dependent variable equal lead y, explanatory variables lead x1, x1 lag x1. See examples function l details.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"interactions","dir":"Reference","previous_headings":"","what":"Interactions","title":"Fixed-effects GLM estimations — feglm","text":"can interact numeric variable \"factor-like\" variable using (factor_var, continuous_var, ref), continuous_var interacted value factor_var argument ref value factor_var taken reference (optional). Using specific way create interactions leads different display interacted values etable. See examples. important note care standard-errors interactions, can add interactions fixed-effects part formula, incomparably faster (using syntax factor_var[continuous_var], explained section “Varying slopes”). function fact arguments, please see details associated help page.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"on-standard-errors","dir":"Reference","previous_headings":"","what":"On standard-errors","title":"Fixed-effects GLM estimations — feglm","text":"Standard-errors can computed different ways, can use arguments se ssc summary.fixest define compute . default, presence fixed-effects, standard-errors automatically clustered. following vignette: standard-errors describes details standard-errors computed fixest can replicate standard-errors software. can use functions setFixest_vcov setFixest_ssc permanently set way standard-errors computed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"multiple-estimations","dir":"Reference","previous_headings":"","what":"Multiple estimations","title":"Fixed-effects GLM estimations — feglm","text":"Multiple estimations can performed , just specified formula. Multiple estimations yield fixest_multi object ‘kind ’ list results includes specific methods access results handy way. Please look dedicated vignette: Multiple estimations. include multiple dependent variables, wrap c() (list() also works). instance fml = c(y1, y2) ~ x1 estimate model fml = y1 ~ x1 model fml = y2 ~ x1. include multiple independent variables, need use stepwise functions. 4 stepwise functions: sw, sw0, csw, csw0, mvsw. course sw stands stepwise, csw cumulative stepwise. Finally mvsw bit special, stands multiverse stepwise. explain . Assume following formula: fml = y ~ x1 + sw(x2, x3). stepwise function sw estimate following two models: y ~ x1 + x2 y ~ x1 + x3. , element sw() sequentially, separately, added formula. used sw0 lieu sw, model y ~ x1 also estimated. 0 name means model without stepwise element also needs estimated. prefix c means cumulative: stepwise element added next. , fml = y ~ x1 + csw(x2, x3) lead following models y ~ x1 + x2 y ~ x1 + x2 + x3. 0 meaning also lead model without stepwise elements estimated: words, fml = y ~ x1 + csw0(x2, x3) leads following three models: y ~ x1, y ~ x1 + x2 y ~ x1 + x2 + x3. Finally mvsw add, stepwise fashion possible combinations variables arguments. example mvsw(x1, x2, x3) equivalent sw0(x1, x2, x3, x1 + x2, x1 + x3, x2 + x3, x1 + x2 + x3). number models estimate grows factorial rate: cautious! Multiple independent variables can combined multiple dependent variables, fml = c(y1, y2) ~ cw(x1, x2, x3) lead 6 estimations. Multiple estimations can also combined split samples (arguments split, fsplit). can also add fixed-effects stepwise fashion. Note perform stepwise estimations IV part formula (feols ). NAs present sample, avoid many messages, NA removal concerning variables common estimations reported. note performance. feature multiple estimations highly optimized feols, particular presence fixed-effects. faster estimate multiple models using formula rather loop. non-feols models using formula roughly similar using loop performance-wise.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"argument-sliding","dir":"Reference","previous_headings":"","what":"Argument sliding","title":"Fixed-effects GLM estimations — feglm","text":"data set set globally using setFixest_estimation(data = data_set), argument vcov can used implicitly. means calls feols(y ~ x, \"HC1\"), feols(y ~ x, ~id), valid: ) data automatically deduced global settings, ii) vcov deduced second argument.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"piping","dir":"Reference","previous_headings":"","what":"Piping","title":"Fixed-effects GLM estimations — feglm","text":"Although argument 'data' placed second position, data can piped estimation functions. example, R >= 4.1, mtcars |> feols(mpg ~ cyl) works feols(mpg ~ cyl, mtcars).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"tricks-to-estimate-multiple-lhs","dir":"Reference","previous_headings":"","what":"Tricks to estimate multiple LHS","title":"Fixed-effects GLM estimations — feglm","text":"use multiple dependent variables fixest estimations, need include vector: like c(y1, y2, y3). First, names stored vector, can readily inserted formula perform multiple estimations using dot square bracket operator. instance my_lhs = c(\"y1\", \"y2\"), calling fixest , say feols(.[my_lhs] ~ x1, etc) equivalent using feols(c(y1, y2) ~ x1, etc). Beware special feature unique left-hand-side fixest estimations (default behavior DSB operator aggregate sums, see xpd). Second, can use regular expression grep left-hand-sides fly. ..(\"regex\") feature used naked LHS, variables grepped inserted c(). example ..(\"Pe\") ~ Sepal.Length, iris equivalent c(Petal.Length, Petal.Width) ~ Sepal.Length, iris. Beware special feature unique left-hand-side fixest estimations (default behavior ..(\"regex\") aggregate sums, see xpd).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"dot-square-bracket-operator-in-formulas","dir":"Reference","previous_headings":"","what":"Dot square bracket operator in formulas","title":"Fixed-effects GLM estimations — feglm","text":"formula, dot square bracket (DSB) operator can: ) create manifold variables , ii) capture values current environment put verbatim formula. Say want include variables x1 x3 formula. can use xpd(y ~ x.[1:3]) get y ~ x1 + x2 + x3. summon values environment, simply put variable square brackets. example: (1:3) xpd(y.[] ~ x) create formulas y1 ~ x y3 ~ x depending value . can include full variable environment way: (y c(\"\", \"b\")) xpd(.[y] ~ x) create two formulas ~ x b ~ x. DSB can even used within variable names, variable must nested character form. example y ~ .[\"x.[1:2]_sq\"] create y ~ x1_sq + x2_sq. Using character form important avoid formula parsing error. Double quotes must used. Note character string nested parsed function dsb, thus return vector. default, DSB operator expands vectors sums. can add comma, like .[, x], expand commas--content can used within functions. instance: c(x.[, 1:2]) create c(x1, x2) (c(x1 + x2)). fixest estimations, special parsing enabled, need use xpd. One-sided formulas can expanded DSB operator: let x = ~sepal + petal, xpd(y ~ .[x]) leads color ~ sepal + petal. can even use multiple square brackets within single variable, use nesting required. example, following xpd(y ~ .[\".[letters[1:2]]_.[1:2]\"]) create y ~ a_1 + b_2. Remember nested character string parsed dsb, explains behavior. element expanded ) equal empty string , ii) length 0, replaced neutral element, namely 1. example, x = \"\" ; xpd(y ~ .[x]) leads y ~ 1.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed-effects GLM estimations — feglm","text":"Berge, Laurent, 2018, \"Efficient estimation maximum likelihood models multiple fixed-effects: R package FENmlm.\" CREA Discussion Papers, 13 (). models multiple fixed-effects: Gaure, Simen, 2013, \"OLS multiple high dimensional category variables\", Computational Statistics & Data Analysis 66 pp. 8--18","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fixed-effects GLM estimations — feglm","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/feglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed-effects GLM estimations — feglm","text":"","code":"# Poisson estimation res = feglm(Sepal.Length ~ Sepal.Width + Petal.Length | Species, iris, \"poisson\")  # You could also use fepois res_pois = fepois(Sepal.Length ~ Sepal.Width + Petal.Length | Species, iris)  # With the fit method: res_fit = feglm.fit(iris$Sepal.Length, iris[, 2:3], iris$Species, \"poisson\")  # All results are identical: etable(res, res_pois, res_fit) #>                                res           res_pois            res_fit #> Dependent Var.:       Sepal.Length       Sepal.Length  iris$Sepal.Length #>                                                                          #> Sepal.Width       0.0778* (0.0339)   0.0778* (0.0339)   0.0778* (0.0339) #> Petal.Length    0.1221*** (0.0150) 0.1221*** (0.0150) 0.1221*** (0.0150) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> Species                        Yes                Yes                 No #> iris$Species                    No                 No                Yes #> _______________ __________________ __________________ __________________ #> S.E.: Clustered        by: Species        by: Species   by: iris$Species #> Observations                   150                150                150 #> Squared Cor.               0.86314            0.86314            0.86314 #> Pseudo R2                  0.02676            0.02676            0.02676 #> BIC                         570.76             570.76             570.76 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Note that you have many more examples in feols  # # Multiple estimations: #  # 6 estimations est_mult = fepois(c(Ozone, Solar.R) ~ Wind + Temp + csw0(Wind:Temp, Day), airquality)  # We can display the results for the first lhs: etable(est_mult[lhs = 1]) #>                 est_mult[lhs = 1].1 est_mult[lhs = ..2 est_mult[lhs = ..3 #> Dependent Var.:               Ozone              Ozone              Ozone #>                                                                           #> Constant          0.5334** (0.1943)   0.8890* (0.4430)   0.8028. (0.4441) #> Wind            -0.0761*** (0.0052) -0.1151** (0.0439) -0.1152** (0.0440) #> Temp             0.0483*** (0.0020) 0.0441*** (0.0051) 0.0444*** (0.0051) #> Wind x Temp                            0.0005 (0.0005)    0.0005 (0.0005) #> Day                                                    0.0051*** (0.0015) #> _______________ ___________________ __________________ __________________ #> S.E. type                       IID                IID                IID #> Observations                    116                116                116 #> Squared Cor.                0.62615            0.63129            0.63379 #> Pseudo R2                   0.53377            0.53402            0.53759 #> BIC                         1,564.7            1,568.7            1,561.5 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # And now the second (access can be made by name) etable(est_mult[lhs = \"Solar.R\"]) #>                 est_mult[lhs = ..1 est_mult[lhs = ..2 est_mult[lhs = \"..3 #> Dependent Var.:            Solar.R            Solar.R             Solar.R #>                                                                           #> Constant         3.777*** (0.0714)  4.343*** (0.1689)   4.529*** (0.1708) #> Wind            0.0119*** (0.0020) -0.0415** (0.0146)  -0.0433** (0.0147) #> Temp            0.0169*** (0.0008) 0.0098*** (0.0021)  0.0088*** (0.0021) #> Wind x Temp                        0.0007*** (0.0002)  0.0007*** (0.0002) #> Day                                                   -0.0061*** (0.0007) #> _______________ __________________ __________________ ___________________ #> S.E. type                      IID                IID                 IID #> Observations                   146                146                 146 #> Squared Cor.               0.08076            0.08166             0.08983 #> Pseudo R2                  0.06045            0.06207             0.07100 #> BIC                        8,192.6            8,183.5             8,110.7 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Now we focus on the two last right hand sides # (note that .N can be used to specify the last item) etable(est_mult[rhs = 2:.N]) #>                 est_mult[rhs = ..1 est_mult[rhs = ..2 est_mult[rhs = ..3 #> Dependent Var.:              Ozone            Solar.R              Ozone #>                                                                          #> Constant          0.8890* (0.4430)  4.343*** (0.1689)   0.8028. (0.4441) #> Wind            -0.1151** (0.0439) -0.0415** (0.0146) -0.1152** (0.0440) #> Temp            0.0441*** (0.0051) 0.0098*** (0.0021) 0.0444*** (0.0051) #> Wind x Temp        0.0005 (0.0005) 0.0007*** (0.0002)    0.0005 (0.0005) #> Day                                                   0.0051*** (0.0015) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   116                146                116 #> Squared Cor.               0.63129            0.08166            0.63379 #> Pseudo R2                  0.53402            0.06207            0.53759 #> BIC                        1,568.7            8,183.5            1,561.5 #>  #>                 est_mult[rhs = 2..4 #> Dependent Var.:             Solar.R #>                                     #> Constant          4.529*** (0.1708) #> Wind             -0.0433** (0.0147) #> Temp             0.0088*** (0.0021) #> Wind x Temp      0.0007*** (0.0002) #> Day             -0.0061*** (0.0007) #> _______________ ___________________ #> S.E. type                       IID #> Observations                    146 #> Squared Cor.                0.08983 #> Pseudo R2                   0.07100 #> BIC                         8,110.7 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Combining with split est_split = fepois(c(Ozone, Solar.R) ~ sw(poly(Wind, 2), poly(Temp, 2)),                   airquality, split = ~ Month)  # You can display everything at once with the print method est_split #> Standard-errors: IID  #>  #>  #> # SAMPLE: 5 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     3.30403   0.042415  77.89732  < 2.2e-16 *** #> poly(Wind, 2)1 -6.41466   0.617300 -10.39149  < 2.2e-16 *** #> poly(Wind, 2)2  3.07584   0.570194   5.39437 6.8765e-08 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     4.05816   0.109394 37.09674  < 2.2e-16 *** #> poly(Temp, 2)1 11.28467   1.448123  7.79261 6.5637e-15 *** #> poly(Temp, 2)2  2.50568   1.171805  2.13830 3.2492e-02 *   #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     5.207784   0.018194 286.23787  < 2.2e-16 *** #> poly(Wind, 2)1 -0.569626   0.271696  -2.09656 3.6033e-02 *   #> poly(Wind, 2)2 -1.834732   0.250895  -7.31274 2.6176e-13 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     5.10262   0.052341  97.48802 < 2.2e-16 *** #> poly(Temp, 2)1 -2.63000   0.635659  -4.13744 3.512e-05 *** #> poly(Temp, 2)2 -5.59769   0.432368 -12.94657 < 2.2e-16 *** #>  #>  #> # SAMPLE: 6 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)     3.07100   0.124756 24.61599 < 2.2e-16 *** #> poly(Wind, 2)1  6.09901   1.922777  3.17198  0.001514 **  #> poly(Wind, 2)2 -2.28442   1.031893 -2.21381  0.026842 *   #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.41843   0.080824 42.29472  < 2.2e-16 *** #> poly(Temp, 2)1  3.26499   1.293450  2.52425 0.01159456 *   #> poly(Temp, 2)2  5.66897   1.562592  3.62792 0.00028571 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     5.218537   0.014191 367.74415  < 2.2e-16 *** #> poly(Wind, 2)1  2.220448   0.177688  12.49633  < 2.2e-16 *** #> poly(Wind, 2)2 -0.624761   0.139873  -4.46664 7.9458e-06 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error    t value  Pr(>|t|)     #> (Intercept)    5.200307   0.019697 264.014030 < 2.2e-16 *** #> poly(Temp, 2)1 3.286120   0.364969   9.003834 < 2.2e-16 *** #> poly(Temp, 2)2 0.155763   0.322767   0.482586   0.62939     #>  #>  #> # SAMPLE: 7 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)     3.778200   0.043180 87.49820 < 2.2e-16 *** #> poly(Wind, 2)1 -6.722474   0.703358 -9.55768 < 2.2e-16 *** #> poly(Wind, 2)2 -0.959048   0.681576 -1.40710    0.1594     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     2.59501   0.190413 13.62828  < 2.2e-16 *** #> poly(Temp, 2)1 24.89459   3.062021  8.13011 4.2888e-16 *** #> poly(Temp, 2)2 -8.57801   1.768706 -4.84988 1.2354e-06 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error    t value  Pr(>|t|)     #> (Intercept)     5.360516   0.014178 378.099115 < 2.2e-16 *** #> poly(Wind, 2)1 -0.682752   0.216716  -3.150439 0.0016303 **  #> poly(Wind, 2)2  0.013888   0.277451   0.050054 0.9600792     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     5.10937   0.056186 90.93638  < 2.2e-16 *** #> poly(Temp, 2)1  4.82809   0.928155  5.20181 1.9735e-07 *** #> poly(Temp, 2)2 -1.11475   0.615860 -1.81007 7.0285e-02 .   #>  #>  #> # SAMPLE: 8 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     3.755844   0.041522 90.453699 < 2.2e-16 *** #> poly(Wind, 2)1 -6.956477   0.697914 -9.967528 < 2.2e-16 *** #> poly(Wind, 2)2 -0.344133   0.486153 -0.707869   0.47903     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.14340   0.097610 32.20355  < 2.2e-16 *** #> poly(Temp, 2)1 17.29925   1.746264  9.90643  < 2.2e-16 *** #> poly(Temp, 2)2 -5.78006   0.896709 -6.44586 1.1495e-10 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     5.134474   0.016224 316.48225 < 2.2e-16 *** #> poly(Wind, 2)1 -0.459093   0.272152  -1.68690 0.0916227 .   #> poly(Wind, 2)2  0.683835   0.246613   2.77291 0.0055558 **  #> --- #> Expl. vars.: poly(Temp, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     4.926595   0.041382 119.05115  < 2.2e-16 *** #> poly(Temp, 2)1  4.222008   0.816701   5.16959 2.3461e-07 *** #> poly(Temp, 2)2 -0.794082   0.462440  -1.71716 8.5950e-02 .   #>  #>  #> # SAMPLE: 9 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.36418   0.036953 91.04039  < 2.2e-16 *** #> poly(Wind, 2)1 -4.04407   0.492839 -8.20566 2.2933e-16 *** #> poly(Wind, 2)2  2.98908   0.470324  6.35536 2.0794e-10 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.36946   0.038292 87.99344  < 2.2e-16 *** #> poly(Temp, 2)1  6.10018   0.690949  8.82870  < 2.2e-16 *** #> poly(Temp, 2)2  2.25482   0.627045  3.59595 0.00032321 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error    t value  Pr(>|t|)     #> (Intercept)     5.122995   0.014639 349.966703 < 2.2e-16 *** #> poly(Wind, 2)1 -0.564257   0.193672  -2.913473 0.0035743 **  #> poly(Wind, 2)2  0.144413   0.224957   0.641955 0.5209022     #> --- #> Expl. vars.: poly(Temp, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     5.111358   0.015302 334.02914  < 2.2e-16 *** #> poly(Temp, 2)1  1.286054   0.251169   5.12026 3.0511e-07 *** #> poly(Temp, 2)2 -0.928769   0.260074  -3.57117 3.5539e-04 ***  # Different way of displaying the results with \"compact\" summary(est_split, \"compact\") #>    sample     lhs           rhs     (Intercept)   poly(Wind, 2)1 #> 1       5 Ozone   poly(Wind, 2) 3.30*** (0.042) -6.41*** (0.617) #> 2       5 Ozone   poly(Temp, 2) 4.06*** (0.109)                  #> 3       5 Solar.R poly(Wind, 2) 5.21*** (0.018)  -0.570* (0.272) #> 4       5 Solar.R poly(Temp, 2) 5.10*** (0.052)                  #> 5       6 Ozone   poly(Wind, 2) 3.07*** (0.125)   6.10** (1.92)  #> 6       6 Ozone   poly(Temp, 2) 3.42*** (0.081)                  #> 7       6 Solar.R poly(Wind, 2) 5.22*** (0.014)  2.22*** (0.178) #> 8       6 Solar.R poly(Temp, 2) 5.20*** (0.020)                  #> 9       7 Ozone   poly(Wind, 2) 3.78*** (0.043) -6.72*** (0.703) #> 10      7 Ozone   poly(Temp, 2) 2.60*** (0.190)                  #> 11      7 Solar.R poly(Wind, 2) 5.36*** (0.014) -0.683** (0.217) #> 12      7 Solar.R poly(Temp, 2) 5.11*** (0.056)                  #> 13      8 Ozone   poly(Wind, 2) 3.76*** (0.042) -6.96*** (0.698) #> 14      8 Ozone   poly(Temp, 2) 3.14*** (0.098)                  #> 15      8 Solar.R poly(Wind, 2) 5.13*** (0.016)  -0.459. (0.272) #> 16      8 Solar.R poly(Temp, 2) 4.93*** (0.041)                  #> 17      9 Ozone   poly(Wind, 2) 3.36*** (0.037) -4.04*** (0.493) #> 18      9 Ozone   poly(Temp, 2) 3.37*** (0.038)                  #> 19      9 Solar.R poly(Wind, 2) 5.12*** (0.015) -0.564** (0.194) #> 20      9 Solar.R poly(Temp, 2) 5.11*** (0.015)                  #>       poly(Wind, 2)2   poly(Temp, 2)1    poly(Temp, 2)2 #> 1    3.08*** (0.570)                                    #> 2                     11.3*** (1.45)      2.51* (1.17)  #> 3   -1.83*** (0.251)                                    #> 4                    -2.63*** (0.636)  -5.60*** (0.432) #> 5     -2.28* (1.03)                                     #> 6                       3.26* (1.29)    5.67*** (1.56)  #> 7  -0.625*** (0.140)                                    #> 8                     3.29*** (0.365)     0.156 (0.323) #> 9     -0.959 (0.682)                                    #> 10                    24.9*** (3.06)   -8.58*** (1.77)  #> 11     0.014 (0.277)                                    #> 12                    4.83*** (0.928)    -1.11. (0.616) #> 13    -0.344 (0.486)                                    #> 14                    17.3*** (1.75)   -5.78*** (0.897) #> 15   0.684** (0.247)                                    #> 16                    4.22*** (0.817)   -0.794. (0.462) #> 17   2.99*** (0.470)                                    #> 18                    6.10*** (0.691)   2.25*** (0.627) #> 19     0.144 (0.225)                                    #> 20                    1.29*** (0.251) -0.929*** (0.260)  # You can still select which sample/LHS/RHS to display est_split[sample = 1:2, lhs = 1, rhs = 1] #> Standard-errors: IID  #> Dep. var.: Ozone #> Expl. vars.: poly(Wind, 2) #> Sample: 5 #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     3.30403   0.042415  77.89732  < 2.2e-16 *** #> poly(Wind, 2)1 -6.41466   0.617300 -10.39149  < 2.2e-16 *** #> poly(Wind, 2)2  3.07584   0.570194   5.39437 6.8765e-08 *** #> --- #> Sample: 6 #>                Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)     3.07100   0.124756 24.61599 < 2.2e-16 *** #> poly(Wind, 2)1  6.09901   1.922777  3.17198  0.001514 **  #> poly(Wind, 2)2 -2.28442   1.031893 -2.21381  0.026842 *"},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed-effects maximum likelihood models — femlm","title":"Fixed-effects maximum likelihood models — femlm","text":"function estimates maximum likelihood models number fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed-effects maximum likelihood models — femlm","text":"","code":"femlm(   fml,   data,   family = c(\"poisson\", \"negbin\", \"logit\", \"gaussian\"),   vcov,   start = 0,   fixef,   fixef.rm = \"perfect\",   offset,   subset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   panel.id,   fixef.tol = 1e-05,   fixef.iter = 10000,   nthreads = getFixest_nthreads(),   lean = FALSE,   verbose = 0,   warn = TRUE,   notes = getFixest_notes(),   theta.init,   combine.quick,   mem.clean = FALSE,   only.env = FALSE,   only.coef = FALSE,   env,   ... )  fenegbin(   fml,   data,   vcov,   theta.init,   start = 0,   fixef,   fixef.rm = \"perfect\",   offset,   subset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   panel.id,   fixef.tol = 1e-05,   fixef.iter = 10000,   nthreads = getFixest_nthreads(),   lean = FALSE,   verbose = 0,   warn = TRUE,   notes = getFixest_notes(),   combine.quick,   mem.clean = FALSE,   only.env = FALSE,   only.coef = FALSE,   env,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed-effects maximum likelihood models — femlm","text":"fml formula representing relation estimated. example: fml = z~x+y. include fixed-effects, insert formula using pipe: e.g. fml = z~x+y|fixef_1+fixef_2. Multiple estimations can performed : multiple dep. vars, wrap c(): ex c(y1, y2). multiple indep. vars, use stepwise functions: ex x1 + csw(x2, x3). formula fml = c(y1, y2) ~ x1 + cw0(x2, x3) leads 6 estimation, see details. Square brackets starting dot can used call global variables: y.[] ~ x.[1:2] lead y3 ~ x1 + x2 equal 3 current environment (see details xpd). data data.frame containing necessary variables run model. variables non-linear right hand side formula identified data.frame names. Can also matrix. family Character scalar. provide family. possible values \"poisson\" (Poisson model log-link, default), \"negbin\" (Negative Binomial model log-link), \"logit\" (LOGIT model log-link), \"gaussian\" (Gaussian model). vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. start Starting values coefficients. Can : ) numeric length 1 (e.g. start = 0, default), ii) numeric vector exact length number variables, iii) named vector length (names used initialize appropriate coefficients). fixef Character vector. names variables used fixed-effects. variables contain identifier observation (e.g., think panel identifier). Note recommended way include fixed-effects insert directly formula. fixef.rm Can equal \"perfect\" (default), \"singleton\", \"\" \"none\". Controls observations removed. \"perfect\", observations fixed-effect perfect fit (e.g. 0 outcomes Poisson estimations) removed. \"singleton\", observations fixed-effect appears removed. meaning \"\" \"none\" direct. offset formula numeric vector. offset can added estimation. equal formula, form (example) ~0.5*x**2. offset linearly added elements main formula 'fml'. subset vector (logical numeric) one-sided formula. provided, estimation performed observations defined argument. split one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. also want include estimation full sample, use argument fsplit instead. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). fsplit one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. argument split also includes full sample first estimation. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). split.keep character vector. used split, fsplit, supplied. provided, sample split values split.keep. values split.keep partially matched values split. enable regular expressions, need add '@' first. example split.keep = c(\"v1\", \"@|var\") keep value split partially matched \"v1\" values containing \"\" \"var\". split.drop character vector. used split, fsplit, supplied. provided, sample split values split.drop. values split.drop partially matched values split. enable regular expressions, need add '@' first. example split.drop = c(\"v1\", \"@|var\") drop value split partially matched \"v1\" values containing \"\" \"var\". cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. panel.id panel identifiers. Can either : ) one sided formula (e.g. panel.id = ~id+time), ii) character vector length 2 (e.g. panel.id=c('id', 'time'), iii) character scalar two variables separated comma (e.g. panel.id='id,time'). Note can combine variables ^ inside formulas (see dedicated section feols). fixef.tol Precision used obtain fixed-effects. Defaults 1e-5. corresponds maximum absolute difference allowed two coefficients successive iterations. Argument fixef.tol lower 10000*.Machine$double.eps. Note parameter dynamically controlled algorithm. fixef.iter Maximum number iterations fixed-effects algorithm (use 2+ fixed-effects). Default 10000. nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. lean Logical, default FALSE. TRUE large objects removed returned result: save memory block possibility use many methods. recommended use arguments se cluster obtain appropriate standard-errors estimation time, since obtaining different SEs possible afterwards. verbose Integer, default 0. represents level information reported optimisation process. verbose=0: nothing reported. verbose=1: value coefficients likelihood reported. verbose=2: 1 + information computing time null model, fixed-effects coefficients hessian reported. warn Logical, default TRUE. Whether warnings displayed (concerns warnings relating convergence state). notes Logical. default, two notes displayed: NAs removed (show additional information) observations removed 0 (0/1) outcomes fixed-effect setup (Poisson/Neg. Bin./Logit models). avoid displaying messages, can set notes = FALSE. can remove messages permanently using setFixest_notes(FALSE). theta.init Positive numeric scalar. starting value dispersion parameter family=\"negbin\". default, algorithm uses starting value theta obtained model intercept. combine.quick Logical. combine different variables transform single fixed-effects can e.g. y ~ x | paste(var1, var2). algorithm provides shorthand operation: y ~ x | var1^var2. pasting variables costly operation, internal algorithm may use numerical trick hasten process. cost lose labels. interested getting value fixed-effects coefficients estimation, use combine.quick = FALSE. default equal FALSE number observations lower 50,000, TRUE otherwise. mem.clean Logical, default FALSE. used data set large compared available RAM. TRUE intermediary objects removed much possible gc run substantial C++ section internal code avoid memory issues. .env (Advanced users.) Logical, default FALSE. TRUE, environment used make estimation returned. .coef Logical, default FALSE. TRUE, estimated coefficients returned. Note length vector returned always length number coefficients estimated: means variables found collinear returned NA value. env (Advanced users.) fixest environment created fixest estimation .env = TRUE. Default missing. provided, data environment used perform estimation. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed-effects maximum likelihood models — femlm","text":"fixest object. Note fixest objects contain many elements internal use, presented information. access , safer use user-level methods (e.g. vcov.fixest, resid.fixest, etc) functions (like instance fitstat access fit statistic). nobs number observations. fml linear formula call. call call function. method method used estimate model. family family used estimate model. fml_all list containing different parts formula. Always contain linear formula. , relevant: fixef: fixed-effects; NL: non linear part formula. nparams number parameters model. fixef_vars names fixed-effect dimension. fixef_id list (length number fixed-effects) fixed-effects identifiers observation. fixef_sizes size fixed-effect (.e. number unique identifierfor fixed-effect dimension). convStatus Logical, convergence status. message convergence message optimization procedures. obs_selection (relevant.) List containing vectors integers. represents sequential selection observation vis vis original data set. fixef_removed (relevant.) case fixed-effects observations removed 0/1 outcome within fixed-effect, gives list (fixed-effect dimension) fixed-effect identifiers removed. coefficients named vector estimated coefficients. coeftable table coefficients standard errors, z-values p-values. loglik log-likelihood. iterations Number iterations algorithm. ll_null Log-likelihood null model (.e. intercept ). ll_fe_only Log-likelihood model fixed-effects. ssr_null Sum squared residuals null model (containing intercept). pseudo_r2 adjusted pseudo R2. fitted.values fitted values expected value dependent variable fitted model: \\(E(Y|X)\\). residuals residuals (y minus fitted values). sq.cor Squared correlation dependent variable expected predictor (.e. fitted.values) obtained estimation. hessian Hessian parameters. cov.iid variance-covariance matrix parameters. se standard-error parameters. scores matrix scores (first derivative observation). residuals difference dependent variable expected predictor. sumFE sum fixed-effects coefficients observation. offset (relevant.) offset formula. weights (relevant.) weights formula.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixed-effects maximum likelihood models — femlm","text":"Note functions feglm femlm provide results using families differ latter direct maximum likelihood optimization (two can really different convergence rates).","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"combining-the-fixed-effects","dir":"Reference","previous_headings":"","what":"Combining the fixed-effects","title":"Fixed-effects maximum likelihood models — femlm","text":"can combine two variables make new fixed-effect using ^. syntax follows: fe_1^fe_2. created new variable combination two variables fe_1 fe_2. identical paste0(fe_1, \"_\", fe_2) convenient. Note pasting costly operation, especially large data sets. Thus, internal algorithm uses numerical trick fast, drawback identity observation lost (.e. now equal meaningless number instead equal paste0(fe_1, \"_\", fe_2)). “identities” useful interested value fixed-effects (can extract fixef.fixest). interested coefficients variables, matter. Anyway, can use combine.quick = FALSE tell internal algorithm use paste instead numerical trick. default, numerical trick performed large data sets.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"lagging-variables","dir":"Reference","previous_headings":"","what":"Lagging variables","title":"Fixed-effects maximum likelihood models — femlm","text":"use leads/lags variables estimation, can: ) either provide argument panel.id, ii) either set data set panel function panel, f d. can provide several leads/lags/differences : e.g. formula equal f(y) ~ l(x, -1:1), means dependent variable equal lead y, explanatory variables lead x1, x1 lag x1. See examples function l details.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"interactions","dir":"Reference","previous_headings":"","what":"Interactions","title":"Fixed-effects maximum likelihood models — femlm","text":"can interact numeric variable \"factor-like\" variable using (factor_var, continuous_var, ref), continuous_var interacted value factor_var argument ref value factor_var taken reference (optional). Using specific way create interactions leads different display interacted values etable. See examples. important note care standard-errors interactions, can add interactions fixed-effects part formula, incomparably faster (using syntax factor_var[continuous_var], explained section “Varying slopes”). function fact arguments, please see details associated help page.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"on-standard-errors","dir":"Reference","previous_headings":"","what":"On standard-errors","title":"Fixed-effects maximum likelihood models — femlm","text":"Standard-errors can computed different ways, can use arguments se ssc summary.fixest define compute . default, presence fixed-effects, standard-errors automatically clustered. following vignette: standard-errors describes details standard-errors computed fixest can replicate standard-errors software. can use functions setFixest_vcov setFixest_ssc permanently set way standard-errors computed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"multiple-estimations","dir":"Reference","previous_headings":"","what":"Multiple estimations","title":"Fixed-effects maximum likelihood models — femlm","text":"Multiple estimations can performed , just specified formula. Multiple estimations yield fixest_multi object ‘kind ’ list results includes specific methods access results handy way. Please look dedicated vignette: Multiple estimations. include multiple dependent variables, wrap c() (list() also works). instance fml = c(y1, y2) ~ x1 estimate model fml = y1 ~ x1 model fml = y2 ~ x1. include multiple independent variables, need use stepwise functions. 4 stepwise functions: sw, sw0, csw, csw0, mvsw. course sw stands stepwise, csw cumulative stepwise. Finally mvsw bit special, stands multiverse stepwise. explain . Assume following formula: fml = y ~ x1 + sw(x2, x3). stepwise function sw estimate following two models: y ~ x1 + x2 y ~ x1 + x3. , element sw() sequentially, separately, added formula. used sw0 lieu sw, model y ~ x1 also estimated. 0 name means model without stepwise element also needs estimated. prefix c means cumulative: stepwise element added next. , fml = y ~ x1 + csw(x2, x3) lead following models y ~ x1 + x2 y ~ x1 + x2 + x3. 0 meaning also lead model without stepwise elements estimated: words, fml = y ~ x1 + csw0(x2, x3) leads following three models: y ~ x1, y ~ x1 + x2 y ~ x1 + x2 + x3. Finally mvsw add, stepwise fashion possible combinations variables arguments. example mvsw(x1, x2, x3) equivalent sw0(x1, x2, x3, x1 + x2, x1 + x3, x2 + x3, x1 + x2 + x3). number models estimate grows factorial rate: cautious! Multiple independent variables can combined multiple dependent variables, fml = c(y1, y2) ~ cw(x1, x2, x3) lead 6 estimations. Multiple estimations can also combined split samples (arguments split, fsplit). can also add fixed-effects stepwise fashion. Note perform stepwise estimations IV part formula (feols ). NAs present sample, avoid many messages, NA removal concerning variables common estimations reported. note performance. feature multiple estimations highly optimized feols, particular presence fixed-effects. faster estimate multiple models using formula rather loop. non-feols models using formula roughly similar using loop performance-wise.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"argument-sliding","dir":"Reference","previous_headings":"","what":"Argument sliding","title":"Fixed-effects maximum likelihood models — femlm","text":"data set set globally using setFixest_estimation(data = data_set), argument vcov can used implicitly. means calls feols(y ~ x, \"HC1\"), feols(y ~ x, ~id), valid: ) data automatically deduced global settings, ii) vcov deduced second argument.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"piping","dir":"Reference","previous_headings":"","what":"Piping","title":"Fixed-effects maximum likelihood models — femlm","text":"Although argument 'data' placed second position, data can piped estimation functions. example, R >= 4.1, mtcars |> feols(mpg ~ cyl) works feols(mpg ~ cyl, mtcars).","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"tricks-to-estimate-multiple-lhs","dir":"Reference","previous_headings":"","what":"Tricks to estimate multiple LHS","title":"Fixed-effects maximum likelihood models — femlm","text":"use multiple dependent variables fixest estimations, need include vector: like c(y1, y2, y3). First, names stored vector, can readily inserted formula perform multiple estimations using dot square bracket operator. instance my_lhs = c(\"y1\", \"y2\"), calling fixest , say feols(.[my_lhs] ~ x1, etc) equivalent using feols(c(y1, y2) ~ x1, etc). Beware special feature unique left-hand-side fixest estimations (default behavior DSB operator aggregate sums, see xpd). Second, can use regular expression grep left-hand-sides fly. ..(\"regex\") feature used naked LHS, variables grepped inserted c(). example ..(\"Pe\") ~ Sepal.Length, iris equivalent c(Petal.Length, Petal.Width) ~ Sepal.Length, iris. Beware special feature unique left-hand-side fixest estimations (default behavior ..(\"regex\") aggregate sums, see xpd).","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"dot-square-bracket-operator-in-formulas","dir":"Reference","previous_headings":"","what":"Dot square bracket operator in formulas","title":"Fixed-effects maximum likelihood models — femlm","text":"formula, dot square bracket (DSB) operator can: ) create manifold variables , ii) capture values current environment put verbatim formula. Say want include variables x1 x3 formula. can use xpd(y ~ x.[1:3]) get y ~ x1 + x2 + x3. summon values environment, simply put variable square brackets. example: (1:3) xpd(y.[] ~ x) create formulas y1 ~ x y3 ~ x depending value . can include full variable environment way: (y c(\"\", \"b\")) xpd(.[y] ~ x) create two formulas ~ x b ~ x. DSB can even used within variable names, variable must nested character form. example y ~ .[\"x.[1:2]_sq\"] create y ~ x1_sq + x2_sq. Using character form important avoid formula parsing error. Double quotes must used. Note character string nested parsed function dsb, thus return vector. default, DSB operator expands vectors sums. can add comma, like .[, x], expand commas--content can used within functions. instance: c(x.[, 1:2]) create c(x1, x2) (c(x1 + x2)). fixest estimations, special parsing enabled, need use xpd. One-sided formulas can expanded DSB operator: let x = ~sepal + petal, xpd(y ~ .[x]) leads color ~ sepal + petal. can even use multiple square brackets within single variable, use nesting required. example, following xpd(y ~ .[\".[letters[1:2]]_.[1:2]\"]) create y ~ a_1 + b_2. Remember nested character string parsed dsb, explains behavior. element expanded ) equal empty string , ii) length 0, replaced neutral element, namely 1. example, x = \"\" ; xpd(y ~ .[x]) leads y ~ 1.","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed-effects maximum likelihood models — femlm","text":"Berge, Laurent, 2018, \"Efficient estimation maximum likelihood models multiple fixed-effects: R package FENmlm.\" CREA Discussion Papers, 13 (). models multiple fixed-effects: Gaure, Simen, 2013, \"OLS multiple high dimensional category variables\", Computational Statistics & Data Analysis 66 pp. 8--18 unconditionnal Negative Binomial model: Allison, Paul D Waterman, Richard P, 2002, \"Fixed-Effects Negative Binomial Regression Models\", Sociological Methodology 32(1) pp. 247--265","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fixed-effects maximum likelihood models — femlm","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/femlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed-effects maximum likelihood models — femlm","text":"","code":"# Load trade data data(trade)  # We estimate the effect of distance on trade => we account for 3 fixed-effects # 1) Poisson estimation est_pois = femlm(Euros ~ log(dist_km) | Origin + Destination + Product, trade)  # 2) Log-Log Gaussian estimation (with same FEs) est_gaus = update(est_pois, log(Euros+1) ~ ., family = \"gaussian\")  # Comparison of the results using the function etable etable(est_pois, est_gaus) #>                           est_pois           est_gaus #> Dependent Var.:              Euros       log(Euros+1) #>                                                       #> log(dist_km)    -1.528*** (0.1156) -2.168*** (0.1542) #> Fixed-Effects:  ------------------ ------------------ #> Origin                         Yes                Yes #> Destination                    Yes                Yes #> Product                        Yes                Yes #> _______________ __________________ __________________ #> Family                     Poisson           Gaussian #> S.E.: Clustered         by: Origin         by: Origin #> Observations                38,325             38,325 #> Squared Cor.               0.60377            0.70434 #> Pseudo R2                  0.76039            0.23563 #> BIC                       1.43e+12          152,008.4 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Now using two way clustered standard-errors etable(est_pois, est_gaus, se = \"twoway\") #>                           est_pois           est_gaus #> Dependent Var.:              Euros       log(Euros+1) #>                                                       #> log(dist_km)    -1.528*** (0.1307) -2.168*** (0.1712) #> Fixed-Effects:  ------------------ ------------------ #> Origin                         Yes                Yes #> Destination                    Yes                Yes #> Product                        Yes                Yes #> _______________ __________________ __________________ #> Family                     Poisson           Gaussian #> S.E.: Clustered  by: Orig. & Dest.  by: Orig. & Dest. #> Observations                38,325             38,325 #> Squared Cor.               0.60377            0.70434 #> Pseudo R2                  0.76039            0.23563 #> BIC                       1.43e+12          152,008.4 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Comparing different types of standard errors sum_hetero   = summary(est_pois, se = \"hetero\") sum_oneway   = summary(est_pois, se = \"cluster\") sum_twoway   = summary(est_pois, se = \"twoway\") sum_threeway = summary(est_pois, se = \"threeway\")  etable(sum_hetero, sum_oneway, sum_twoway, sum_threeway) #>                         sum_hetero         sum_oneway         sum_twoway #> Dependent Var.:              Euros              Euros              Euros #>                                                                          #> log(dist_km)    -1.528*** (0.0220) -1.528*** (0.1156) -1.528*** (0.1307) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> Origin                         Yes                Yes                Yes #> Destination                    Yes                Yes                Yes #> Product                        Yes                Yes                Yes #> _______________ __________________ __________________ __________________ #> S.E. type       Heteroskedas.-rob.         by: Origin  by: Orig. & Dest. #> Observations                38,325             38,325             38,325 #> Squared Cor.               0.60377            0.60377            0.60377 #> Pseudo R2                  0.76039            0.76039            0.76039 #> BIC                       1.43e+12           1.43e+12           1.43e+12 #>  #>                              sum_threeway #> Dependent Var.:                     Euros #>                                           #> log(dist_km)           -1.528*** (0.1340) #> Fixed-Effects:         ------------------ #> Origin                                Yes #> Destination                           Yes #> Product                               Yes #> _______________        __________________ #> S.E. type       by: Orig. & Dest. & Prod. #> Observations                       38,325 #> Squared Cor.                      0.60377 #> Pseudo R2                         0.76039 #> BIC                              1.43e+12 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # Multiple estimations: #  # 6 estimations est_mult = femlm(c(Ozone, Solar.R) ~ Wind + Temp + csw0(Wind:Temp, Day), airquality)  # We can display the results for the first lhs: etable(est_mult[lhs = 1]) #>                 est_mult[lhs = 1].1 est_mult[lhs = ..2 est_mult[lhs = ..3 #> Dependent Var.:               Ozone              Ozone              Ozone #>                                                                           #> Constant          0.5334** (0.1943)   0.8890* (0.4430)   0.8028. (0.4441) #> Wind            -0.0761*** (0.0052) -0.1151** (0.0439) -0.1152** (0.0440) #> Temp             0.0483*** (0.0020) 0.0441*** (0.0051) 0.0444*** (0.0051) #> Wind x Temp                            0.0005 (0.0005)    0.0005 (0.0005) #> Day                                                    0.0051*** (0.0015) #> _______________ ___________________ __________________ __________________ #> S.E. type                       IID                IID                IID #> Observations                    116                116                116 #> Squared Cor.                0.62615            0.63129            0.63379 #> Pseudo R2                   0.53377            0.53402            0.53759 #> BIC                         1,564.7            1,568.7            1,561.5 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # And now the second (access can be made by name) etable(est_mult[lhs = \"Solar.R\"]) #>                 est_mult[lhs = ..1 est_mult[lhs = ..2 est_mult[lhs = \"..3 #> Dependent Var.:            Solar.R            Solar.R             Solar.R #>                                                                           #> Constant         3.777*** (0.0714)  4.343*** (0.1689)   4.529*** (0.1708) #> Wind            0.0119*** (0.0020) -0.0415** (0.0146)  -0.0433** (0.0147) #> Temp            0.0169*** (0.0008) 0.0098*** (0.0021)  0.0088*** (0.0021) #> Wind x Temp                        0.0007*** (0.0002)  0.0007*** (0.0002) #> Day                                                   -0.0061*** (0.0007) #> _______________ __________________ __________________ ___________________ #> S.E. type                      IID                IID                 IID #> Observations                   146                146                 146 #> Squared Cor.               0.08076            0.08166             0.08983 #> Pseudo R2                  0.06045            0.06207             0.07100 #> BIC                        8,192.6            8,183.5             8,110.7 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Now we focus on the two last right hand sides # (note that .N can be used to specify the last item) etable(est_mult[rhs = 2:.N]) #>                 est_mult[rhs = ..1 est_mult[rhs = ..2 est_mult[rhs = ..3 #> Dependent Var.:              Ozone            Solar.R              Ozone #>                                                                          #> Constant          0.8890* (0.4430)  4.343*** (0.1689)   0.8028. (0.4441) #> Wind            -0.1151** (0.0439) -0.0415** (0.0146) -0.1152** (0.0440) #> Temp            0.0441*** (0.0051) 0.0098*** (0.0021) 0.0444*** (0.0051) #> Wind x Temp        0.0005 (0.0005) 0.0007*** (0.0002)    0.0005 (0.0005) #> Day                                                   0.0051*** (0.0015) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   116                146                116 #> Squared Cor.               0.63129            0.08166            0.63379 #> Pseudo R2                  0.53402            0.06207            0.53759 #> BIC                        1,568.7            8,183.5            1,561.5 #>  #>                 est_mult[rhs = 2..4 #> Dependent Var.:             Solar.R #>                                     #> Constant          4.529*** (0.1708) #> Wind             -0.0433** (0.0147) #> Temp             0.0088*** (0.0021) #> Wind x Temp      0.0007*** (0.0002) #> Day             -0.0061*** (0.0007) #> _______________ ___________________ #> S.E. type                       IID #> Observations                    146 #> Squared Cor.                0.08983 #> Pseudo R2                   0.07100 #> BIC                         8,110.7 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Combining with split est_split = fepois(c(Ozone, Solar.R) ~ sw(poly(Wind, 2), poly(Temp, 2)),                   airquality, split = ~ Month)  # You can display everything at once with the print method est_split #> Standard-errors: IID  #>  #>  #> # SAMPLE: 5 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     3.30403   0.042415  77.89732  < 2.2e-16 *** #> poly(Wind, 2)1 -6.41466   0.617300 -10.39149  < 2.2e-16 *** #> poly(Wind, 2)2  3.07584   0.570194   5.39437 6.8765e-08 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     4.05816   0.109394 37.09674  < 2.2e-16 *** #> poly(Temp, 2)1 11.28467   1.448123  7.79261 6.5637e-15 *** #> poly(Temp, 2)2  2.50568   1.171805  2.13830 3.2492e-02 *   #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     5.207784   0.018194 286.23787  < 2.2e-16 *** #> poly(Wind, 2)1 -0.569626   0.271696  -2.09656 3.6033e-02 *   #> poly(Wind, 2)2 -1.834732   0.250895  -7.31274 2.6176e-13 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     5.10262   0.052341  97.48802 < 2.2e-16 *** #> poly(Temp, 2)1 -2.63000   0.635659  -4.13744 3.512e-05 *** #> poly(Temp, 2)2 -5.59769   0.432368 -12.94657 < 2.2e-16 *** #>  #>  #> # SAMPLE: 6 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)     3.07100   0.124756 24.61599 < 2.2e-16 *** #> poly(Wind, 2)1  6.09901   1.922777  3.17198  0.001514 **  #> poly(Wind, 2)2 -2.28442   1.031893 -2.21381  0.026842 *   #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.41843   0.080824 42.29472  < 2.2e-16 *** #> poly(Temp, 2)1  3.26499   1.293450  2.52425 0.01159456 *   #> poly(Temp, 2)2  5.66897   1.562592  3.62792 0.00028571 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     5.218537   0.014191 367.74415  < 2.2e-16 *** #> poly(Wind, 2)1  2.220448   0.177688  12.49633  < 2.2e-16 *** #> poly(Wind, 2)2 -0.624761   0.139873  -4.46664 7.9458e-06 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error    t value  Pr(>|t|)     #> (Intercept)    5.200307   0.019697 264.014030 < 2.2e-16 *** #> poly(Temp, 2)1 3.286120   0.364969   9.003834 < 2.2e-16 *** #> poly(Temp, 2)2 0.155763   0.322767   0.482586   0.62939     #>  #>  #> # SAMPLE: 7 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)     3.778200   0.043180 87.49820 < 2.2e-16 *** #> poly(Wind, 2)1 -6.722474   0.703358 -9.55768 < 2.2e-16 *** #> poly(Wind, 2)2 -0.959048   0.681576 -1.40710    0.1594     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     2.59501   0.190413 13.62828  < 2.2e-16 *** #> poly(Temp, 2)1 24.89459   3.062021  8.13011 4.2888e-16 *** #> poly(Temp, 2)2 -8.57801   1.768706 -4.84988 1.2354e-06 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error    t value  Pr(>|t|)     #> (Intercept)     5.360516   0.014178 378.099115 < 2.2e-16 *** #> poly(Wind, 2)1 -0.682752   0.216716  -3.150439 0.0016303 **  #> poly(Wind, 2)2  0.013888   0.277451   0.050054 0.9600792     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     5.10937   0.056186 90.93638  < 2.2e-16 *** #> poly(Temp, 2)1  4.82809   0.928155  5.20181 1.9735e-07 *** #> poly(Temp, 2)2 -1.11475   0.615860 -1.81007 7.0285e-02 .   #>  #>  #> # SAMPLE: 8 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     3.755844   0.041522 90.453699 < 2.2e-16 *** #> poly(Wind, 2)1 -6.956477   0.697914 -9.967528 < 2.2e-16 *** #> poly(Wind, 2)2 -0.344133   0.486153 -0.707869   0.47903     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.14340   0.097610 32.20355  < 2.2e-16 *** #> poly(Temp, 2)1 17.29925   1.746264  9.90643  < 2.2e-16 *** #> poly(Temp, 2)2 -5.78006   0.896709 -6.44586 1.1495e-10 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     5.134474   0.016224 316.48225 < 2.2e-16 *** #> poly(Wind, 2)1 -0.459093   0.272152  -1.68690 0.0916227 .   #> poly(Wind, 2)2  0.683835   0.246613   2.77291 0.0055558 **  #> --- #> Expl. vars.: poly(Temp, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     4.926595   0.041382 119.05115  < 2.2e-16 *** #> poly(Temp, 2)1  4.222008   0.816701   5.16959 2.3461e-07 *** #> poly(Temp, 2)2 -0.794082   0.462440  -1.71716 8.5950e-02 .   #>  #>  #> # SAMPLE: 9 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.36418   0.036953 91.04039  < 2.2e-16 *** #> poly(Wind, 2)1 -4.04407   0.492839 -8.20566 2.2933e-16 *** #> poly(Wind, 2)2  2.98908   0.470324  6.35536 2.0794e-10 *** #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     3.36946   0.038292 87.99344  < 2.2e-16 *** #> poly(Temp, 2)1  6.10018   0.690949  8.82870  < 2.2e-16 *** #> poly(Temp, 2)2  2.25482   0.627045  3.59595 0.00032321 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error    t value  Pr(>|t|)     #> (Intercept)     5.122995   0.014639 349.966703 < 2.2e-16 *** #> poly(Wind, 2)1 -0.564257   0.193672  -2.913473 0.0035743 **  #> poly(Wind, 2)2  0.144413   0.224957   0.641955 0.5209022     #> --- #> Expl. vars.: poly(Temp, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     5.111358   0.015302 334.02914  < 2.2e-16 *** #> poly(Temp, 2)1  1.286054   0.251169   5.12026 3.0511e-07 *** #> poly(Temp, 2)2 -0.928769   0.260074  -3.57117 3.5539e-04 ***  # Different way of displaying the results with \"compact\" summary(est_split, \"compact\") #>    sample     lhs           rhs     (Intercept)   poly(Wind, 2)1 #> 1       5 Ozone   poly(Wind, 2) 3.30*** (0.042) -6.41*** (0.617) #> 2       5 Ozone   poly(Temp, 2) 4.06*** (0.109)                  #> 3       5 Solar.R poly(Wind, 2) 5.21*** (0.018)  -0.570* (0.272) #> 4       5 Solar.R poly(Temp, 2) 5.10*** (0.052)                  #> 5       6 Ozone   poly(Wind, 2) 3.07*** (0.125)   6.10** (1.92)  #> 6       6 Ozone   poly(Temp, 2) 3.42*** (0.081)                  #> 7       6 Solar.R poly(Wind, 2) 5.22*** (0.014)  2.22*** (0.178) #> 8       6 Solar.R poly(Temp, 2) 5.20*** (0.020)                  #> 9       7 Ozone   poly(Wind, 2) 3.78*** (0.043) -6.72*** (0.703) #> 10      7 Ozone   poly(Temp, 2) 2.60*** (0.190)                  #> 11      7 Solar.R poly(Wind, 2) 5.36*** (0.014) -0.683** (0.217) #> 12      7 Solar.R poly(Temp, 2) 5.11*** (0.056)                  #> 13      8 Ozone   poly(Wind, 2) 3.76*** (0.042) -6.96*** (0.698) #> 14      8 Ozone   poly(Temp, 2) 3.14*** (0.098)                  #> 15      8 Solar.R poly(Wind, 2) 5.13*** (0.016)  -0.459. (0.272) #> 16      8 Solar.R poly(Temp, 2) 4.93*** (0.041)                  #> 17      9 Ozone   poly(Wind, 2) 3.36*** (0.037) -4.04*** (0.493) #> 18      9 Ozone   poly(Temp, 2) 3.37*** (0.038)                  #> 19      9 Solar.R poly(Wind, 2) 5.12*** (0.015) -0.564** (0.194) #> 20      9 Solar.R poly(Temp, 2) 5.11*** (0.015)                  #>       poly(Wind, 2)2   poly(Temp, 2)1    poly(Temp, 2)2 #> 1    3.08*** (0.570)                                    #> 2                     11.3*** (1.45)      2.51* (1.17)  #> 3   -1.83*** (0.251)                                    #> 4                    -2.63*** (0.636)  -5.60*** (0.432) #> 5     -2.28* (1.03)                                     #> 6                       3.26* (1.29)    5.67*** (1.56)  #> 7  -0.625*** (0.140)                                    #> 8                     3.29*** (0.365)     0.156 (0.323) #> 9     -0.959 (0.682)                                    #> 10                    24.9*** (3.06)   -8.58*** (1.77)  #> 11     0.014 (0.277)                                    #> 12                    4.83*** (0.928)    -1.11. (0.616) #> 13    -0.344 (0.486)                                    #> 14                    17.3*** (1.75)   -5.78*** (0.897) #> 15   0.684** (0.247)                                    #> 16                    4.22*** (0.817)   -0.794. (0.462) #> 17   2.99*** (0.470)                                    #> 18                    6.10*** (0.691)   2.25*** (0.627) #> 19     0.144 (0.225)                                    #> 20                    1.29*** (0.251) -0.929*** (0.260)  # You can still select which sample/LHS/RHS to display est_split[sample = 1:2, lhs = 1, rhs = 1] #> Standard-errors: IID  #> Dep. var.: Ozone #> Expl. vars.: poly(Wind, 2) #> Sample: 5 #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     3.30403   0.042415  77.89732  < 2.2e-16 *** #> poly(Wind, 2)1 -6.41466   0.617300 -10.39149  < 2.2e-16 *** #> poly(Wind, 2)2  3.07584   0.570194   5.39437 6.8765e-08 *** #> --- #> Sample: 6 #>                Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)     3.07100   0.124756 24.61599 < 2.2e-16 *** #> poly(Wind, 2)1  6.09901   1.922777  3.17198  0.001514 **  #> poly(Wind, 2)2 -2.28442   1.031893 -2.21381  0.026842 *"},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed effects nonlinear maximum likelihood models — feNmlm","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"function estimates maximum likelihood models (e.g., Poisson Logit) non-linear parameters right-hand-sides efficient handle number fixed effects. use non-linear parameters right-hand-side, use femlm feglm instead (design simpler).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"","code":"feNmlm(   fml,   data,   family = c(\"poisson\", \"negbin\", \"logit\", \"gaussian\"),   NL.fml,   vcov,   fixef,   fixef.rm = \"perfect\",   NL.start,   lower,   upper,   NL.start.init,   offset,   subset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   panel.id,   start = 0,   jacobian.method = \"simple\",   useHessian = TRUE,   hessian.args = NULL,   opt.control = list(),   nthreads = getFixest_nthreads(),   lean = FALSE,   verbose = 0,   theta.init,   fixef.tol = 1e-05,   fixef.iter = 10000,   deriv.tol = 1e-04,   deriv.iter = 1000,   warn = TRUE,   notes = getFixest_notes(),   combine.quick,   mem.clean = FALSE,   only.env = FALSE,   only.coef = FALSE,   env,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"fml formula. formula gives linear formula estimated (similar lm formula), example: fml = z~x+y. include fixed-effects variables, insert formula using pipe (e.g. fml = z~x+y|fixef_1+fixef_2). include non-linear parameters element, must use argment NL.fml. Multiple estimations can performed : multiple dep. vars, wrap c(): ex c(y1, y2). multiple indep. vars, use stepwise functions: ex x1 + csw(x2, x3). leads 6 estimation fml = c(y1, y2) ~ x1 + cw0(x2, x3). See details. Square brackets starting dot can used call global variables: y.[] ~ x.[1:2] lead y3 ~ x1 + x2 equal 3 current environment (see details xpd). data data.frame containing necessary variables run model. variables non-linear right hand side formula identified data.frame names. Can also matrix. family Character scalar. provide family. possible values \"poisson\" (Poisson model log-link, default), \"negbin\" (Negative Binomial model log-link), \"logit\" (LOGIT model log-link), \"gaussian\" (Gaussian model). NL.fml formula. provided, formula represents non-linear part right hand side (RHS). Note contrary fml argument, coefficients must explicitly appear formula. instance, can ~*log(b*x + c*x^3), , b, c coefficients estimated. Note RHS formula provided, left hand side. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. fixef Character vector. names variables used fixed-effects. variables contain identifier observation (e.g., think panel identifier). Note recommended way include fixed-effects insert directly formula. fixef.rm Can equal \"perfect\" (default), \"singleton\", \"\" \"none\". Controls observations removed. \"perfect\", observations fixed-effect perfect fit (e.g. 0 outcomes Poisson estimations) removed. \"singleton\", observations fixed-effect appears removed. meaning \"\" \"none\" direct. NL.start (NL models ) list starting values non-linear parameters. parameters named given staring value. Example: NL.start=list(=1,b=5,c=0). Though, exception: parameters given starting value, can use numeric scalar. lower (NL models ) list. lower bound non-linear parameters requires one. Example: lower=list(b=0,c=0). Beware, estimated parameter lower bound, asymptotic theory applied standard-error parameter estimated gradient null. words, upper/lower bound, parameter considered 'fixed'. upper (NL models ) list. upper bound non-linear parameters requires one. Example: upper=list(=10,c=50). Beware, estimated parameter upper bound, asymptotic theory applied standard-error parameter estimated gradient null. words, upper/lower bound, parameter considered 'fixed'. NL.start.init (NL models ) Numeric scalar. argument NL.start provided, partially filled (.e. remain non-linear parameters starting value), starting value remaining non-linear parameters set NL.start.init. offset formula numeric vector. offset can added estimation. equal formula, form (example) ~0.5*x**2. offset linearly added elements main formula 'fml'. subset vector (logical numeric) one-sided formula. provided, estimation performed observations defined argument. split one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. also want include estimation full sample, use argument fsplit instead. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). fsplit one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. argument split also includes full sample first estimation. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). split.keep character vector. used split, fsplit, supplied. provided, sample split values split.keep. values split.keep partially matched values split. enable regular expressions, need add '@' first. example split.keep = c(\"v1\", \"@|var\") keep value split partially matched \"v1\" values containing \"\" \"var\". split.drop character vector. used split, fsplit, supplied. provided, sample split values split.drop. values split.drop partially matched values split. enable regular expressions, need add '@' first. example split.drop = c(\"v1\", \"@|var\") drop value split partially matched \"v1\" values containing \"\" \"var\". cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. panel.id panel identifiers. Can either : ) one sided formula (e.g. panel.id = ~id+time), ii) character vector length 2 (e.g. panel.id=c('id', 'time'), iii) character scalar two variables separated comma (e.g. panel.id='id,time'). Note can combine variables ^ inside formulas (see dedicated section feols). start Starting values coefficients linear part (non-linear part, use NL.start). Can : ) numeric length 1 (e.g. start = 0, default), ii) numeric vector exact length number variables, iii) named vector length (names used initialize appropriate coefficients). jacobian.method (NL models ) Character scalar. Provides method used numerically compute Jacobian non-linear part. Can either \"simple\" \"Richardson\". Default \"simple\". See help jacobian information. useHessian Logical. Hessian computed optimization stage? Default TRUE. hessian.args List arguments passed function genD. Defaults missing. used presence NL.fml. opt.control List elements passed optimization method nlminb. See help page nlminb information. nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. lean Logical, default FALSE. TRUE large objects removed returned result: save memory block possibility use many methods. recommended use arguments se cluster obtain appropriate standard-errors estimation time, since obtaining different SEs possible afterwards. verbose Integer, default 0. represents level information reported optimisation process. verbose=0: nothing reported. verbose=1: value coefficients likelihood reported. verbose=2: 1 + information computing time null model, fixed-effects coefficients hessian reported. theta.init Positive numeric scalar. starting value dispersion parameter family=\"negbin\". default, algorithm uses starting value theta obtained model intercept. fixef.tol Precision used obtain fixed-effects. Defaults 1e-5. corresponds maximum absolute difference allowed two coefficients successive iterations. Argument fixef.tol lower 10000*.Machine$double.eps. Note parameter dynamically controlled algorithm. fixef.iter Maximum number iterations fixed-effects algorithm (use 2+ fixed-effects). Default 10000. deriv.tol Precision used obtain fixed-effects derivatives. Defaults 1e-4. corresponds maximum absolute difference allowed two coefficients successive iterations. Argument deriv.tol lower 10000*.Machine$double.eps. deriv.iter Maximum number iterations algorithm obtain derivative fixed-effects (use 2+ fixed-effects). Default 1000. warn Logical, default TRUE. Whether warnings displayed (concerns warnings relating convergence state). notes Logical. default, two notes displayed: NAs removed (show additional information) observations removed 0 (0/1) outcomes fixed-effect setup (Poisson/Neg. Bin./Logit models). avoid displaying messages, can set notes = FALSE. can remove messages permanently using setFixest_notes(FALSE). combine.quick Logical. combine different variables transform single fixed-effects can e.g. y ~ x | paste(var1, var2). algorithm provides shorthand operation: y ~ x | var1^var2. pasting variables costly operation, internal algorithm may use numerical trick hasten process. cost lose labels. interested getting value fixed-effects coefficients estimation, use combine.quick = FALSE. default equal FALSE number observations lower 50,000, TRUE otherwise. mem.clean Logical, default FALSE. used data set large compared available RAM. TRUE intermediary objects removed much possible gc run substantial C++ section internal code avoid memory issues. .env (Advanced users.) Logical, default FALSE. TRUE, environment used make estimation returned. .coef Logical, default FALSE. TRUE, estimated coefficients returned. Note length vector returned always length number coefficients estimated: means variables found collinear returned NA value. env (Advanced users.) fixest environment created fixest estimation .env = TRUE. Default missing. provided, data environment used perform estimation. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"fixest object. Note fixest objects contain many elements internal use, presented information. access , safer use user-level methods (e.g. vcov.fixest, resid.fixest, etc) functions (like instance fitstat access fit statistic). coefficients named vector coefficients. coeftable table coefficients standard errors, z-values p-values. loglik loglikelihood. iterations Number iterations algorithm. nobs number observations. nparams number parameters model. call call. fml linear formula call. fml_all list containing different parts formula. Always contain linear formula. , relevant: fixef: fixed-effects; NL: non linear part formula. ll_null Log-likelihood null model (.e. intercept ). pseudo_r2 adjusted pseudo R2. message convergence message optimization procedures. sq.cor Squared correlation dependent variable expected predictor (.e. fitted.values) obtained estimation. hessian Hessian parameters. fitted.values fitted values expected value dependent variable fitted model: \\(E(Y|X)\\). cov.iid variance-covariance matrix parameters. se standard-error parameters. scores matrix scores (first derivative observation). family ML family used estimation. residuals difference dependent variable expected predictor. sumFE sum fixed-effects observation. offset offset formula. NL.fml nonlinear formula call. bounds Whether coefficients upper lower bounded. -- can case non-linear formula included arguments 'lower' 'upper' provided. isBounded logical vector gives coefficient whether bounded . can case non-linear formula included arguments 'lower' 'upper' provided. fixef_vars names fixed-effect dimension. fixef_id list (length number fixed-effects) fixed-effects identifiers observation. fixef_sizes size fixed-effect (.e. number unique identifierfor fixed-effect dimension). obs_selection (relevant.) List containing vectors integers. represents sequential selection observation vis vis original data set. fixef_removed case fixed-effects observations removed 0/1 outcome within fixed-effect, gives list (fixed-effect dimension) fixed-effect identifiers removed. theta case negative binomial estimation: overdispersion parameter. @seealso See also summary.fixest see results appropriate standard-errors, fixef.fixest extract fixed-effects coefficients, function etable visualize results multiple estimations. estimation methods: feols, femlm, feglm, fepois, fenegbin.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"function estimates maximum likelihood models conditional expectations follows: Gaussian likelihood: $$E(Y|X)=X\\beta$$ Poisson Negative Binomial likelihoods: $$E(Y|X)=\\exp(X\\beta)$$ Negative Binomial parameter \\(\\theta\\) used model variance \\(\\mu+\\mu^2/\\theta\\), \\(\\mu\\) conditional expectation. Logit likelihood: $$E(Y|X)=\\frac{\\exp(X\\beta)}{1+\\exp(X\\beta)}$$ one fixed-effects, conditional expectation can written : $$E(Y|X) = h(X\\beta+\\sum_{k}\\sum_{m}\\gamma_{m}^{k}\\times C_{im}^{k}),$$ \\(h(.)\\) function corresponding likelihood function shown . \\(C^k\\) matrix associated fixed-effect dimension \\(k\\) \\(C^k_{im}\\) equal 1 observation \\(\\) category \\(m\\) fixed-effect dimension \\(k\\) 0 otherwise. non linear parameters functions, can schematically split set regressors two: $$f(X,\\beta)=X^1\\beta^1 + g(X^2,\\beta^2)$$ first linear term non linear part expressed function g. , add non-linear term linear terms (\\(X*beta\\) fixed-effects coefficients). always better (efficient) put argument NL.fml non-linear parameter terms, add linear terms fml argument. estimate non-linear formula without even intercept, must exclude intercept linear formula using, e.g., fml = z~0. -dispersion parameter Negative Binomial family, theta, capped 10,000. theta reaches high value, means overdispersion.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"lagging-variables","dir":"Reference","previous_headings":"","what":"Lagging variables","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"use leads/lags variables estimation, can: ) either provide argument panel.id, ii) either set data set panel function panel, f d. can provide several leads/lags/differences : e.g. formula equal f(y) ~ l(x, -1:1), means dependent variable equal lead y, explanatory variables lead x1, x1 lag x1. See examples function l details.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"interactions","dir":"Reference","previous_headings":"","what":"Interactions","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"can interact numeric variable \"factor-like\" variable using (factor_var, continuous_var, ref), continuous_var interacted value factor_var argument ref value factor_var taken reference (optional). Using specific way create interactions leads different display interacted values etable. See examples. important note care standard-errors interactions, can add interactions fixed-effects part formula, incomparably faster (using syntax factor_var[continuous_var], explained section “Varying slopes”). function fact arguments, please see details associated help page.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"on-standard-errors","dir":"Reference","previous_headings":"","what":"On standard-errors","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"Standard-errors can computed different ways, can use arguments se ssc summary.fixest define compute . default, presence fixed-effects, standard-errors automatically clustered. following vignette: standard-errors describes details standard-errors computed fixest can replicate standard-errors software. can use functions setFixest_vcov setFixest_ssc permanently set way standard-errors computed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"multiple-estimations","dir":"Reference","previous_headings":"","what":"Multiple estimations","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"Multiple estimations can performed , just specified formula. Multiple estimations yield fixest_multi object ‘kind ’ list results includes specific methods access results handy way. Please look dedicated vignette: Multiple estimations. include multiple dependent variables, wrap c() (list() also works). instance fml = c(y1, y2) ~ x1 estimate model fml = y1 ~ x1 model fml = y2 ~ x1. include multiple independent variables, need use stepwise functions. 4 stepwise functions: sw, sw0, csw, csw0, mvsw. course sw stands stepwise, csw cumulative stepwise. Finally mvsw bit special, stands multiverse stepwise. explain . Assume following formula: fml = y ~ x1 + sw(x2, x3). stepwise function sw estimate following two models: y ~ x1 + x2 y ~ x1 + x3. , element sw() sequentially, separately, added formula. used sw0 lieu sw, model y ~ x1 also estimated. 0 name means model without stepwise element also needs estimated. prefix c means cumulative: stepwise element added next. , fml = y ~ x1 + csw(x2, x3) lead following models y ~ x1 + x2 y ~ x1 + x2 + x3. 0 meaning also lead model without stepwise elements estimated: words, fml = y ~ x1 + csw0(x2, x3) leads following three models: y ~ x1, y ~ x1 + x2 y ~ x1 + x2 + x3. Finally mvsw add, stepwise fashion possible combinations variables arguments. example mvsw(x1, x2, x3) equivalent sw0(x1, x2, x3, x1 + x2, x1 + x3, x2 + x3, x1 + x2 + x3). number models estimate grows factorial rate: cautious! Multiple independent variables can combined multiple dependent variables, fml = c(y1, y2) ~ cw(x1, x2, x3) lead 6 estimations. Multiple estimations can also combined split samples (arguments split, fsplit). can also add fixed-effects stepwise fashion. Note perform stepwise estimations IV part formula (feols ). NAs present sample, avoid many messages, NA removal concerning variables common estimations reported. note performance. feature multiple estimations highly optimized feols, particular presence fixed-effects. faster estimate multiple models using formula rather loop. non-feols models using formula roughly similar using loop performance-wise.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"argument-sliding","dir":"Reference","previous_headings":"","what":"Argument sliding","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"data set set globally using setFixest_estimation(data = data_set), argument vcov can used implicitly. means calls feols(y ~ x, \"HC1\"), feols(y ~ x, ~id), valid: ) data automatically deduced global settings, ii) vcov deduced second argument.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"piping","dir":"Reference","previous_headings":"","what":"Piping","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"Although argument 'data' placed second position, data can piped estimation functions. example, R >= 4.1, mtcars |> feols(mpg ~ cyl) works feols(mpg ~ cyl, mtcars).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"tricks-to-estimate-multiple-lhs","dir":"Reference","previous_headings":"","what":"Tricks to estimate multiple LHS","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"use multiple dependent variables fixest estimations, need include vector: like c(y1, y2, y3). First, names stored vector, can readily inserted formula perform multiple estimations using dot square bracket operator. instance my_lhs = c(\"y1\", \"y2\"), calling fixest , say feols(.[my_lhs] ~ x1, etc) equivalent using feols(c(y1, y2) ~ x1, etc). Beware special feature unique left-hand-side fixest estimations (default behavior DSB operator aggregate sums, see xpd). Second, can use regular expression grep left-hand-sides fly. ..(\"regex\") feature used naked LHS, variables grepped inserted c(). example ..(\"Pe\") ~ Sepal.Length, iris equivalent c(Petal.Length, Petal.Width) ~ Sepal.Length, iris. Beware special feature unique left-hand-side fixest estimations (default behavior ..(\"regex\") aggregate sums, see xpd).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"dot-square-bracket-operator-in-formulas","dir":"Reference","previous_headings":"","what":"Dot square bracket operator in formulas","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"formula, dot square bracket (DSB) operator can: ) create manifold variables , ii) capture values current environment put verbatim formula. Say want include variables x1 x3 formula. can use xpd(y ~ x.[1:3]) get y ~ x1 + x2 + x3. summon values environment, simply put variable square brackets. example: (1:3) xpd(y.[] ~ x) create formulas y1 ~ x y3 ~ x depending value . can include full variable environment way: (y c(\"\", \"b\")) xpd(.[y] ~ x) create two formulas ~ x b ~ x. DSB can even used within variable names, variable must nested character form. example y ~ .[\"x.[1:2]_sq\"] create y ~ x1_sq + x2_sq. Using character form important avoid formula parsing error. Double quotes must used. Note character string nested parsed function dsb, thus return vector. default, DSB operator expands vectors sums. can add comma, like .[, x], expand commas--content can used within functions. instance: c(x.[, 1:2]) create c(x1, x2) (c(x1 + x2)). fixest estimations, special parsing enabled, need use xpd. One-sided formulas can expanded DSB operator: let x = ~sepal + petal, xpd(y ~ .[x]) leads color ~ sepal + petal. can even use multiple square brackets within single variable, use nesting required. example, following xpd(y ~ .[\".[letters[1:2]]_.[1:2]\"]) create y ~ a_1 + b_2. Remember nested character string parsed dsb, explains behavior. element expanded ) equal empty string , ii) length 0, replaced neutral element, namely 1. example, x = \"\" ; xpd(y ~ .[x]) leads y ~ 1.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"Berge, Laurent, 2018, \"Efficient estimation maximum likelihood models multiple fixed-effects: R package FENmlm.\" CREA Discussion Papers, 13 (). models multiple fixed-effects: Gaure, Simen, 2013, \"OLS multiple high dimensional category variables\", Computational Statistics & Data Analysis 66 pp. 8--18 unconditionnal Negative Binomial model: Allison, Paul D Waterman, Richard P, 2002, \"Fixed-Effects Negative Binomial Regression Models\", Sociological Methodology 32(1) pp. 247--265","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/feNmlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed effects nonlinear maximum likelihood models — feNmlm","text":"","code":"# This section covers only non-linear in parameters examples # For linear relationships: use femlm or feglm instead  # Generating data for a simple example set.seed(1) n = 100 x = rnorm(n, 1, 5)**2 y = rnorm(n, -1, 5)**2 z1 = rpois(n, x*y) + rpois(n, 2) base = data.frame(x, y, z1)  # Estimating a 'linear' relation: est1_L = femlm(z1 ~ log(x) + log(y), base) # Estimating the same 'linear' relation using a 'non-linear' call est1_NL = feNmlm(z1 ~ 1, base, NL.fml = ~a*log(x)+b*log(y), NL.start = list(a=0, b=0)) # we compare the estimates with the function esttable (they are identical) etable(est1_L, est1_NL) #>                             est1_L            est1_NL #> Dependent Var.:                 z1                 z1 #>                                                       #> Constant          0.0632* (0.0298)   0.0632* (0.0298) #> log(x)          0.9945*** (0.0051)                    #> log(y)          0.9901*** (0.0058)                    #> a                                  0.9945*** (0.0051) #> b                                  0.9901*** (0.0058) #> _______________ __________________ __________________ #> S.E. type                      IID                IID #> Observations                   100                100 #> Squared Cor.               0.99957            0.99957 #> Pseudo R2                  0.99338            0.99338 #> BIC                         797.47             797.47 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Now generating a non-linear relation (E(z2) = x + y + 1): z2 = rpois(n, x + y) + rpois(n, 1) base$z2 = z2  # Estimation using this non-linear form est2_NL = feNmlm(z2 ~ 0, base, NL.fml = ~log(a*x + b*y),                NL.start = 2, lower = list(a=0, b=0)) # we can't estimate this relation linearily # => closest we can do: est2_L = femlm(z2 ~ log(x) + log(y), base)  # Difference between the two models: etable(est2_L, est2_NL) #>                             est2_L           est2_NL #> Dependent Var.:                 z2                z2 #>                                                      #> Constant         2.824*** (0.0386)                   #> log(x)          0.2695*** (0.0094)                   #> log(y)          0.1774*** (0.0087)                   #> a                                  1.057*** (0.0265) #> b                                  1.005*** (0.0248) #> _______________ __________________ _________________ #> S.E. type                      IID               IID #> Observations                   100               100 #> Squared Cor.               0.46596           0.96247 #> Pseudo R2                  0.32078           0.81626 #> BIC                        2,545.9            694.19 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Plotting the fits: plot(x, z2, pch = 18) points(x, fitted(est2_L), col = 2, pch = 1) points(x, fitted(est2_NL), col = 4, pch = 2)"},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed-effects OLS estimation — feols","title":"Fixed-effects OLS estimation — feols","text":"Estimates OLS number fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed-effects OLS estimation — feols","text":"","code":"feols(   fml,   data,   vcov,   weights,   offset,   subset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   panel.id,   fixef,   fixef.rm = \"none\",   fixef.tol = 1e-06,   fixef.iter = 10000,   collin.tol = 1e-10,   nthreads = getFixest_nthreads(),   lean = FALSE,   verbose = 0,   warn = TRUE,   notes = getFixest_notes(),   only.coef = FALSE,   combine.quick,   demeaned = FALSE,   mem.clean = FALSE,   only.env = FALSE,   env,   ... )  feols.fit(   y,   X,   fixef_df,   vcov,   offset,   split,   fsplit,   split.keep,   split.drop,   cluster,   se,   ssc,   weights,   subset,   fixef.rm = \"perfect\",   fixef.tol = 1e-06,   fixef.iter = 10000,   collin.tol = 1e-10,   nthreads = getFixest_nthreads(),   lean = FALSE,   warn = TRUE,   notes = getFixest_notes(),   mem.clean = FALSE,   verbose = 0,   only.env = FALSE,   only.coef = FALSE,   env,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed-effects OLS estimation — feols","text":"fml formula representing relation estimated. example: fml = z~x+y. include fixed-effects, insert formula using pipe: e.g. fml = z~x+y | fe_1+fe_2. can combine two fixed-effects ^: e.g. fml = z~x+y|fe_1^fe_2, see details. can also use variables varying slopes using square brackets: e.g. fml = z~y|fe_1[x] + fe_2, see details. add IVs, insert endogenous vars./instruments pipe, like y ~ x | x_endo1 + x_endo2 ~ x_inst1 + x_inst2. Note always last element, see details. Multiple estimations can performed : multiple dep. vars, wrap c(): ex c(y1, y2). multiple indep. vars, use stepwise functions: ex x1 + csw(x2, x3). formula fml = c(y1, y2) ~ x1 + cw0(x2, x3) leads 6 estimation, see details. Square brackets starting dot can used call global variables: y.[] ~ x.[1:2] lead y3 ~ x1 + x2 equal 3 current environment (see details xpd). data data.frame containing necessary variables run model. variables non-linear right hand side formula identified data.frame names. Can also matrix. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. weights formula numeric vector. observation can weighted, weights must greater 0. equal formula, one-sided: example ~ var_weight. offset formula numeric vector. offset can added estimation. equal formula, form (example) ~0.5*x**2. offset linearly added elements main formula 'fml'. subset vector (logical numeric) one-sided formula. provided, estimation performed observations defined argument. split one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. also want include estimation full sample, use argument fsplit instead. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). fsplit one sided formula representing variable (eg split = ~var) vector. provided, sample split according variable one estimation performed value variable. argument split also includes full sample first estimation. can use special operators %keep% %drop% select subset values split sample. E.g. split = ~var %keep% c(\"v1\", \"v2\") split sample according values v1 v2 variable var; equivalent supplying argument split.keep = c(\"v1\", \"v2\"). default partial matching value, can trigger regular expression evaluation adding '@' first, : ~var %drop% \"@^v[12]\" drop values starting \"v1\" \"v2\" (course need know regexes!). split.keep character vector. used split, fsplit, supplied. provided, sample split values split.keep. values split.keep partially matched values split. enable regular expressions, need add '@' first. example split.keep = c(\"v1\", \"@|var\") keep value split partially matched \"v1\" values containing \"\" \"var\". split.drop character vector. used split, fsplit, supplied. provided, sample split values split.drop. values split.drop partially matched values split. enable regular expressions, need add '@' first. example split.drop = c(\"v1\", \"@|var\") drop value split partially matched \"v1\" values containing \"\" \"var\". cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. panel.id panel identifiers. Can either : ) one sided formula (e.g. panel.id = ~id+time), ii) character vector length 2 (e.g. panel.id=c('id', 'time'), iii) character scalar two variables separated comma (e.g. panel.id='id,time'). Note can combine variables ^ inside formulas (see dedicated section feols). fixef Character vector. names variables used fixed-effects. variables contain identifier observation (e.g., think panel identifier). Note recommended way include fixed-effects insert directly formula. fixef.rm Can equal \"perfect\" (default), \"singleton\", \"\" \"none\". Controls observations removed. \"perfect\", observations fixed-effect perfect fit (e.g. 0 outcomes Poisson estimations) removed. \"singleton\", observations fixed-effect appears removed. meaning \"\" \"none\" direct. fixef.tol Precision used obtain fixed-effects. Defaults 1e-5. corresponds maximum absolute difference allowed two coefficients successive iterations. Argument fixef.tol lower 10000*.Machine$double.eps. Note parameter dynamically controlled algorithm. fixef.iter Maximum number iterations fixed-effects algorithm (use 2+ fixed-effects). Default 10000. collin.tol Numeric scalar, default 1e-10. Threshold deciding variables considered collinear subsequently removed estimation. Higher values means variables removed (presence collinearity). One signal presence collinearity t-stats extremely low (instance t-stats < 1e-3). nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. lean Logical, default FALSE. TRUE large objects removed returned result: save memory block possibility use many methods. recommended use arguments se cluster obtain appropriate standard-errors estimation time, since obtaining different SEs possible afterwards. verbose Integer. Higher values give information. particular, can detail number iterations demeaning algorithm (first number left-hand-side, numbers right-hand-side variables). warn Logical, default TRUE. Whether warnings displayed (concerns warnings relating convergence state). notes Logical. default, two notes displayed: NAs removed (show additional information) observations removed collinearity. avoid displaying messages, can set notes = FALSE. can remove messages permanently using setFixest_notes(FALSE). .coef Logical, default FALSE. TRUE, estimated coefficients returned. Note length vector returned always length number coefficients estimated: means variables found collinear returned NA value. combine.quick Logical. combine different variables transform single fixed-effects can e.g. y ~ x | paste(var1, var2). algorithm provides shorthand operation: y ~ x | var1^var2. pasting variables costly operation, internal algorithm may use numerical trick hasten process. cost lose labels. interested getting value fixed-effects coefficients estimation, use combine.quick = FALSE. default equal FALSE number observations lower 50,000, TRUE otherwise. demeaned Logical, default FALSE. used presence fixed-effects: centered variables returned? TRUE, creates items y_demeaned X_demeaned. mem.clean Logical, default FALSE. used data set large compared available RAM. TRUE intermediary objects removed much possible gc run substantial C++ section internal code avoid memory issues. .env (Advanced users.) Logical, default FALSE. TRUE, environment used make estimation returned. env (Advanced users.) fixest environment created fixest estimation .env = TRUE. Default missing. provided, data environment used perform estimation. ... currently used. y Numeric vector/matrix/data.frame dependent variable(s). Multiple dependent variables return fixest_multi object. X Numeric matrix regressors. fixef_df Matrix/data.frame fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed-effects OLS estimation — feols","text":"fixest object. Note fixest objects contain many elements internal use, presented information. access , safer use user-level methods (e.g. vcov.fixest, resid.fixest, etc) functions (like instance fitstat access fit statistic). nobs number observations. fml linear formula call. call call function. method method used estimate model. family family used estimate model. fml_all list containing different parts formula. Always contain linear formula. depending cases: fixef: fixed-effects, iv: IV part formula. fixef_vars names fixed-effect dimension. fixef_id list (length number fixed-effects) fixed-effects identifiers observation. fixef_sizes size fixed-effect (.e. number unique identifierfor fixed-effect dimension). coefficients named vector estimated coefficients. multicol Logical, multicollinearity found. coeftable table coefficients standard errors, z-values p-values. loglik loglikelihood. ssr_null Sum squared residuals null model (containing intercept). ssr_fe_only Sum squared residuals model estimated fixed-effects . ll_null log-likelihood null model (containing intercept). ll_fe_only log-likelihood model estimated fixed-effects . fitted.values fitted values. linear.predictors linear predictors. residuals residuals (y minus fitted values). sq.cor Squared correlation dependent variable expected predictor (.e. fitted.values) obtained estimation. hessian Hessian parameters. cov.iid variance-covariance matrix parameters. se standard-error parameters. scores matrix scores (first derivative observation). residuals difference dependent variable expected predictor. sumFE sum fixed-effects coefficients observation. offset (relevant.) offset formula. weights (relevant.) weights formula. obs_selection (relevant.) List containing vectors integers. represents sequential selection observation vis vis original data set. collin.var (relevant.) Vector containing variables removed collinearity. collin.coef (relevant.) Vector coefficients, values variables removed collinearity NA. collin.min_norm minimal diagonal value Cholesky decomposition. Small values indicate possible presence collinearity. y_demeaned demeaned = TRUE: centered dependent variable. X_demeaned demeaned = TRUE: centered explanatory variable.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixed-effects OLS estimation — feols","text":"method used demean variable along fixed-effects based Berge (2018), since problem solve Gaussian case ML setup.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"combining-the-fixed-effects","dir":"Reference","previous_headings":"","what":"Combining the fixed-effects","title":"Fixed-effects OLS estimation — feols","text":"can combine two variables make new fixed-effect using ^. syntax follows: fe_1^fe_2. created new variable combination two variables fe_1 fe_2. identical paste0(fe_1, \"_\", fe_2) convenient. Note pasting costly operation, especially large data sets. Thus, internal algorithm uses numerical trick fast, drawback identity observation lost (.e. now equal meaningless number instead equal paste0(fe_1, \"_\", fe_2)). “identities” useful interested value fixed-effects (can extract fixef.fixest). interested coefficients variables, matter. Anyway, can use combine.quick = FALSE tell internal algorithm use paste instead numerical trick. default, numerical trick performed large data sets.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"varying-slopes","dir":"Reference","previous_headings":"","what":"Varying slopes","title":"Fixed-effects OLS estimation — feols","text":"can add variables varying slopes fixed-effect part formula. syntax follows: fixef_var[var1, var2]. variables var1 var2 varying slopes (one slope per value fixef_var) fixed-effect fixef_var also added. add variables varying slopes fixed-effect, use double square brackets: fixef_var[[var1, var2]]. words: fixef_var[var1, var2] equivalent fixef_var + fixef_var[[var1]] + fixef_var[[var2]] fixef_var[[var1, var2]] equivalent fixef_var[[var1]] + fixef_var[[var2]] general, convergence reasons, recommended always add fixed-effect avoid using variable varying slope (.e. use single square brackets).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"lagging-variables","dir":"Reference","previous_headings":"","what":"Lagging variables","title":"Fixed-effects OLS estimation — feols","text":"use leads/lags variables estimation, can: ) either provide argument panel.id, ii) either set data set panel function panel, f d. can provide several leads/lags/differences : e.g. formula equal f(y) ~ l(x, -1:1), means dependent variable equal lead y, explanatory variables lead x1, x1 lag x1. See examples function l details.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"interactions","dir":"Reference","previous_headings":"","what":"Interactions","title":"Fixed-effects OLS estimation — feols","text":"can interact numeric variable \"factor-like\" variable using (factor_var, continuous_var, ref), continuous_var interacted value factor_var argument ref value factor_var taken reference (optional). Using specific way create interactions leads different display interacted values etable. See examples. important note care standard-errors interactions, can add interactions fixed-effects part formula, incomparably faster (using syntax factor_var[continuous_var], explained section “Varying slopes”). function fact arguments, please see details associated help page.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"on-standard-errors","dir":"Reference","previous_headings":"","what":"On standard-errors","title":"Fixed-effects OLS estimation — feols","text":"Standard-errors can computed different ways, can use arguments se ssc summary.fixest define compute . default, presence fixed-effects, standard-errors automatically clustered. following vignette: standard-errors describes details standard-errors computed fixest can replicate standard-errors software. can use functions setFixest_vcov setFixest_ssc permanently set way standard-errors computed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"instrumental-variables","dir":"Reference","previous_headings":"","what":"Instrumental variables","title":"Fixed-effects OLS estimation — feols","text":"estimate two stage least square regressions, insert relationship endogenous regressor(s) instruments formula, pipe. example, fml = y ~ x1 | x_endo ~ x_inst use variables x1 x_inst first stage explain x_endo. use fitted value x_endo (named fit_x_endo) x1 explain y. include several endogenous regressors, just use \"+\", like : fml = y ~ x1 | x_endo1 + x_end2 ~ x_inst1 + x_inst2. course can still add fixed-effects, IV formula must always come last, like fml = y ~ x1 | fe1 + fe2 | x_endo ~ x_inst. want estimate model without exogenous variables, use \"1\" placeholder: e.g. fml = y ~ 1 | x_endo + x_inst. default, second stage regression returned. can access first stage(s) regressions either directly slot iv_first_stage (recommended), using argument stage = 1 function summary.fixest. example summary(iv_est, stage = 1) give first stage(s). Note using summary can display second first stages time using, e.g., stage = 1:2 (using 2:1 reverse order).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"multiple-estimations","dir":"Reference","previous_headings":"","what":"Multiple estimations","title":"Fixed-effects OLS estimation — feols","text":"Multiple estimations can performed , just specified formula. Multiple estimations yield fixest_multi object ‘kind ’ list results includes specific methods access results handy way. Please look dedicated vignette: Multiple estimations. include multiple dependent variables, wrap c() (list() also works). instance fml = c(y1, y2) ~ x1 estimate model fml = y1 ~ x1 model fml = y2 ~ x1. include multiple independent variables, need use stepwise functions. 4 stepwise functions: sw, sw0, csw, csw0, mvsw. course sw stands stepwise, csw cumulative stepwise. Finally mvsw bit special, stands multiverse stepwise. explain . Assume following formula: fml = y ~ x1 + sw(x2, x3). stepwise function sw estimate following two models: y ~ x1 + x2 y ~ x1 + x3. , element sw() sequentially, separately, added formula. used sw0 lieu sw, model y ~ x1 also estimated. 0 name means model without stepwise element also needs estimated. prefix c means cumulative: stepwise element added next. , fml = y ~ x1 + csw(x2, x3) lead following models y ~ x1 + x2 y ~ x1 + x2 + x3. 0 meaning also lead model without stepwise elements estimated: words, fml = y ~ x1 + csw0(x2, x3) leads following three models: y ~ x1, y ~ x1 + x2 y ~ x1 + x2 + x3. Finally mvsw add, stepwise fashion possible combinations variables arguments. example mvsw(x1, x2, x3) equivalent sw0(x1, x2, x3, x1 + x2, x1 + x3, x2 + x3, x1 + x2 + x3). number models estimate grows factorial rate: cautious! Multiple independent variables can combined multiple dependent variables, fml = c(y1, y2) ~ cw(x1, x2, x3) lead 6 estimations. Multiple estimations can also combined split samples (arguments split, fsplit). can also add fixed-effects stepwise fashion. Note perform stepwise estimations IV part formula (feols ). NAs present sample, avoid many messages, NA removal concerning variables common estimations reported. note performance. feature multiple estimations highly optimized feols, particular presence fixed-effects. faster estimate multiple models using formula rather loop. non-feols models using formula roughly similar using loop performance-wise.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"tricks-to-estimate-multiple-lhs","dir":"Reference","previous_headings":"","what":"Tricks to estimate multiple LHS","title":"Fixed-effects OLS estimation — feols","text":"use multiple dependent variables fixest estimations, need include vector: like c(y1, y2, y3). First, names stored vector, can readily inserted formula perform multiple estimations using dot square bracket operator. instance my_lhs = c(\"y1\", \"y2\"), calling fixest , say feols(.[my_lhs] ~ x1, etc) equivalent using feols(c(y1, y2) ~ x1, etc). Beware special feature unique left-hand-side fixest estimations (default behavior DSB operator aggregate sums, see xpd). Second, can use regular expression grep left-hand-sides fly. ..(\"regex\") feature used naked LHS, variables grepped inserted c(). example ..(\"Pe\") ~ Sepal.Length, iris equivalent c(Petal.Length, Petal.Width) ~ Sepal.Length, iris. Beware special feature unique left-hand-side fixest estimations (default behavior ..(\"regex\") aggregate sums, see xpd).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"argument-sliding","dir":"Reference","previous_headings":"","what":"Argument sliding","title":"Fixed-effects OLS estimation — feols","text":"data set set globally using setFixest_estimation(data = data_set), argument vcov can used implicitly. means calls feols(y ~ x, \"HC1\"), feols(y ~ x, ~id), valid: ) data automatically deduced global settings, ii) vcov deduced second argument.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"piping","dir":"Reference","previous_headings":"","what":"Piping","title":"Fixed-effects OLS estimation — feols","text":"Although argument 'data' placed second position, data can piped estimation functions. example, R >= 4.1, mtcars |> feols(mpg ~ cyl) works feols(mpg ~ cyl, mtcars).","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"dot-square-bracket-operator-in-formulas","dir":"Reference","previous_headings":"","what":"Dot square bracket operator in formulas","title":"Fixed-effects OLS estimation — feols","text":"formula, dot square bracket (DSB) operator can: ) create manifold variables , ii) capture values current environment put verbatim formula. Say want include variables x1 x3 formula. can use xpd(y ~ x.[1:3]) get y ~ x1 + x2 + x3. summon values environment, simply put variable square brackets. example: (1:3) xpd(y.[] ~ x) create formulas y1 ~ x y3 ~ x depending value . can include full variable environment way: (y c(\"\", \"b\")) xpd(.[y] ~ x) create two formulas ~ x b ~ x. DSB can even used within variable names, variable must nested character form. example y ~ .[\"x.[1:2]_sq\"] create y ~ x1_sq + x2_sq. Using character form important avoid formula parsing error. Double quotes must used. Note character string nested parsed function dsb, thus return vector. default, DSB operator expands vectors sums. can add comma, like .[, x], expand commas--content can used within functions. instance: c(x.[, 1:2]) create c(x1, x2) (c(x1 + x2)). fixest estimations, special parsing enabled, need use xpd. One-sided formulas can expanded DSB operator: let x = ~sepal + petal, xpd(y ~ .[x]) leads color ~ sepal + petal. can even use multiple square brackets within single variable, use nesting required. example, following xpd(y ~ .[\".[letters[1:2]]_.[1:2]\"]) create y ~ a_1 + b_2. Remember nested character string parsed dsb, explains behavior. element expanded ) equal empty string , ii) length 0, replaced neutral element, namely 1. example, x = \"\" ; xpd(y ~ .[x]) leads y ~ 1.","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed-effects OLS estimation — feols","text":"Berge, Laurent, 2018, \"Efficient estimation maximum likelihood models multiple fixed-effects: R package FENmlm.\" CREA Discussion Papers, 13 (). models multiple fixed-effects: Gaure, Simen, 2013, \"OLS multiple high dimensional category variables\", Computational Statistics & Data Analysis 66 pp. 8--18","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fixed-effects OLS estimation — feols","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/feols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed-effects OLS estimation — feols","text":"","code":"# # Basic estimation #  res = feols(Sepal.Length ~ Sepal.Width + Petal.Length, iris) # You can specify clustered standard-errors in summary: summary(res, cluster = ~Species) #> OLS estimation, Dep. Var.: Sepal.Length #> Observations: 150  #> Standard-errors: Clustered (Species)  #>              Estimate Std. Error t value   Pr(>|t|)     #> (Intercept)  2.249140   0.162626 13.8302 0.00518747 **  #> Sepal.Width  0.595525   0.051733 11.5115 0.00746202 **  #> Petal.Length 0.471920   0.006873 68.6673 0.00021201 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.329937   Adj. R2: 0.838003  # # Just one set of fixed-effects: #  res = feols(Sepal.Length ~ Sepal.Width + Petal.Length | Species, iris) # By default, the SEs are clustered according to the first fixed-effect summary(res) #> OLS estimation, Dep. Var.: Sepal.Length #> Observations: 150  #> Fixed-effects: Species: 3 #> Standard-errors: Clustered (Species)  #>              Estimate Std. Error t value Pr(>|t|)     #> Sepal.Width  0.432217   0.161308 2.67945 0.115623     #> Petal.Length 0.775629   0.126546 6.12925 0.025601 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.305129     Adj. R2: 0.859538 #>                  Within R2: 0.641507  # # Varying slopes: #  res = feols(Sepal.Length ~ Petal.Length | Species[Sepal.Width], iris) summary(res) #> OLS estimation, Dep. Var.: Sepal.Length #> Observations: 150  #> Fixed-effects: Species: 3 #> Varying slopes: Sepal.Width (Species: 3) #> Standard-errors: Clustered (Species)  #>              Estimate Std. Error t value Pr(>|t|)     #> Petal.Length 0.822045    0.10061  8.1706 0.014651 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.298903     Adj. R2: 0.863326 #>                  Within R2: 0.518738  # # Combining the FEs: #  base = iris base$fe_2 = rep(1:10, 15) res_comb = feols(Sepal.Length ~ Petal.Length | Species^fe_2, base) summary(res_comb) #> OLS estimation, Dep. Var.: Sepal.Length #> Observations: 150  #> Fixed-effects: Species^fe_2: 30 #> Standard-errors: Clustered (Species^fe_2)  #>              Estimate Std. Error t value   Pr(>|t|)     #> Petal.Length 0.875613   0.062395 14.0334 1.8483e-14 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.309865     Adj. R2: 0.823494 #>                  Within R2: 0.548794 fixef(res_comb)[[1]] #>      setosa_1     setosa_10      setosa_2      setosa_3      setosa_4  #>      3.826581      3.646581      3.661605      3.601703      3.621605  #>      setosa_5      setosa_6      setosa_7      setosa_8      setosa_9  #>      3.736532      3.884093      3.859118      3.699118      3.721605  #>  versicolor_1 versicolor_10  versicolor_2  versicolor_3  versicolor_4  #>      2.067402      2.142623      2.322426      2.359841      1.922328  #>  versicolor_5  versicolor_6  versicolor_7  versicolor_8  versicolor_9  #>      2.187402      2.287304      2.209694      2.284914      2.274963  #>   virginica_1  virginica_10   virginica_2   virginica_3   virginica_4  #>      1.769007      1.841642      1.826716      1.716471      1.639252  #>   virginica_5   virginica_6   virginica_7   virginica_8   virginica_9  #>      1.474081      2.006422      1.591887      1.791495      1.609007   # # Using leads/lags: #  data(base_did) # We need to set up the panel with the arg. panel.id est1 = feols(y ~ l(x1, 0:1), base_did, panel.id = ~id+period) #> NOTE: 108 observations removed because of NA values (RHS: 108). est2 = feols(f(y) ~ l(x1, -1:1), base_did, panel.id = ~id+period) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). etable(est1, est2, order = \"f\", drop=\"Int\") #>                               est1               est2 #> Dependent Var.:                  y             f(y,1) #>                                                       #> f(x1,1)                            0.9940*** (0.0542) #> Constant         2.235*** (0.2032)  2.464*** (0.2233) #> x1              0.9948*** (0.0487)    0.0081 (0.0592) #> l(x1,1)            0.0410 (0.0558)    0.0157 (0.0640) #> _______________ __________________ __________________ #> S.E.: Clustered             by: id             by: id #> Observations                   972                864 #> R2                         0.26558            0.25697 #> Adj. R2                    0.26406            0.25438 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Using interactions: #  data(base_did) # We interact the variable 'period' with the variable 'treat' est_did = feols(y ~ x1 + i(period, treat, 5) | id+period, base_did)  # Now we can plot the result of the interaction with coefplot coefplot(est_did)  # You have many more example in coefplot help  # # Instrumental variables #  # To estimate Two stage least squares, # insert a formula describing the endo. vars./instr. relation after a pipe:  base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"fe1\") base$x_inst1 = 0.2 * base$x1 + 0.7 * base$x2 + rpois(150, 2) base$x_inst2 = 0.2 * base$x2 + 0.7 * base$x3 + rpois(150, 3) base$x_endo1 = 0.5 * base$y + 0.5 * base$x3 + rnorm(150, sd = 2) base$x_endo2 = 1.5 * base$y + 0.5 * base$x3 + 3 * base$x_inst1 + rnorm(150, sd = 5)  # Using 2 controls, 1 endogenous var. and 1 instrument res_iv = feols(y ~ x1 + x2 | x_endo1 ~ x_inst1, base)  # The second stage is the default summary(res_iv) #> TSLS estimation, Dep. Var.: y, Endo.: x_endo1, Instr.: x_inst1 #> Second stage: Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error   t value Pr(>|t|)  #> (Intercept) -5.444083   82.90731 -0.065665  0.94773  #> fit_x_endo1  4.156853   44.67892  0.093038  0.92600  #> x1           0.533483    1.80938  0.294843  0.76853  #> x2          -1.358091   19.67381 -0.069030  0.94506  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 7.97755   Adj. R2: -94.4 #> F-test (1st stage), x_endo1: stat = 0.008704, p = 0.925795, on 1 and 146 DoF. #>                  Wu-Hausman: stat = 5.23866 , p = 0.023535, on 1 and 145 DoF.  # To show the first stage: summary(res_iv, stage = 1) #> TSLS estimation, Dep. Var.: x_endo1, Endo.: x_endo1, Instr.: x_inst1 #> First stage: Dep. Var.: x_endo1 #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  1.867844   1.454871  1.283856 0.20122622     #> x_inst1     -0.011136   0.119357 -0.093298 0.92579498     #> x1           0.018677   0.405512  0.046059 0.96332636     #> x2           0.447831   0.128635  3.481404 0.00065818 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.9138   Adj. R2: 0.122258 #> F-test (1st stage): stat = 0.008704, p = 0.925795, on 1 and 146 DoF.  # To show both the first and second stages: summary(res_iv, stage = 1:2) #> IV: First stage: x_endo1 #> TSLS estimation, Dep. Var.: x_endo1, Endo.: x_endo1, Instr.: x_inst1 #> First stage: Dep. Var.: x_endo1 #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  1.867844   1.454871  1.283856 0.20122622     #> x_inst1     -0.011136   0.119357 -0.093298 0.92579498     #> x1           0.018677   0.405512  0.046059 0.96332636     #> x2           0.447831   0.128635  3.481404 0.00065818 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.9138   Adj. R2: 0.122258 #> F-test (1st stage): stat = 0.008704, p = 0.925795, on 1 and 146 DoF. #>  #> IV: Second stage #> TSLS estimation, Dep. Var.: y, Endo.: x_endo1, Instr.: x_inst1 #> Second stage: Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error   t value Pr(>|t|)  #> (Intercept) -5.444083   82.90731 -0.065665  0.94773  #> fit_x_endo1  4.156853   44.67892  0.093038  0.92600  #> x1           0.533483    1.80938  0.294843  0.76853  #> x2          -1.358091   19.67381 -0.069030  0.94506  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 7.97755   Adj. R2: -94.4 #> F-test (1st stage), x_endo1: stat = 0.008704, p = 0.925795, on 1 and 146 DoF. #>                  Wu-Hausman: stat = 5.23866 , p = 0.023535, on 1 and 145 DoF.  # Adding a fixed-effect => IV formula always last! res_iv_fe = feols(y ~ x1 + x2 | fe1 | x_endo1 ~ x_inst1, base)  # With two endogenous regressors res_iv2 = feols(y ~ x1 + x2 | x_endo1 + x_endo2 ~ x_inst1 + x_inst2, base)  # Now there's two first stages => a fixest_multi object is returned sum_res_iv2 = summary(res_iv2, stage = 1)  # You can navigate through it by subsetting: sum_res_iv2[iv = 1] #> Standard-errors: IID  #> IV: First stage: x_endo1 #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  1.850720   1.516307  1.220544 0.22423981     #> x_inst1     -0.011391   0.119922 -0.094984 0.92445853     #> x_inst2      0.003804   0.091032  0.041784 0.96672840     #> x1           0.020822   0.410131  0.050770 0.95957842     #> x2           0.446540   0.132727  3.364349 0.00098184 ***  # The stage argument also works in etable: etable(res_iv, res_iv_fe, res_iv2, order = \"endo\") #>                         res_iv       res_iv_fe          res_iv2 #> Dependent Var.:              y               y                y #>                                                                 #> x_endo1          4.157 (44.68)   3.414 (15.83)   -1.912 (56.41) #> x_endo2                                        -0.0206 (0.2092) #> Constant        -5.444 (82.91)                    5.959 (106.1) #> x1              0.5335 (1.809) 0.6988 (0.9094)   0.6664 (1.476) #> x2              -1.358 (19.67) -0.6848 (6.072)    1.368 (25.36) #> Fixed-Effects:  -------------- --------------- ---------------- #> fe1                         No             Yes               No #> _______________ ______________ _______________ ________________ #> S.E. type                  IID         by: fe1              IID #> Observations               150             150              150 #> R2                     -92.436         -61.946          -18.724 #> Within R2                   --         -164.08               -- #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  etable(res_iv, res_iv_fe, res_iv2, stage = 1:2, order = c(\"endo\", \"inst\"),        group = list(control = \"!endo|inst\")) #>                         res_iv.1      res_iv.2      res_iv_fe.1   res_iv_fe.2 #> IV stages                  First        Second            First        Second #> Dependent Var.:          x_endo1             y          x_endo1             y #>                                                                               #> x_endo1                          4.157 (44.68)                  3.414 (15.83) #> x_endo2                                                                       #> x_inst1         -0.0111 (0.1194)               -0.0127 (0.0508)               #> x_inst2                                                                       #> control                      Yes           Yes              Yes           Yes #> Fixed-Effects:  ---------------- ------------- ---------------- ------------- #> fe1                           No            No              Yes           Yes #> _______________ ________________ _____________ ________________ _____________ #> S.E. type                    IID           IID          by: fe1       by: fe1 #> Observations                 150           150              150           150 #> R2                       0.13993       -92.436          0.14157       -61.946 #> Within R2                     --            --          0.00829       -164.08 #>  #>                        res_iv2.1         res_iv2.2        res_iv2.3 #> IV stages                  First             First           Second #> Dependent Var.:          x_endo1           x_endo2                y #>                                                                     #> x_endo1                                              -1.912 (56.41) #> x_endo2                                            -0.0206 (0.2092) #> x_inst1         -0.0114 (0.1199) 3.295*** (0.3310)                  #> x_inst2          0.0038 (0.0910)  -0.2070 (0.2513)                  #> control                      Yes               Yes              Yes #> Fixed-Effects:  ---------------- ----------------- ---------------- #> fe1                           No                No               No #> _______________ ________________ _________________ ________________ #> S.E. type                    IID               IID              IID #> Observations                 150               150              150 #> R2                       0.13994           0.57761          -18.724 #> Within R2                     --                --               -- #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Multiple estimations: #  # 6 estimations est_mult = feols(c(Ozone, Solar.R) ~ Wind + Temp + csw0(Wind:Temp, Day), airquality)  # We can display the results for the first lhs: etable(est_mult[lhs = 1]) #>                 est_mult[lhs = ..1 est_mult[lhs = 1].2 est_mult[lhs = 1].3 #> Dependent Var.:              Ozone               Ozone               Ozone #>                                                                            #> Constant          -71.03** (23.58)   -248.5*** (48.14)   -257.7*** (48.45) #> Wind            -3.055*** (0.6633)    14.34*** (4.239)    14.58*** (4.228) #> Temp             1.840*** (0.2500)   4.076*** (0.5875)   4.136*** (0.5871) #> Wind x Temp                        -0.2239*** (0.0540) -0.2273*** (0.0539) #> Day                                                        0.2940 (0.2185) #> _______________ __________________ ___________________ ___________________ #> S.E. type                      IID                 IID                 IID #> Observations                   116                 116                 116 #> R2                         0.56871             0.62613             0.63213 #> Adj. R2                    0.56108             0.61611             0.61887 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # And now the second (access can be made by name) etable(est_mult[lhs = \"Solar.R\"]) #>                 est_mult[lhs =..1 est_mult[lhs..2 est_mult[lhs..3 #> Dependent Var.:           Solar.R         Solar.R         Solar.R #>                                                                   #> Constant           -76.36 (82.00)   10.01 (189.6)   45.19 (190.6) #> Wind                2.211 (2.308)  -5.893 (16.20)  -6.214 (16.15) #> Temp            3.075*** (0.8778)   1.982 (2.333)   1.788 (2.329) #> Wind x Temp                       0.1044 (0.2064) 0.1069 (0.2057) #> Day                                               -1.161 (0.8277) #> _______________ _________________ _______________ _______________ #> S.E. type                     IID             IID             IID #> Observations                  146             146             146 #> R2                        0.08198         0.08363         0.09624 #> Adj. R2                   0.06914         0.06427         0.07061 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Now we focus on the two last right hand sides # (note that .N can be used to specify the last item) etable(est_mult[rhs = 2:.N]) #>                 est_mult[rhs = 2..1 est_mult[rhs..2 est_mult[rhs = 2..3 #> Dependent Var.:               Ozone         Solar.R               Ozone #>                                                                         #> Constant          -248.5*** (48.14)   10.01 (189.6)   -257.7*** (48.45) #> Wind               14.34*** (4.239)  -5.893 (16.20)    14.58*** (4.228) #> Temp              4.076*** (0.5875)   1.982 (2.333)   4.136*** (0.5871) #> Wind x Temp     -0.2239*** (0.0540) 0.1044 (0.2064) -0.2273*** (0.0539) #> Day                                                     0.2940 (0.2185) #> _______________ ___________________ _______________ ___________________ #> S.E. type                       IID             IID                 IID #> Observations                    116             146                 116 #> R2                          0.62613         0.08363             0.63213 #> Adj. R2                     0.61611         0.06427             0.61887 #>  #>                 est_mult[rhs..4 #> Dependent Var.:         Solar.R #>                                 #> Constant          45.19 (190.6) #> Wind             -6.214 (16.15) #> Temp              1.788 (2.329) #> Wind x Temp     0.1069 (0.2057) #> Day             -1.161 (0.8277) #> _______________ _______________ #> S.E. type                   IID #> Observations                146 #> R2                      0.09624 #> Adj. R2                 0.07061 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Combining with split est_split = feols(c(Ozone, Solar.R) ~ sw(poly(Wind, 2), poly(Temp, 2)),                   airquality, split = ~ Month)  # You can display everything at once with the print method est_split #> Standard-errors: IID  #>  #>  #> # SAMPLE: 5 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)      29.8505    4.62478  6.45448 1.3810e-06 *** #> poly(Wind, 2)1 -180.1531   68.14588 -2.64364 1.4516e-02 *   #> poly(Wind, 2)2   93.3187   55.68940  1.67570 1.0734e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error t value   Pr(>|t|)     #> (Intercept)     60.8847    13.3314 4.56701 0.00013696 *** #> poly(Temp, 2)1 436.0792   162.6142 2.68168 0.01332077 *   #> poly(Temp, 2)2 156.5738   107.6842 1.45401 0.15945485     #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     185.975    27.2165  6.833171 4.5627e-07 *** #> poly(Wind, 2)1 -101.509   403.9730 -0.251277 8.0374e-01     #> poly(Wind, 2)2 -248.609   327.3103 -0.759552 4.5492e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error   t value Pr(>|t|)     #> (Intercept)     184.737    72.5274  2.547133  0.01769 *   #> poly(Temp, 2)1 -306.202   881.2266 -0.347473  0.73126     #> poly(Temp, 2)2 -822.991   547.8534 -1.502211  0.14609     #>  #>  #> # SAMPLE: 6 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value Pr(>|t|)     #> (Intercept)     21.8206    9.48902  2.299565 0.061137 .   #> poly(Wind, 2)1 166.9646  161.90174  1.031271 0.342179     #> poly(Wind, 2)2 -60.6305   92.54148 -0.655171 0.536652     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error t value   Pr(>|t|)     #> (Intercept)     34.2959    4.15309 8.25794 0.00017054 *** #> poly(Temp, 2)1 114.9172   62.20576 1.84737 0.11420526     #> poly(Temp, 2)2 206.4879   79.99940 2.58112 0.04170670 *   #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)    187.7785    16.4660 11.404021 7.8882e-12 *** #> poly(Wind, 2)1 389.5634   194.8959  1.998828 5.5787e-02 .   #> poly(Wind, 2)2 -72.8180   156.4046 -0.465574 6.4525e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     188.337    21.4096 8.796855 2.0604e-09 *** #> poly(Temp, 2)1  575.587   374.3715 1.537475 1.3581e-01     #> poly(Temp, 2)2  133.702   363.9611 0.367352 7.1622e-01     #>  #>  #> # SAMPLE: 7 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)      49.8115    5.51938  9.024837 5.1064e-09 *** #> poly(Wind, 2)1 -280.6407   84.25343 -3.330912 2.9055e-03 **  #> poly(Wind, 2)2   58.0027  107.62694  0.538924 5.9512e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value Pr(>|t|)     #> (Intercept)     29.2107    16.0689 1.817844 0.082138 .   #> poly(Temp, 2)1 584.0963   265.9188 2.196521 0.038399 *   #> poly(Temp, 2)2  14.1887   198.9617 0.071314 0.943764     #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                  Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     213.16197    16.3352 13.049206 2.0111e-13 *** #> poly(Wind, 2)1 -144.08420   246.7578 -0.583909 5.6396e-01     #> poly(Wind, 2)2    8.70905   324.8247  0.026812 9.7880e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)     172.303    54.6087  3.155239 0.0038125 **  #> poly(Temp, 2)1  835.016   904.9731  0.922697 0.3640481     #> poly(Temp, 2)2 -107.276   645.9680 -0.166070 0.8692954     #>  #>  #> # SAMPLE: 8 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)      49.7316    6.14979  8.08670 3.5632e-08 *** #> poly(Wind, 2)1 -289.2515   97.10974 -2.97860 6.7192e-03 **  #> poly(Wind, 2)2  116.2989   90.00343  1.29216 2.0913e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                 Estimate Std. Error   t value Pr(>|t|)     #> (Intercept)      26.1289    16.6482  1.569471 0.130195     #> poly(Temp, 2)1  678.1406   325.9933  2.080228 0.048834 *   #> poly(Temp, 2)2 -162.1223   188.3344 -0.860822 0.398222     #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)    170.3429    15.8361 10.756599 7.2127e-11 *** #> poly(Wind, 2)1 -78.9215   265.2646 -0.297520 7.6853e-01     #> poly(Wind, 2)2 130.2447   250.8995  0.519111 6.0825e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)    141.7373    34.9269  4.058112 0.0004267 *** #> poly(Temp, 2)1 610.4434   708.8908  0.861125 0.3973535     #> poly(Temp, 2)2 -62.8161   420.0627 -0.149540 0.8823275     #>  #>  #> # SAMPLE: 9 #>  #>  #> ### Dep. var.: Ozone #>  #> Expl. vars.: poly(Wind, 2) #>                 Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)      32.4899    3.00730 10.80367 4.1394e-11 *** #> poly(Wind, 2)1 -151.1122   39.26645 -3.84838 6.9340e-04 *** #> poly(Wind, 2)2  166.7517   45.93576  3.63011 1.2171e-03 **  #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)     35.7733    1.92538 18.57989  < 2.2e-16 *** #> poly(Temp, 2)1 198.9668   30.21319  6.58543 5.5334e-07 *** #> poly(Temp, 2)2 160.4793   32.36259  4.95879 3.7465e-05 *** #>  #> ### Dep. var.: Solar.R #>  #> Expl. vars.: poly(Wind, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)    168.0471    14.9433 11.245665 1.0799e-11 *** #> poly(Wind, 2)1 -94.9627   195.7141 -0.485211 6.3144e-01     #> poly(Wind, 2)2  27.9996   231.6709  0.120859 9.0470e-01     #> --- #> Expl. vars.: poly(Temp, 2) #>                Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)     166.482    15.3173 10.868939 2.3073e-11 *** #> poly(Temp, 2)1  204.784   241.8651  0.846686 4.0461e-01     #> poly(Temp, 2)2 -146.653   256.4108 -0.571947 5.7209e-01      # Different way of displaying the results with \"compact\" summary(est_split, \"compact\") #>    sample     lhs           rhs     (Intercept)    poly(Wind, 2)1 #> 1       5 Ozone   poly(Wind, 2)  29.9*** (4.62)   -180.2* (68.1)  #> 2       5 Ozone   poly(Temp, 2)  60.9*** (13.3)                   #> 3       5 Solar.R poly(Wind, 2) 186.0*** (27.2)    -101.5 (404.0) #> 4       5 Solar.R poly(Temp, 2)   184.7* (72.5)                   #> 5       6 Ozone   poly(Wind, 2)    21.8. (9.49)     167.0 (161.9) #> 6       6 Ozone   poly(Temp, 2)  34.3*** (4.15)                   #> 7       6 Solar.R poly(Wind, 2) 187.8*** (16.5)    389.6. (194.9) #> 8       6 Solar.R poly(Temp, 2) 188.3*** (21.4)                   #> 9       7 Ozone   poly(Wind, 2)  49.8*** (5.52)  -280.6** (84.3)  #> 10      7 Ozone   poly(Temp, 2)    29.2. (16.1)                   #> 11      7 Solar.R poly(Wind, 2) 213.2*** (16.3)    -144.1 (246.8) #> 12      7 Solar.R poly(Temp, 2)  172.3** (54.6)                   #> 13      8 Ozone   poly(Wind, 2)  49.7*** (6.15)  -289.3** (97.1)  #> 14      8 Ozone   poly(Temp, 2)     26.1 (16.6)                   #> 15      8 Solar.R poly(Wind, 2) 170.3*** (15.8)     -78.9 (265.3) #> 16      8 Solar.R poly(Temp, 2) 141.7*** (34.9)                   #> 17      9 Ozone   poly(Wind, 2)  32.5*** (3.01) -151.1*** (39.3)  #> 18      9 Ozone   poly(Temp, 2)  35.8*** (1.93)                   #> 19      9 Solar.R poly(Wind, 2) 168.0*** (14.9)     -95.0 (195.7) #> 20      9 Solar.R poly(Temp, 2) 166.5*** (15.3)                   #>     poly(Wind, 2)2   poly(Temp, 2)1   poly(Temp, 2)2 #> 1     93.3 (55.7)                                    #> 2                    436.1* (162.6)    156.6 (107.7) #> 3   -248.6 (327.3)                                   #> 4                    -306.2 (881.2)   -823.0 (547.9) #> 5    -60.6 (92.5)                                    #> 6                     114.9 (62.2)    206.5* (80.0)  #> 7    -72.8 (156.4)                                   #> 8                     575.6 (374.4)    133.7 (364.0) #> 9     58.0 (107.6)                                   #> 10                   584.1* (265.9)     14.2 (199.0) #> 11    8.71 (324.8)                                   #> 12                    835.0 (905.0)   -107.3 (646.0) #> 13   116.3 (90.0)                                    #> 14                   678.1* (326.0)   -162.1 (188.3) #> 15   130.2 (250.9)                                   #> 16                    610.4 (708.9)    -62.8 (420.1) #> 17 166.8** (45.9)                                    #> 18                 199.0*** (30.2)  160.5*** (32.4)  #> 19    28.0 (231.7)                                   #> 20                    204.8 (241.9)   -146.7 (256.4)  # You can still select which sample/LHS/RHS to display est_split[sample = 1:2, lhs = 1, rhs = 1] #> Standard-errors: IID  #> Dep. var.: Ozone #> Expl. vars.: poly(Wind, 2) #> Sample: 5 #>                 Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)      29.8505    4.62478  6.45448 1.3810e-06 *** #> poly(Wind, 2)1 -180.1531   68.14588 -2.64364 1.4516e-02 *   #> poly(Wind, 2)2   93.3187   55.68940  1.67570 1.0734e-01     #> --- #> Sample: 6 #>                Estimate Std. Error   t value Pr(>|t|)     #> (Intercept)     21.8206    9.48902  2.299565 0.061137 .   #> poly(Wind, 2)1 166.9646  161.90174  1.031271 0.342179     #> poly(Wind, 2)2 -60.6305   92.54148 -0.655171 0.536652      # # Split sample estimations #  base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\"))  est  = feols(y ~ x.[1:3], base, split = ~species) etable(est) #>                               est.1              est.2              est.3 #> Sample (species)             setosa         versicolor          virginica #> Dependent Var.:                   y                  y                  y #>                                                                           #> Constant          2.352*** (0.3929)  1.896*** (0.5071)    0.6999 (0.5336) #> x1               0.6548*** (0.0925)   0.3869. (0.2045)   0.3303. (0.1743) #> x2                  0.2376 (0.2080) 0.9083*** (0.1654) 0.9455*** (0.0907) #> x3                  0.2521 (0.3469)   -0.6792 (0.4354)   -0.1698 (0.1981) #> ________________ __________________ __________________ __________________ #> S.E. type                       IID                IID                IID #> Observations                     50                 50                 50 #> R2                          0.57514            0.60503            0.76522 #> Adj. R2                     0.54743            0.57927            0.74991 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # You can select specific values with the %keep% and %drop% operators # By default, partial matching is enabled. It should refer to a single variable. est  = feols(y ~ x.[1:3], base, split = ~species %keep% c(\"set\", \"vers\")) etable(est) #>                               est.1              est.2 #> Sample (species)             setosa         versicolor #> Dependent Var.:                   y                  y #>                                                        #> Constant          2.352*** (0.3929)  1.896*** (0.5071) #> x1               0.6548*** (0.0925)   0.3869. (0.2045) #> x2                  0.2376 (0.2080) 0.9083*** (0.1654) #> x3                  0.2521 (0.3469)   -0.6792 (0.4354) #> ________________ __________________ __________________ #> S.E. type                       IID                IID #> Observations                     50                 50 #> R2                          0.57514            0.60503 #> Adj. R2                     0.54743            0.57927 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # You can supply regular expression by using an @ first. # regex can match several values. est  = feols(y ~ x.[1:3], base, split = ~species %keep% c(\"@set|vers\")) etable(est) #>                               est.1              est.2 #> Sample (species)             setosa         versicolor #> Dependent Var.:                   y                  y #>                                                        #> Constant          2.352*** (0.3929)  1.896*** (0.5071) #> x1               0.6548*** (0.0925)   0.3869. (0.2045) #> x2                  0.2376 (0.2080) 0.9083*** (0.1654) #> x3                  0.2521 (0.3469)   -0.6792 (0.4354) #> ________________ __________________ __________________ #> S.E. type                       IID                IID #> Observations                     50                 50 #> R2                          0.57514            0.60503 #> Adj. R2                     0.54743            0.57927 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Argument sliding #  # When the data set is set up globally, you can use the vcov argument implicitly  base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\"))  no_sliding = feols(y ~ x1 + x2, base, ~species)  # With sliding setFixest_estimation(data = base)  # ~species is implicitly deduced to be equal to 'vcov' sliding = feols(y ~ x1 + x2, ~species)  etable(no_sliding, sliding) #>                         no_sliding            sliding #> Dependent Var.:                  y                  y #>                                                       #> Constant          2.249** (0.1626)   2.249** (0.1626) #> x1               0.5955** (0.0517)  0.5955** (0.0517) #> x2              0.4719*** (0.0069) 0.4719*** (0.0069) #> _______________ __________________ __________________ #> S.E.: Clustered        by: species        by: species #> Observations                   150                150 #> R2                         0.84018            0.84018 #> Adj. R2                    0.83800            0.83800 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Resetting the global options setFixest_estimation(data = NULL)   # # Formula expansions #  # By default, the features of the xpd function are enabled in # all fixest estimations # Here's a few examples  base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\"))  # dot square bracket operator feols(y ~ x.[1:3], base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.310327   Adj. R2: 0.855706  # fetching variables via regular expressions: ..(\"regex\") feols(y ~ ..(\"1|2\"), base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.249140   0.247970  9.07022 7.0385e-16 *** #> x1          0.595525   0.069328  8.58994 1.1633e-14 *** #> x2          0.471920   0.017118 27.56916  < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.329937   Adj. R2: 0.838003  # NOTA: it also works for multiple LHS mult1 = feols(x.[1:2] ~ y + species, base) mult2 = feols(..(\"y|3\") ~ x.[1:2] + species, base) etable(mult1, mult2) #>                               mult1.1            mult1.2             mult2.1 #> Dependent Var.:                    x1                 x2                   y #>                                                                              #> Constant            1.677*** (0.2354) -1.702*** (0.2301)   2.390*** (0.2623) #> y                  0.3499*** (0.0463) 0.6321*** (0.0453)                     #> speciesversicolor -0.9834*** (0.0721)  2.210*** (0.0705) -0.9558*** (0.2152) #> speciesvirginica   -1.008*** (0.0933)  3.090*** (0.0912)  -1.394*** (0.2857) #> x1                                                        0.4322*** (0.0814) #> x2                                                        0.7756*** (0.0643) #> _________________ ___________________ __________________ ___________________ #> S.E. type                         IID                IID                 IID #> Observations                      150                150                 150 #> R2                            0.56925            0.97489             0.86331 #> Adj. R2                       0.56040            0.97438             0.85954 #>  #>                               mult2.2 #> Dependent Var.:                    x3 #>                                       #> Constant          -0.6953*** (0.1424) #> y                                     #> speciesversicolor  0.7369*** (0.1169) #> speciesvirginica    1.176*** (0.1551) #> x1                 0.2020*** (0.0442) #> x2                 0.1701*** (0.0349) #> _________________ ___________________ #> S.E. type                         IID #> Observations                      150 #> R2                            0.95243 #> Adj. R2                       0.95112 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # Use .[, stuff] to include variables in functions: feols(y ~ csw(x.[, 1:3]), base) #> Standard-errors: IID  #> Expl. vars.: x1 #>              Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)  6.526223   0.478896 13.62763 < 2.2e-16 *** #> x1          -0.223361   0.155081 -1.44029    0.1519     #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.249140   0.247970  9.07022 7.0385e-16 *** #> x1          0.595525   0.069328  8.58994 1.1633e-14 *** #> x2          0.471920   0.017118 27.56916  < 2.2e-16 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 ***  # Same for ..(, \"regex\") feols(y ~ csw(..(,\"x\")), base) #> Standard-errors: IID  #> Expl. vars.: x1 #>              Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)  6.526223   0.478896 13.62763 < 2.2e-16 *** #> x1          -0.223361   0.155081 -1.44029    0.1519     #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.249140   0.247970  9.07022 7.0385e-16 *** #> x1          0.595525   0.069328  8.58994 1.1633e-14 *** #> x2          0.471920   0.017118 27.56916  < 2.2e-16 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 ***"},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes fit statistics of fixest objects — fitstat","title":"Computes fit statistics of fixest objects — fitstat","text":"Computes various fit statistics fixest estimations.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes fit statistics of fixest objects — fitstat","text":"","code":"fitstat(   x,   type,   simplify = FALSE,   verbose = TRUE,   show_types = FALSE,   frame = parent.frame(),   ... )"},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes fit statistics of fixest objects — fitstat","text":"x fixest estimation. type Character vector one sided formula. type fit statistic computed. classic ones : n, rmse, r2, pr2, f, wald, ivf, ivwald. full list details section use show_types = TRUE. , can register types fitstat_register. simplify Logical, default FALSE. default list returned whose names selected types. simplify = TRUE one type selected, element directly returned (ie nested list). verbose Logical, default TRUE. TRUE, object class fixest_fitstat returned (associated print method triggered). FALSE simple list returned instead. show_types Logical, default FALSE. TRUE, prompts available types. frame environment evaluate variables, default parent.frame(). used argument type formula values formula extended dot square bracket operator. Mostly internal use. ... elements passed methods may used compute statistics (example can pass arguments compute VCOV using type = \"g\" type = \"wald\".).","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes fit statistics of fixest objects — fitstat","text":"default object class fixest_fitstat returned. Using verbose = FALSE returns simple list. Finally, one type selected, simplify = TRUE leads selected type returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":"registering-your-own-types","dir":"Reference","previous_headings":"","what":"Registering your own types","title":"Computes fit statistics of fixest objects — fitstat","text":"can register custom fit statistics function fitstat_register.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":"available-types","dir":"Reference","previous_headings":"","what":"Available types","title":"Computes fit statistics of fixest objects — fitstat","text":"types case sensitive, please use lower case . types available : n, ll, aic, bic, rmse: number observations, log-likelihood, AIC, BIC root mean squared error, respectively. : Mean dependent variable. g: degrees freedom used compute t-test (influences p-values coefficients). VCOV clustered, value equal minimum cluster size, otherwise, equal sample size minus number variables. r2, ar2, wr2, awr2, pr2, apr2, wpr2, awpr2: r2 can obtained function r2. stands 'adjusted', w 'within' p 'pseudo'. Note order letters , w p matter. pseudo R2s McFadden's R2s (ratios log-likelihoods). theta: -dispersion parameter Negative Binomial models. Low values mean high overdispersion. f, wf: F-tests nullity coefficients. w stands 'within'. types return following values: stat, p, df1 df2. want display one , use name dot: e.g. f.stat give statistic F-test, wf.p give p-values F-test projected model (.e. projected onto fixed-effects). wald: Wald test joint nullity coefficients. test always excludes intercept fixed-effects. type returns following values: stat, p, df1, df2 vcov. element vcov reports way VCOV matrix computed since directly influences statistic. ivf, ivf1, ivf2, ivfall: statistics specific IV estimations. report either IV F-test (namely Cragg-Donald F statistic presence one endogenous regressor) first stage (ivf ivf1), second stage (ivf2) (ivfall). F-test first stage commonly named weak instrument test. value ivfall useful etable 1st 2nd stages displayed (leads 1st stage F-test(s) displayed 1st stage estimation(s), 2nd stage one 2nd stage estimation -- otherwise, ivf1 also displayed 2nd stage estimation). types return following values: stat, p, df1 df2. ivwald, ivwald1, ivwald2, ivwaldall: statistics specific IV estimations. report either IV Wald-test first stage (ivwald ivwald1), second stage (ivwald2) (ivwaldall). Wald-test first stage commonly named weak instrument test. Note estimation done robust VCOV one endogenous regressor, equivalent Kleibergen-Paap statistic. value ivwaldall useful etable 1st 2nd stages displayed (leads 1st stage Wald-test(s) displayed 1st stage estimation(s), 2nd stage one 2nd stage estimation -- otherwise, ivwald1 also displayed 2nd stage estimation). types return following values: stat, p, df1, df2, vcov. cd: Cragg-Donald test weak instruments. kpr: Kleibergen-Paap test weak instruments. wh: statistic specific IV estimations. Wu-Hausman endogeneity test. H0 absence endogeneity instrumented variables. returns following values: stat, p, df1, df2. sargan: Sargan test overidentifying restrictions. H0: instruments correlated second stage residuals. returns following values: stat, p, df. lr, wlr: Likelihood ratio within likelihood ratio tests. returns following elements: stat, p, df. Concerning within-LR test, note , contrary estimations femlm feNmlm, estimations feglm/fepois need estimate model fixed-effects may prove time-consuming (depending model). Bottom line, really need within-LR estimate Poisson model, use femlm instead fepois (former uses direct ML maximization FEs model product).","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes fit statistics of fixest objects — fitstat","text":"","code":"data(trade) gravity = feols(log(Euros) ~ log(dist_km) | Destination + Origin, trade)  # Extracting the 'working' number of observations used to compute the pvalues fitstat(gravity, \"g\", simplify = TRUE) #> [1] 15  # Some fit statistics fitstat(gravity, ~ rmse + r2 + wald + wf) #>                 RMSE: 2.26215 #>                   R2: 0.50428 #> Wald (joint nullity): stat =   272.9, p < 2.2e-16, on 1 and 38,309 DoF, VCOV: Clustered (Destination). #>   F-test (projected): stat = 5,832.8, p < 2.2e-16, on 1 and 38,295 DoF.  # You can use them in etable etable(gravity, fitstat = ~ rmse + r2 + wald + wf) #>                                 gravity #> Dependent Var.:              log(Euros) #>                                         #> log(dist_km)         -2.072*** (0.1254) #> Fixed-Effects:       ------------------ #> Destination                         Yes #> Origin                              Yes #> ____________________ __________________ #> S.E.: Clustered         by: Destination #> RMSE                             2.2622 #> R2                              0.50428 #> Wald (joint nullity)             272.90 #> F-test (projected)              5,832.8 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # For wald and wf, you could show the pvalue instead: etable(gravity, fitstat = ~ rmse + r2 + wald.p + wf.p) #>                                          gravity #> Dependent Var.:                       log(Euros) #>                                                  #> log(dist_km)                  -2.072*** (0.1254) #> Fixed-Effects:                ------------------ #> Destination                                  Yes #> Origin                                       Yes #> _____________________________ __________________ #> S.E.: Clustered                  by: Destination #> RMSE                                      2.2622 #> R2                                       0.50428 #> Wald (joint nullity), p-value           4.32e-61 #> F-test (projected), p-value             NaNe-Inf #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Now let's display some statistics that are not built-in # => we use fitstat_register to create them  # We need: a) type name, b) the function to be applied #          c) (optional) an alias  fitstat_register(\"tstand\", function(x) tstat(x, se = \"stand\")[1], \"t-stat (regular)\") fitstat_register(\"thc\", function(x) tstat(x, se = \"heter\")[1], \"t-stat (HC1)\") fitstat_register(\"t1w\", function(x) tstat(x, se = \"clus\")[1], \"t-stat (clustered)\") fitstat_register(\"t2w\", function(x) tstat(x, se = \"twow\")[1], \"t-stat (2-way)\")  # Now we can use these keywords in fitstat: etable(gravity, fitstat = ~ . + tstand + thc + t1w + t2w) #>                               gravity #> Dependent Var.:            log(Euros) #>                                       #> log(dist_km)       -2.072*** (0.1254) #> Fixed-Effects:     ------------------ #> Destination                       Yes #> Origin                            Yes #> __________________ __________________ #> S.E.: Clustered       by: Destination #> Observations                   38,325 #> R2                            0.50428 #> Within R2                     0.13218 #> t-stat (regular)              -76.373 #> t-stat (HC1)                  -80.129 #> t-stat (clustered)            -16.520 #> t-stat (2-way)                -13.268 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Note that the custom stats we created are can easily lead # to errors, but that's another story!"},{"path":"https://lrberge.github.io/fixest/reference/fitstat_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register custom fit statistics — fitstat_register","title":"Register custom fit statistics — fitstat_register","text":"Enables registration custom fi statistics can easily summoned function fitstat.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat_register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register custom fit statistics — fitstat_register","text":"","code":"fitstat_register(type, fun, alias = NULL, subtypes = NULL)"},{"path":"https://lrberge.github.io/fixest/reference/fitstat_register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register custom fit statistics — fitstat_register","text":"type character scalar giving type-name. fun function applied fixest estimation. must return either scalar, list unitary elements. number elements returned greater 1, element must named! fit statistic valid given estimation, plain NA value returned. alias (named) character vector. alias used lieu type name display methods (ie used print.fixest_fitstat etable). function returns several values, .e. sub-types, can give alias sub-types. syntax c(\"type\" = \"alias\", \"subtype_i\" = \"alias_i\"), \"type\" (resp. \"subtype\") value argument type resp. (subtypes). can also give alias encompassing type sub-type syntax c(\"type.subtype_i\" = \"alias\"). subtypes character vector giving name element returned function fun. used function returns one value. Note can use shortcut \"test\" sub-types \"stat\", \"p\" \"df\"; \"test2\" \"stat\", \"p\", \"df1\" \"df2\".","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat_register.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register custom fit statistics — fitstat_register","text":"several components computed statistics (.e. function returns several elements), using argument subtypes, giving names components, mandatory. ensure statistic can used built-statistic (many edge cases impeding automatic deduction).","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat_register.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Register custom fit statistics — fitstat_register","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitstat_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register custom fit statistics — fitstat_register","text":"","code":"# An estimation base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\") est = feols(y ~ x1 + x2 | species, base)  # # single valued tests #  # say you want to add the coefficient of variation of the dependent variable cv = function(est){   y = model.matrix(est, type = \"lhs\")   sd(y)/mean(y) }  # Now we register the routine fitstat_register(\"cvy\", cv, \"Coef. of Variation (dep. var.)\")  # now we can summon the registered routine with its type (\"cvy\") fitstat(est, \"cvy\") #> Coef. of Variation (dep. var.): 0.141711  # # Multi valued tests #  # Let's say you want a Wald test with an heteroskedasticiy robust variance  # First we create the function hc_wald = function(est){   w = wald(est, keep = \"!Intercept\", print = FALSE, se = \"hetero\")   head(w, 4) } # This test returns a vector of 4 elements: stat, p, df1 and df2  # Now we register the routine fitstat_register(\"hc_wald\", hc_wald, \"Wald (HC1)\", \"test2\")  # You can access the statistic, as before fitstat(est, \"hc_wald\") #> Wald (HC1): stat = 122.7, p < 2.2e-16, on 2 and 145 DoF.  # But you can also access the sub elements fitstat(est, \"hc_wald.p\") #> Wald (HC1), p-value: 6.573e-32"},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts fitted values from a fixest fit — fitted.fixest","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"function extracts fitted values model estimated femlm, feols feglm. fitted values returned expected predictor.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"","code":"# S3 method for fixest fitted(object, type = c(\"response\", \"link\"), na.rm = TRUE, ...)  # S3 method for fixest fitted.values(object, type = c(\"response\", \"link\"), na.rm = TRUE, ...)"},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. type Character either equal \"response\" (default) \"link\". type=\"response\", output level response variable, .e. expected predictor \\(E(Y|X)\\). \"link\", output level explanatory variables, .e. linear predictor \\(X\\cdot \\beta\\). na.rm Logical, default TRUE. FALSE number observation returned number observations original data set, otherwise number observations used estimation. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"returns numeric vector length number observations used estimate model. type = \"response\", value returned expected predictor, .e. expected value dependent variable fitted model: \\(E(Y|X)\\). type = \"link\", value returned linear predictor fitted model, \\(X\\cdot \\beta\\) (remind \\(E(Y|X) = f(X\\cdot \\beta)\\)).","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"function returns expected predictor fixest fit. likelihood functions detailed femlm help page.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/fitted.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts fitted values from a fixest fit — fitted.fixest","text":"","code":"# simple estimation on iris data, using \"Species\" fixed-effects res_poisson = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +                     Petal.Width | Species, iris)  # we extract the fitted values y_fitted_poisson = fitted(res_poisson)  # Same estimation but in OLS (Gaussian family) res_gaussian = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +                     Petal.Width | Species, iris, family = \"gaussian\")  y_fitted_gaussian = fitted(res_gaussian)  # comparison of the fit for the two families plot(iris$Sepal.Length, y_fitted_poisson) points(iris$Sepal.Length, y_fitted_gaussian, col = 2, pch = 2)"},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"function retrieves fixed effects fixest estimation. useful one fixed-effect dimensions.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"","code":"# S3 method for fixest fixef(   object,   notes = getFixest_notes(),   sorted = TRUE,   nthreads = getFixest_nthreads(),   fixef.tol = 1e-05,   fixef.iter = 10000,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"object fixest estimation (e.g. obtained using feols feglm). notes Logical. Whether display note fixed-effects coefficients regular. sorted Logical, default TRUE. Whether order fixed-effects names. FALSE, order used demeaning algorithm used. nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. fixef.tol Precision used obtain fixed-effects. Defaults 1e-5. corresponds maximum absolute difference allowed two coefficients successive iterations. Argument fixef.tol lower 10000*.Machine$double.eps. Note parameter dynamically controlled algorithm. fixef.iter Maximum number iterations fixed-effects algorithm (use 2+ fixed-effects). Default 10000. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"list containing vectors fixed effects. 1 fixed-effect, attribute “references” created. vector length number fixed-effects, element contains number coefficients set references. construction, elements first fixed-effect dimension never set references. presence regular fixed-effects, Q-1 references (Q number fixed-effects).","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"fixed-effect coefficients regular, several reference points need set: means fixed-effects coefficients directly interpreted. case, warning raised.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixef.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Fixed-Effects from a fixest estimation. — fixef.fixest","text":"","code":"data(trade)  # We estimate the effect of distance on trade => we account for 3 fixed-effects est_pois = femlm(Euros ~ log(dist_km)|Origin+Destination+Product, trade)  # Obtaining the fixed-effects coefficients: fe_trade = fixef(est_pois)  # The fixed-effects of the first fixed-effect dimension: head(fe_trade$Origin) #>       AT       BE       DE       DK       ES       FI  #> 22.67038 23.72304 24.86999 23.60329 25.12917 21.80906   # Summary information: summary(fe_trade) #> Fixed_effects coefficients #>                         Origin Destination Product #> Number of fixed-effects     15          15      20 #> Number of references         0           1       1 #> Mean                      23.5        3.09  0.0127 #> Standard-deviation        1.28        1.11    1.36 #>  #> COEFFICIENTS: #>   Origin:    AT    BE    DE   DK    ES                  #>           22.67 23.72 24.87 23.6 25.13 ... 10 remaining #> ----- #>   Destination:    AT    BE    DE    DK    ES                  #>                2.436 2.696 4.323 2.451 4.043 ... 10 remaining #> ----- #>   Product: 1     2     3     4      5                  #>            0 1.414 0.656 1.449 -1.521 ... 15 remaining  # Plotting them: plot(fe_trade)"},{"path":"https://lrberge.github.io/fixest/reference/fixef_reexported.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions exported from nlme to implement fixest methods — fixef_reexported","title":"Functions exported from nlme to implement fixest methods — fixef_reexported","text":"package fixest uses fixef method nlme. Unfortunately, re-exporting method required order attach package nlme.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixef_reexported.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions exported from nlme to implement fixest methods — fixef_reexported","text":"help package nlme: fixef. help package fixest : fixef.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixef_reexported.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Functions exported from nlme to implement fixest methods — fixef_reexported","text":"find workaround thanks package plm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast and User-Friendly Fixed-Effects Estimations — fixest-package","title":"Fast and User-Friendly Fixed-Effects Estimations — fixest-package","text":"package fixest provides family functions perform estimations multiple fixed-effects. Standard-errors can easily intuitively clustered. also includes tools seamlessly export results various estimations. get started, look introduction.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixest-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast and User-Friendly Fixed-Effects Estimations — fixest-package","text":"main features : Estimation. core functions : feols, feglm femlm estimate, respectively, linear models, generalized linear models maximum likelihood models multiple fixed-effects. function feNmlm allows inclusion non-linear parameters right hand sides. Finally fepois fenegbin shorthands estimate Poisson Negative Binomial models. Multiple estimationsYou can perform multiple estimations stepwise functions. easy manipulate multiple results associated methods. See introduction dedicated vignette: Multiple estimations Easy flexible clustering standard-errors. using arguments vcov ssc (see summary.fixest). sense standard errors computed, see vignette standard-errors. Visualization exportation results. can visualize results multiple estimations R, export Latex using function etable. vignette details customize Latex tables: Exporting estimation tables. Plot multiple results. can plot coefficients confidence intervals estimations easily function coefplot. function also offers specific layout interactions.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixest-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast and User-Friendly Fixed-Effects Estimations — fixest-package","text":"Berge, Laurent, 2018, \"Efficient estimation maximum likelihood models multiple fixed-effects: R package FENmlm.\" CREA Discussion Papers, 13 ().","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/fixest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast and User-Friendly Fixed-Effects Estimations — fixest-package","text":"Maintainer: Laurent Berge laurent.berge@u-bordeaux.fr contributors: Sebastian Krantz [contributor] Grant McDermott grantmcd@uoregon.edu (ORCID) [contributor]","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixest_startup_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Permanently removes the fixest package startup message — fixest_startup_msg","title":"Permanently removes the fixest package startup message — fixest_startup_msg","text":"Package startup messages can annoying, although sometimes can necessary. Use function prevent fixest's package startup message popping loading. specific current project.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixest_startup_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permanently removes the fixest package startup message — fixest_startup_msg","text":"","code":"fixest_startup_msg(x)"},{"path":"https://lrberge.github.io/fixest/reference/fixest_startup_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permanently removes the fixest package startup message — fixest_startup_msg","text":"x Logical, default. FALSE, package startup message removed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/fixest_startup_msg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permanently removes the fixest package startup message — fixest_startup_msg","text":"Note function introduced cope first fixest startup message (version 0.9.0). function works R >= 4.0.0. startup messages R < 4.0.0.","code":""},{"path":"https://lrberge.github.io/fixest/reference/formula.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the formula of a fixest fit — formula.fixest","title":"Extract the formula of a fixest fit — formula.fixest","text":"function extracts formula fixest estimation (obtained femlm, feols feglm). estimation done fixed-effects, added formula pipe (“|”). estimation done non linear parameters part, added formula ().","code":""},{"path":"https://lrberge.github.io/fixest/reference/formula.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the formula of a fixest fit — formula.fixest","text":"","code":"# S3 method for fixest formula(x, type = c(\"full\", \"linear\", \"iv\", \"NL\"), ...)"},{"path":"https://lrberge.github.io/fixest/reference/formula.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the formula of a fixest fit — formula.fixest","text":"x object class fixest. Typically result femlm, feols feglm estimation. type character scalar. Default type = \"full\" gives back formula containing linear part model along fixed-effects () IV part (). type = \"linear\" linear formula returned. type = \"NL\" non linear parameters part returned. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/formula.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the formula of a fixest fit — formula.fixest","text":"returns formula.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/formula.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract the formula of a fixest fit — formula.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/formula.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the formula of a fixest fit — formula.fixest","text":"","code":"# simple estimation on iris data, using \"Species\" fixed-effects res = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +             Petal.Width | Species, iris)  # formula with the fixed-effect variable formula(res) #> Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width | Species  # linear part without the fixed-effects formula(res, \"linear\") #> Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width #> <environment: 0x000001b14ae78408>"},{"path":"https://lrberge.github.io/fixest/reference/hatvalues.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Hat values for fixest objects — hatvalues.fixest","title":"Hat values for fixest objects — hatvalues.fixest","text":"Computes hat values feols feglm estimations. works fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/hatvalues.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hat values for fixest objects — hatvalues.fixest","text":"","code":"# S3 method for fixest hatvalues(model, ...)"},{"path":"https://lrberge.github.io/fixest/reference/hatvalues.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hat values for fixest objects — hatvalues.fixest","text":"model fixest object. instance feols feglm. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/hatvalues.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hat values for fixest objects — hatvalues.fixest","text":"Returns vector length number observations used estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/hatvalues.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hat values for fixest objects — hatvalues.fixest","text":"Hat values available fenegbin, femlm feNmlm estimations. fixed-effects, hat values reduced form different hat values full model. get costlessly hat values full model reduced form. require reestimate model fixed-effects regular variables.","code":""},{"path":"https://lrberge.github.io/fixest/reference/hatvalues.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hat values for fixest objects — hatvalues.fixest","text":"","code":"est = feols(Petal.Length ~ Petal.Width + Sepal.Width, iris) head(hatvalues(est)) #> [1] 0.02042587 0.02110119 0.01838332 0.01933430 0.02273855 0.03265226"},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, or interact variables with, factors — i","title":"Create, or interact variables with, factors — i","text":"Treat variable factor, interacts variable factor. Values dropped/kept factor can easily set. Note interact fixed-effects, function used: instead use directly syntax fe1^fe2.","code":""},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, or interact variables with, factors — i","text":"","code":"i(factor_var, var, ref, keep, bin, ref2, keep2, bin2, ...)"},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, or interact variables with, factors — i","text":"factor_var vector (type) treated factor. can set references (.e. exclude values create dummies) ref argument. var variable length factor_var. variable interacted factor factor_var. can numeric factor-like. force numeric variable treated factor, can add . prefix variable name. instance take numeric variable x_num: (x_fact, x_num) treat x_num numeric (x_fact, .x_num) treat x_num factor (shortcut .factor(x_num)). ref vector values taken references factor_var. Can also logical: TRUE, first value factor_var removed. ref character vector, partial matching applied values; use \"@\" first character enable regular expression matching. See examples. keep vector values kept factor_var (others dropped). default values factor_var keep character vector partial matching applied. Use \"@\" first character enable regular expression matching instead. bin list values grouped, vector, formula, special values \"bin::digit\" \"cut::values\". create new value old values, use bin = list(\"new_value\"=old_values) old_values vector existing values. can use .() list(). accepts regular expressions, must start \"@\", like bin=\"@Aug|Dec\". accepts one-sided formulas must contain variable x, e.g. bin=list(\"<2\" = ~x < 2). names list new names. new name missing, first value matched becomes new name. name, adding \"@d\", d digit, relocate value position d: useful change position factors. Use \"@\" first item make subsequent items located first factor. Feeding vector like using list without name single element. vector numeric, can use special value \"bin::digit\" group every digit element. example x represents years, using bin=\"bin::2\" creates bins two years. data, using \"!bin::digit\" groups every digit consecutive values starting first value. Using \"!!bin::digit\" starting last value. numeric vectors can: ) use \"cut::n\" cut vector n equal parts, b) use \"cut::]b[\" create following bins: [min, ], ], b[, [b, max]. latter syntax sequence number/quartile (q0 q4)/percentile (p0 p100) followed open closed square bracket. can add custom bin names adding character vector 'cut::values'. See details examples. Dot square bracket expansion (see dsb) enabled. ref2 vector values dropped var. default values var ref2 character vector partial matching applied. Use \"@\" first character enable regular expression matching instead. keep2 vector values kept var (others dropped). default values var keep2 character vector partial matching applied. Use \"@\" first character enable regular expression matching instead. bin2 list vector defining binning second variable. See help argument bin details (look help function bin). can use .() list(). ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create, or interact variables with, factors — i","text":"returns matrix number rows length factor_var. interacted variable interacted numeric variable, number columns equal number cases contained factor_var minus reference(s). interacted variable factor, number columns number combined cases factor_var var.","code":""},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create, or interact variables with, factors — i","text":"interact fixed-effects, function used: instead use directly syntax fe1^fe2 fixed-effects part formula. Please see details examples help page feols.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create, or interact variables with, factors — i","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, or interact variables with, factors — i","text":"","code":"# # Simple illustration #  x = rep(letters[1:4], 3)[1:10] y = rep(1:4, c(1, 2, 3, 4))  # interaction data.frame(x, y, i(x, y, ref = TRUE)) #>    x y b c d #> 1  a 1 0 0 0 #> 2  b 2 2 0 0 #> 3  c 2 0 2 0 #> 4  d 3 0 0 3 #> 5  a 3 0 0 0 #> 6  b 3 3 0 0 #> 7  c 4 0 4 0 #> 8  d 4 0 0 4 #> 9  a 4 0 0 0 #> 10 b 4 4 0 0  # without interaction data.frame(x, i(x, \"b\")) #>    x a c d #> 1  a 1 0 0 #> 2  b 0 0 0 #> 3  c 0 1 0 #> 4  d 0 0 1 #> 5  a 1 0 0 #> 6  b 0 0 0 #> 7  c 0 1 0 #> 8  d 0 0 1 #> 9  a 1 0 0 #> 10 b 0 0 0  # you can interact factors too z = rep(c(\"e\", \"f\", \"g\"), c(5, 3, 2)) data.frame(x, z, i(x, z)) #>    x z a.e a.g b.e b.f b.g c.e c.f d.e d.f #> 1  a e   1   0   0   0   0   0   0   0   0 #> 2  b e   0   0   1   0   0   0   0   0   0 #> 3  c e   0   0   0   0   0   1   0   0   0 #> 4  d e   0   0   0   0   0   0   0   1   0 #> 5  a e   1   0   0   0   0   0   0   0   0 #> 6  b f   0   0   0   1   0   0   0   0   0 #> 7  c f   0   0   0   0   0   0   1   0   0 #> 8  d f   0   0   0   0   0   0   0   0   1 #> 9  a g   0   1   0   0   0   0   0   0   0 #> 10 b g   0   0   0   0   1   0   0   0   0  # to force a numeric variable to be treated as a factor: use i. data.frame(x, y, i(x, i.y)) #>    x y a.1 a.3 a.4 b.2 b.3 b.4 c.2 c.4 d.3 d.4 #> 1  a 1   1   0   0   0   0   0   0   0   0   0 #> 2  b 2   0   0   0   1   0   0   0   0   0   0 #> 3  c 2   0   0   0   0   0   0   1   0   0   0 #> 4  d 3   0   0   0   0   0   0   0   0   1   0 #> 5  a 3   0   1   0   0   0   0   0   0   0   0 #> 6  b 3   0   0   0   0   1   0   0   0   0   0 #> 7  c 4   0   0   0   0   0   0   0   1   0   0 #> 8  d 4   0   0   0   0   0   0   0   0   0   1 #> 9  a 4   0   0   1   0   0   0   0   0   0   0 #> 10 b 4   0   0   0   0   0   1   0   0   0   0  # Binning data.frame(x, i(x, bin = list(ab = c(\"a\", \"b\")))) #>    x ab c d #> 1  a  1 0 0 #> 2  b  1 0 0 #> 3  c  0 1 0 #> 4  d  0 0 1 #> 5  a  1 0 0 #> 6  b  1 0 0 #> 7  c  0 1 0 #> 8  d  0 0 1 #> 9  a  1 0 0 #> 10 b  1 0 0  # Same as before but using .() for list() and a regular expression # note that to trigger a regex, you need to use an @ first data.frame(x, i(x, bin = .(ab = \"@a|b\"))) #>    x ab c d #> 1  a  1 0 0 #> 2  b  1 0 0 #> 3  c  0 1 0 #> 4  d  0 0 1 #> 5  a  1 0 0 #> 6  b  1 0 0 #> 7  c  0 1 0 #> 8  d  0 0 1 #> 9  a  1 0 0 #> 10 b  1 0 0  # # In fixest estimations #  data(base_did) # We interact the variable 'period' with the variable 'treat' est_did = feols(y ~ x1 + i(period, treat, 5) | id + period, base_did)  # => plot only interactions with iplot iplot(est_did)   # Using i() for factors est_bis = feols(y ~ x1 + i(period, keep = 3:6) + i(period, treat, 5) | id, base_did)  # we plot the second set of variables created with i() # => we need to use keep (otherwise only the first one is represented) coefplot(est_bis, keep = \"trea\")   # => special treatment in etable etable(est_bis, dict = c(\"6\" = \"six\")) #>                                 est_bis #> Dependent Var.:                       y #>                                         #> x1                   0.9720*** (0.0456) #> period = 3             -1.111* (0.5354) #> period = 4              0.4034 (0.5423) #> period = 5             -0.8980 (0.5698) #> period = six            0.8031 (0.5467) #> treat x period = 1      -2.252* (1.002) #> treat x period = 2      -1.523 (0.9927) #> treat x period = 3      -0.2720 (1.104) #> treat x period = 4       -1.794 (1.086) #> treat x period = six     0.7850 (1.026) #> treat x period = 7    3.650*** (0.9172) #> treat x period = 8    4.310*** (0.9989) #> treat x period = 9     5.636*** (1.037) #> treat x period = 10    6.276*** (1.045) #> Fixed-Effects:       ------------------ #> id                                  Yes #> ____________________ __________________ #> S.E.: Clustered                  by: id #> Observations                      1,080 #> R2                              0.54466 #> Within R2                       0.45396 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Interact two factors #  # We use the i. prefix to consider week as a factor data(airquality) aq = airquality aq$week = aq$Day %/% 7 + 1  # Interacting Month and week: res_2F = feols(Ozone ~ Solar.R + i(Month, i.week), aq) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  # Same but dropping the 5th Month and 1st week res_2F_bis = feols(Ozone ~ Solar.R + i(Month, i.week, ref = 5, ref2 = 1), aq) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  etable(res_2F, res_2F_bis) #>                                 res_2F        res_2F_bis #> Dependent Var.:                  Ozone             Ozone #>                                                          #> Constant                 8.207 (14.16)    18.51* (7.343) #> Solar.R              0.0963** (0.0314) 0.1007** (0.0324) #> Month = 5 x week = 2    -11.36 (17.18)                   #> Month = 5 x week = 3    -9.660 (16.05)                   #> Month = 5 x week = 4    -6.923 (18.28)                   #> Month = 5 x week = 5     28.32 (18.10)                   #> Month = 6 x week = 2     10.88 (18.13)   -0.3936 (14.93) #> Month = 6 x week = 3    -2.422 (17.22)    -13.40 (13.47) #> Month = 7 x week = 1    31.87. (17.27)                   #> Month = 7 x week = 2    34.35* (16.59)    23.00. (12.58) #> Month = 7 x week = 3     20.17 (16.54)     8.938 (12.47) #> Month = 7 x week = 4    33.76. (17.26)    22.85. (13.51) #> Month = 7 x week = 5    31.58. (18.19)     20.19 (15.04) #> Month = 8 x week = 1     7.218 (19.98)                   #> Month = 8 x week = 2   48.12** (17.22)   36.81** (13.56) #> Month = 8 x week = 3     19.17 (16.62)     8.257 (12.48) #> Month = 8 x week = 4    36.50* (17.18)    25.35. (13.46) #> Month = 8 x week = 5  62.00*** (18.12)  50.76*** (14.91) #> Month = 9 x week = 1   46.47** (16.57)                   #> Month = 9 x week = 2    -5.661 (16.12)    -17.03 (11.82) #> Month = 9 x week = 3    -2.978 (16.10)    -13.95 (11.65) #> Month = 9 x week = 4     1.809 (16.73)    -8.973 (12.61) #> Month = 9 x week = 5    -8.373 (19.56)    -19.47 (16.95) #> ____________________ _________________ _________________ #> S.E. type                          IID               IID #> Observations                       111               111 #> R2                             0.52636           0.37684 #> Adj. R2                        0.40795           0.27844 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # # Binning #  data(airquality)  feols(Ozone ~ i(Month, bin = \"bin::2\"), airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). #> OLS estimation, Dep. Var.: Ozone #> Observations: 116  #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept)  23.6154    6.19450 3.81231 0.00022469 *** #> Month::6     27.8703    8.17782 3.40804 0.00090749 *** #> Month::8     21.3119    7.51740 2.83501 0.00543040 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 31.2   Adj. R2: 0.083194  feols(Ozone ~ i(Month, bin = list(summer = 7:9)), airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). #> OLS estimation, Dep. Var.: Ozone #> Observations: 116  #> Standard-errors: IID  #>               Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)   23.61538    6.13010 3.852364 0.00019455 *** #> Month::6       5.82906   12.08872 0.482190 0.63060377     #> Month::summer 25.86610    7.04559 3.671249 0.00037013 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 30.9   Adj. R2: 0.102158"},{"path":"https://lrberge.github.io/fixest/reference/l.html","id":null,"dir":"Reference","previous_headings":"","what":"Lags a variable in a fixest estimation — f","title":"Lags a variable in a fixest estimation — f","text":"Produce lags leads formulas fixest estimations creating variables data.table::data.table. data must set panel beforehand (either function panel argument panel.id estimation).","code":""},{"path":"https://lrberge.github.io/fixest/reference/l.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lags a variable in a fixest estimation — f","text":"","code":"f(x, lead = 1, fill = NA)  d(x, lag = 1, fill = NA)  l(x, lag = 1, fill = NA)"},{"path":"https://lrberge.github.io/fixest/reference/l.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lags a variable in a fixest estimation — f","text":"x variable. lead vector integers giving number leads. Negative values lead lags. argument can vector using fixest estimations. creating variables data.table::data.table, must length one. fill scalar, default NA. fill missing values due lag/lead? Note fixest estimation, 'fill' must numeric (required creating new variables). lag vector integers giving number lags. Negative values lead leads. argument can vector using fixest estimations. creating variables data.table::data.table, must length one.","code":""},{"path":"https://lrberge.github.io/fixest/reference/l.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lags a variable in a fixest estimation — f","text":"functions can used ) formula fixest estimation, ii) creating variables within fixest_panel object (obtained function panel) alaos data.table::data.table.","code":""},{"path":"https://lrberge.github.io/fixest/reference/l.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Lags a variable in a fixest estimation — f","text":"f(): Forwards variable (inverse lagging) fixest estimation d(): Creates differences (.e. x - lag(x)) fixest estimation","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/l.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lags a variable in a fixest estimation — f","text":"","code":"data(base_did)  # Setting a data set as a panel... pdat = panel(base_did, ~ id + period)  # ...then using the functions l and f est1 = feols(y ~ l(x1, 0:1), pdat) #> NOTE: 108 observations removed because of NA values (RHS: 108). est2 = feols(f(y) ~ l(x1, -1:1), pdat) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). est3 = feols(l(y) ~ l(x1, 0:3), pdat) #> NOTE: 324 observations removed because of NA values (LHS: 108, RHS: 324). etable(est1, est2, est3, order = c(\"f\", \"^x\"), drop = \"Int\") #>                               est1               est2               est3 #> Dependent Var.:                  y             f(y,1)             l(y,1) #>                                                                          #> f(x1,1)                            0.9940*** (0.0542)                    #> x1              0.9948*** (0.0487)    0.0081 (0.0592)   -0.0534 (0.0545) #> Constant         2.235*** (0.2032)  2.464*** (0.2233)  2.196*** (0.2110) #> l(x1,1)            0.0410 (0.0558)    0.0157 (0.0640) 0.9871*** (0.0551) #> l(x1,2)                                                  0.0220 (0.0580) #> l(x1,3)                                                  0.0102 (0.0639) #> _______________ __________________ __________________ __________________ #> S.E.: Clustered             by: id             by: id             by: id #> Observations                   972                864                756 #> R2                         0.26558            0.25697            0.25875 #> Adj. R2                    0.26406            0.25438            0.25480 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # or using the argument panel.id feols(f(y) ~ l(x1, -1:1), base_did, panel.id = ~id + period) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). #> OLS estimation, Dep. Var.: f(y, 1) #> Observations: 864  #> Standard-errors: Clustered (id)  #>             Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept) 2.464313   0.223277 11.037009 < 2.2e-16 *** #> f(x1, 1)    0.994018   0.054216 18.334504 < 2.2e-16 *** #> x1          0.008072   0.059247  0.136241   0.89189     #> l(x1, 1)    0.015693   0.063958  0.245360   0.80665     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.97418   Adj. R2: 0.254377 feols(d(y) ~ d(x1), base_did, panel.id = ~id + period) #> NOTE: 108 observations removed because of NA values (LHS: 108, RHS: 108). #> OLS estimation, Dep. Var.: d(y, 1) #> Observations: 972  #> Standard-errors: Clustered (id)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 0.510685   0.072720  7.02262 2.0948e-10 *** #> d(x1, 1)    0.972664   0.053437 18.20224  < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 5.83885   Adj. R2: 0.329253  # l() and f() can also be used within a data.table: if(require(\"data.table\")){   pdat_dt = panel(as.data.table(base_did), ~id+period)   # Now since pdat_dt is also a data.table   #   you can create lags/leads directly   pdat_dt[, x1_l1 := l(x1)]   pdat_dt[, x1_d1 := d(x1)]   pdat_dt[, c(\"x1_l1_fill0\", \"y_f2\") := .(l(x1, fill = 0), f(y, 2))] } #> Loading required package: data.table #> [1] TRUE"},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Lags a variable using a formula — lag.formula","title":"Lags a variable using a formula — lag.formula","text":"Lags variable using panel id + time identifiers formula.","code":""},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lags a variable using a formula — lag.formula","text":"","code":"# S3 method for formula lag(   x,   k = 1,   data,   time.step = NULL,   fill = NA,   duplicate.method = c(\"none\", \"first\"),   ... )  lag_fml(   x,   k = 1,   data,   time.step = NULL,   fill = NA,   duplicate.method = c(\"none\", \"first\"),   ... )"},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lags a variable using a formula — lag.formula","text":"x formula type var ~ id + time var variable lagged, id variable representing panel id, time time variable panel. k integer giving number lags. Default 1. leads, just use negative number. data Optional, data.frame evaluate formula. provided, variables fetched current environment. time.step method compute lags, default NULL (means automatically set). Can equal : \"unitary\", \"consecutive\", \"within.consecutive\", number. \"unitary\", largest common divisor consecutive time periods used (typically time variable represents years, 1). method can apply integer (convertible integer) variables. \"consecutive\", time variable can type: two successive time periods represent lag 1. \"witihn.consecutive\" within given id, two successive time periods represent lag 1. Finally, time variable numeric, can provide numeric time step. fill Scalar. fill observations without defined lead/lag values. Default NA. duplicate.method several observations id time values, notion lag defined . duplicate.method = \"none\" (default) duplicate values found, leads error. can use duplicate.method = \"first\" first occurrence identical id/time observations used lag. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lags a variable using a formula — lag.formula","text":"returns vector type length variable lagged formula.","code":""},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Lags a variable using a formula — lag.formula","text":"lag_fml(): Lags variable using formula syntax","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lags a variable using a formula — lag.formula","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/lag.formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lags a variable using a formula — lag.formula","text":"","code":"# simple example with an unbalanced panel base = data.frame(id = rep(1:2, each = 4),                   time = c(1, 2, 3, 4, 1, 4, 6, 9), x = 1:8)  base$lag1 = lag(x~id+time,  1, base) # lag 1 base$lead1 = lag(x~id+time, -1, base) # lead 1 base$lag2_fill0 = lag(x~id+time, 2, base, fill = 0) # with time.step = \"consecutive\" base$lag1_consecutive = lag(x~id+time, 1, base, time.step = \"consecutive\") #   => works for indiv. 2 because 9 (resp. 6) is consecutive to 6 (resp. 4) base$lag1_within.consecutive = lag(x~id+time, 1, base, time.step = \"within\") #   => now two consecutive years within each indiv is one lag  print(base) #>   id time x lag1 lead1 lag2_fill0 lag1_consecutive lag1_within.consecutive #> 1  1    1 1   NA     2          0               NA                      NA #> 2  1    2 2    1     3          0                1                       1 #> 3  1    3 3    2     4          1                2                       2 #> 4  1    4 4    3    NA          2                3                       3 #> 5  2    1 5   NA    NA          0               NA                      NA #> 6  2    4 6   NA    NA          0               NA                       5 #> 7  2    6 7   NA    NA          6                6                       6 #> 8  2    9 8   NA    NA          0                7                       7  # Argument time.step = \"consecutive\" is # mostly useful when the time variable is not a number: # e.g. c(\"1991q1\", \"1991q2\", \"1991q3\") etc  # with duplicates base_dup = data.frame(id = rep(1:2, each = 4),                       time = c(1, 1, 1, 2, 1, 2, 2, 3), x = 1:8)  # Error because of duplicate values for (id, time) try(lag(x~id+time, 1, base_dup)) #> Error : in lag.formula(x ~ id + time, 1, base_dup):  #> The panel identifiers contain duplicate values: this is not allowed #> since lag/leads are not defined for them. For example (id, time) = (1, #> 1) appears three times. Please provide data without duplicates -- or you #> can also use duplicate.method = 'first' (see Details).   # Error is bypassed, lag corresponds to first occurence of (id, time) lag(x~id+time, 1, base_dup, duplicate.method = \"first\") #> [1] NA NA NA  1 NA  5  5  6   # Playing with time steps base = data.frame(id = rep(1:2, each = 4),                   time = c(1, 2, 3, 4, 1, 4, 6, 9), x = 1:8)  # time step: 0.5 (here equivalent to lag of 1) lag(x~id+time, 2, base, time.step = 0.5) #> [1] NA  1  2  3 NA NA NA NA  # Error: wrong time step try(lag(x~id+time, 2, base, time.step = 7)) #> Error : in lag.formula(x ~ id + time, 2, base, time.step = 7):  #> If 'time.step' is a number, then it must be an exact divisor of all the #> difference between two consecutive time periods. This is currently not #> the case: 7 is not a divisor of 1 (the difference btw the time periods 2 #> and 1).  # Adding NAs + unsorted IDs base = data.frame(id = rep(1:2, each = 4),                   time = c(4, NA, 3, 1, 2, NA, 1, 3), x = 1:8)  base$lag1 = lag(x~id+time, 1, base) base$lag1_within = lag(x~id+time, 1, base, time.step = \"w\") base_bis = base[order(base$id, base$time),]  print(base_bis) #>   id time x lag1 lag1_within #> 4  1    1 4   NA          NA #> 3  1    3 3   NA           4 #> 1  1    4 1    3           3 #> 2  1   NA 2   NA          NA #> 7  2    1 7   NA          NA #> 5  2    2 5    7           7 #> 8  2    3 8    5           5 #> 6  2   NA 6   NA          NA  # You can create variables without specifying the data within data.table: if(require(\"data.table\")){   base = data.table(id = rep(1:2, each = 3), year = 1990 + rep(1:3, 2), x = 1:6)   base[, x.l1 := lag(x~id+year, 1)] } #>    id year x x.l1 #> 1:  1 1991 1   NA #> 2:  1 1992 2    1 #> 3:  1 1993 3    2 #> 4:  2 1991 4   NA #> 5:  2 1992 5    4 #> 6:  2 1993 6    5"},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the log-likelihood — logLik.fixest","title":"Extracts the log-likelihood — logLik.fixest","text":"function extracts log-likelihood fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the log-likelihood — logLik.fixest","text":"","code":"# S3 method for fixest logLik(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the log-likelihood — logLik.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the log-likelihood — logLik.fixest","text":"returns numeric scalar.","code":""},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts the log-likelihood — logLik.fixest","text":"function extracts log-likelihood based model fit. can information likelihoods details function femlm.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts the log-likelihood — logLik.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/logLik.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the log-likelihood — logLik.fixest","text":"","code":"# simple estimation on iris data with \"Species\" fixed-effects res = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +             Petal.Width | Species, iris)  nobs(res) #> [1] 150 logLik(res) #> [1] -272.8227"},{"path":"https://lrberge.github.io/fixest/reference/model.matrix.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Design matrix of a fixest object — model.matrix.fixest","title":"Design matrix of a fixest object — model.matrix.fixest","text":"function creates left-hand-side right-hand-side(s) femlm, feols feglm estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/model.matrix.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design matrix of a fixest object — model.matrix.fixest","text":"","code":"# S3 method for fixest model.matrix(   object,   data,   type = \"rhs\",   na.rm = TRUE,   subset = FALSE,   as.matrix = FALSE,   as.df = FALSE,   collin.rm = TRUE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/model.matrix.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design matrix of a fixest object — model.matrix.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. data missing (default) original data obtained evaluating call. Otherwise, data.frame. type Character vector one sided formula, default \"rhs\". Contains type matrix/data.frame returned. Possible values : \"lhs\", \"rhs\", \"fixef\", \"iv.rhs1\" (1st stage RHS), \"iv.rhs2\" (2nd stage RHS), \"iv.endo\" (endogenous vars.), \"iv.exo\" (exogenous vars), \"iv.inst\" (instruments). na.rm Default TRUE. observations NAs removed matrix? subset Logical character vector. Default FALSE. TRUE, matrix created restricted variables contained argument data, can contain subset variables used estimation. character vector, variables matching elements vector via regular expressions created. .matrix Logical scalar, default FALSE. Whether coerce result matrix. .df Logical scalar, default FALSE. Whether coerce result data.frame. collin.rm Logical scalar, default TRUE. Whether remove variables found collinear estimation. Beware: perform collinearity check. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/model.matrix.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design matrix of a fixest object — model.matrix.fixest","text":"returns either vector, matrix data.frame. returns vector dependent variable (\"lhs\"), data.frame fixed-effects (\"fixef\") matrix type.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/model.matrix.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Design matrix of a fixest object — model.matrix.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/model.matrix.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design matrix of a fixest object — model.matrix.fixest","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  est = feols(y ~ poly(x1, 2) + x2, base) head(model.matrix(est)) #>      (Intercept) poly(x1, 2)1 poly(x1, 2)2  x2 #> [1,]           1  0.083201357 -0.016039377 1.4 #> [2,]           1 -0.010776079 -0.053252127 1.4 #> [3,]           1  0.026814895 -0.056361540 1.3 #> [4,]           1  0.008019408 -0.057805919 1.5 #> [5,]           1  0.101996844  0.009397687 1.4 #> [6,]           1  0.158383306  0.121697905 1.7  # Illustration of subset  # subset => character vector head(model.matrix(est, subset = \"x1\")) #>      poly(x1, 2)1 poly(x1, 2)2 #> [1,]  0.083201357 -0.016039377 #> [2,] -0.010776079 -0.053252127 #> [3,]  0.026814895 -0.056361540 #> [4,]  0.008019408 -0.057805919 #> [5,]  0.101996844  0.009397687 #> [6,]  0.158383306  0.121697905  # subset => TRUE, only works with data argument!! head(model.matrix(est, data = base[, \"x1\", drop = FALSE], subset = TRUE)) #>   poly(x1, 2)1 poly(x1, 2)2 #> 1  0.083201357 -0.016039377 #> 2 -0.010776079 -0.053252127 #> 3  0.026814895 -0.056361540 #> 4  0.008019408 -0.057805919 #> 5  0.101996844  0.009397687 #> 6  0.158383306  0.121697905"},{"path":"https://lrberge.github.io/fixest/reference/models.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the models tree from a fixest_multi object — models","title":"Extracts the models tree from a fixest_multi object — models","text":"Extracts meta information models contained fixest_multi estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the models tree from a fixest_multi object — models","text":"","code":"models(x, simplify = FALSE)"},{"path":"https://lrberge.github.io/fixest/reference/models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the models tree from a fixest_multi object — models","text":"x fixest_multi object, obtained fixest estimation leading multiple results. simplify Logical, default FALSE. default behavior display meta information, even identical across models. using simplify = TRUE, information variation kept.","code":""},{"path":"https://lrberge.github.io/fixest/reference/models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the models tree from a fixest_multi object — models","text":"returns data.frame whose first column (named id) index models columns contain information specific model (e.g. sample, RHS,  dependent variable, etc).","code":""},{"path":"https://lrberge.github.io/fixest/reference/models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the models tree from a fixest_multi object — models","text":"","code":"# a multiple estimation base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) est = feols(y ~ csw(x.[, 1:3]), base, fsplit = ~species)  # All the meta information models(est) #>    id sample.var      sample          rhs #> 1   1    species Full sample           x1 #> 2   2    species Full sample      x1 + x2 #> 3   3    species Full sample x1 + x2 + x3 #> 4   4    species      setosa           x1 #> 5   5    species      setosa      x1 + x2 #> 6   6    species      setosa x1 + x2 + x3 #> 7   7    species  versicolor           x1 #> 8   8    species  versicolor      x1 + x2 #> 9   9    species  versicolor x1 + x2 + x3 #> 10 10    species   virginica           x1 #> 11 11    species   virginica      x1 + x2 #> 12 12    species   virginica x1 + x2 + x3  # Illustration: Why use simplify est_sub = est[sample = 2] models(est_sub) #>   id sample.var sample          rhs #> 4  1    species setosa           x1 #> 5  2    species setosa      x1 + x2 #> 6  3    species setosa x1 + x2 + x3 models(est_sub, simplify = TRUE) #>   id          rhs #> 4  1           x1 #> 5  2      x1 + x2 #> 6  3 x1 + x2 + x3"},{"path":"https://lrberge.github.io/fixest/reference/nobs.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the number of observations form a fixest object — nobs.fixest","title":"Extracts the number of observations form a fixest object — nobs.fixest","text":"function simply extracts number observations form fixest object, obtained using functions femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/nobs.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the number of observations form a fixest object — nobs.fixest","text":"","code":"# S3 method for fixest nobs(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/nobs.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the number of observations form a fixest object — nobs.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/nobs.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the number of observations form a fixest object — nobs.fixest","text":"returns interger.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/nobs.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts the number of observations form a fixest object — nobs.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/nobs.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the number of observations form a fixest object — nobs.fixest","text":"","code":"# simple estimation on iris data with \"Species\" fixed-effects res = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +             Petal.Width | Species, iris)  nobs(res) #> [1] 150 logLik(res) #> [1] -272.8227"},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints the number of unique elements in a data set — n_unik","title":"Prints the number of unique elements in a data set — n_unik","text":"utility tool displays number unique elements one multiple data.frames well number NA values.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints the number of unique elements in a data set — n_unik","text":"","code":"n_unik(x)  # S3 method for vec_n_unik print(x, ...)  # S3 method for list_n_unik print(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints the number of unique elements in a data set — n_unik","text":"x formula, data set names LHS variables RHS, like data1 + data2 ~ var1 + var2. following special variables admitted: \".\" get default values, \".N\" number observations, \".U\" number unique rows, \".NA\" number rows least one NA. Variables can combined \"^\", e.g. df~id^period; use id%^%period also include terms sides. Note using : * equivalent ^ %^%. Sub select id[cond], id automatically included. Conditions can chained, id[cond1, cond2]. Use NA(x, y) conditions instead .na(x) | .na(y). Use !! operator condition opposite. compare keys two data sets, use data1:data2. formula, x can : vector (displays # unique values); data.frame (default values displayed), \"sum\" data sets like x = data1 + data2, case equivalent data1 + data2 ~ .. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints the number of unique elements in a data set — n_unik","text":"returns vector containing number unique values per element. several data sets provided, list returned, long number data sets, element vector unique values.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"special-values-and-functions","dir":"Reference","previous_headings":"","what":"Special values and functions","title":"Prints the number of unique elements in a data set — n_unik","text":"formula, can use following special values: \".\", \".N\", \".U\", \".NA\". \".\"Accesses default values. one data set data set data.table, default display number observations number unique rows. data data.table, number unique items key(s) displayed instead number unique rows (table keys course). two data sets, default display unique items : ) variables common across data sets, less 4, b) variable shown ), number variables common across least two data sets, provided less 5. data sets data tables, keys also displayed top common variables. case, number observations always displayed. \".N\"Displays number observations. \".U\"Displays number unique rows. \".NA\"Displays number rows least one NA.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"the-na-function","dir":"Reference","previous_headings":"","what":"The NA function","title":"Prints the number of unique elements in a data set — n_unik","text":"special function NA equivalent .na can handle several variables. instance, NA(x, y) equivalent .na(x) | .na(y). can add many variables want arguments. argument provided, NA(), identical variables data set argument.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"combining-variables","dir":"Reference","previous_headings":"","what":"Combining variables","title":"Prints the number of unique elements in a data set — n_unik","text":"Use \"hat\", \"^\", operator combine several variables. example id^period display number unique values id x period combinations. Use \"super hat\", \"%^%\", operator also include terms sides. example, instead writing id + period + id^period, can simply write id%^%period. Alternatively, can use : ^ * %^%.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"sub-selections","dir":"Reference","previous_headings":"","what":"Sub-selections","title":"Prints the number of unique elements in a data set — n_unik","text":"show number unique values sub samples, simply use []. example, id[x > 10] display number unique id x > 10. Simple square brackets lead inclusion variable subset. example id[x > 10] equivalent id + id[x > 10]. include sub selection, use double square brackets, id[[x > 10]]. can add multiple sub selections , separate comma. example id[x > 10, NA(y)] equivalent id[x > 10] + id[NA(y)]. Use double negative operator, .e. !!, include condition opposite . example id[!!x > 10] equivalent id[x > 10, !x > 10]. Double negative operators can chained, like id[!!cond1 & !!cond2], cardinal product double negatived conditions returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prints the number of unique elements in a data set — n_unik","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/n_unik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints the number of unique elements in a data set — n_unik","text":"","code":"data = base_did data$x1.L1 = round(lag(x1~id+period, 1, data))  # By default, just the formatted number of observations n_unik(data) #> ## # Observations: 1,080  #> ##  # Unique rows: 1,080   # Or the nber of unique elements of a vector n_unik(data$id) #> ## id: 108   # number of unique id values and id x period pairs n_unik(data ~.N + id + id^period) #> ## # Observations: 1,080  #> ##             id:   108  #> ##      id^period: 1,080   # use the %^% operator to include the terms on the two sides at once # => same as id*period n_unik(data ~.N + id %^% period) #> ## # Observations: 1,080  #> ##             id:   108  #> ##         period:    10  #> ##      id^period: 1,080   # using sub selection with [] n_unik(data ~.N + period[!NA(x1.L1)]) #> ##     # Observations: 1,080  #> ##             period:    10  #> ## period[!NA(x1.L1)]:     9   # to show only the sub selection: [[]] n_unik(data ~.N + period[[!NA(x1.L1)]]) #> ##     # Observations: 1,080  #> ## period[!NA(x1.L1)]:     9   # you can have multiple values in [], # just separate them with a comma n_unik(data ~.N + period[!NA(x1.L1), x1 > 7]) #> ##     # Observations: 1,080  #> ##             period:    10  #> ## period[!NA(x1.L1)]:     9  #> ##     period[x1 > 7]:     7   # to have both a condition and its opposite, # use the !! operator n_unik(data ~.N[!!NA(x1.L1)]) #> ##         # Observations: 1,080  #> ##  # Obs. with NA(x1.L1):   108  #> ## # Obs. with !NA(x1.L1):   972   # the !! operator works within condition chains n_unik(data ~.N[!!NA(x1.L1) & !!x1 > 7]) #> ##                   # Observations: 1,080  #> ##   # Obs. with NA(x1.L1) & x1 > 7:     3  #> ##  # Obs. with !NA(x1.L1) & x1 > 7:    10  #> ##  # Obs. with NA(x1.L1) & !x1 > 7:   105  #> ## # Obs. with !NA(x1.L1) & !x1 > 7:   962   # Conditions can be distributed n_unik(data ~ (id + period)[x1 > 7]) #> ##             id: 108  #> ##     id[x1 > 7]:  13  #> ##         period:  10  #> ## period[x1 > 7]:   7   # # Several data sets #  # Typical use case: merging # Let's create two data sets and merge them  data(base_did) base_main = base_did base_extra = sample_df(base_main[, c(\"id\", \"period\")], 100) base_extra$id[1:10] = 111:120 base_extra$period[11:20] = 11:20 base_extra$z = rnorm(100)  # You can use db1:db2 to compare the common keys in two data sets  n_unik(base_main:base_extra) #> ##                 base_main base_extra  #> ## # Observations:     1,080        100  #> ##             id:       108         73  #> ## # Exclusive   |        45         10 # Common: 63 #> ##         period:        10         20  #> ## # Exclusive   |         0         10 # Common: 10 #> ##      id^period:     1,080        100  #> ## # Exclusive   |     1,000         20 # Common: 80  tmp = merge(base_main, base_extra, all.x = TRUE, by = c(\"id\", \"period\"))  # You can show unique values for any variable, as before n_unik(tmp + base_main + base_extra ~ id[!!NA(z)] + id^period) #> ##               tmp base_main base_extra #> ##         id:   108       108         73 #> ##  id[NA(z)]:   108        --          0 #> ## id[!NA(z)]:    59        --         73 #> ##  id^period: 1,080     1,080        100"},{"path":"https://lrberge.github.io/fixest/reference/obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the observations used for the estimation — obs","title":"Extracts the observations used for the estimation — obs","text":"function extracts observations used fixest estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the observations used for the estimation — obs","text":"","code":"obs(x)"},{"path":"https://lrberge.github.io/fixest/reference/obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the observations used for the estimation — obs","text":"x fixest object.","code":""},{"path":"https://lrberge.github.io/fixest/reference/obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the observations used for the estimation — obs","text":"returns simple vector integers.","code":""},{"path":"https://lrberge.github.io/fixest/reference/obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the observations used for the estimation — obs","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\") base$y[1:5] = NA  # Split sample estimations est_split = feols(y ~ x1, base, split = ~species) #> NOTE: 5 observations removed because of NA values (LHS: 5). (obs_setosa = obs(est_split[[1]])) #>  [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #> [26] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 (obs_versi = obs(est_split[sample = \"versi\", drop = TRUE])) #>  [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 #> [20]  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88 #> [39]  89  90  91  92  93  94  95  96  97  98  99 100  est_versi = feols(y ~ x1, base, subset = obs_versi)  etable(est_split, est_versi) #>                         est_split.1        est_split.2        est_split.3 #> Sample (species)             setosa         versicolor          virginica #> Dependent Var.:                   y                  y                  y #>                                                                           #> Constant          2.642*** (0.3319)  3.540*** (0.5629)  3.907*** (0.7571) #> x1               0.6909*** (0.0958) 0.8651*** (0.2019) 0.9015*** (0.2531) #> ________________ __________________ __________________ __________________ #> S.E. type                       IID                IID                IID #> Observations                     45                 50                 50 #> R2                          0.54767            0.27658            0.20906 #> Adj. R2                     0.53715            0.26151            0.19258 #>  #>                           est_versi #> Sample (species)                    #> Dependent Var.:                   y #>                                     #> Constant          3.540*** (0.5629) #> x1               0.8651*** (0.2019) #> ________________ __________________ #> S.E. type                       IID #> Observations                     50 #> R2                          0.27658 #> Adj. R2                     0.26151 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/osize.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted object size — osize","title":"Formatted object size — osize","text":"Tools returns formatted object size, appropriate unit automatically chosen.","code":""},{"path":"https://lrberge.github.io/fixest/reference/osize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted object size — osize","text":"","code":"osize(x)  # S3 method for osize print(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/osize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted object size — osize","text":"x R object. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/osize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted object size — osize","text":"Returns character scalar.","code":""},{"path":"https://lrberge.github.io/fixest/reference/osize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Formatted object size — osize","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/osize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted object size — osize","text":"","code":"osize(iris) #> 7.3 Ko.   data(trade) osize(trade) #> 1.5 Mo."},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a fixest panel data base — panel","title":"Constructs a fixest panel data base — panel","text":"Constructs fixest panel data base data.frame allows use leads lags fixest estimations create new variables leads lags data.frame also data.table::data.table.","code":""},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a fixest panel data base — panel","text":"","code":"panel(data, panel.id, time.step = NULL, duplicate.method = c(\"none\", \"first\"))"},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a fixest panel data base — panel","text":"data data.frame. panel.id panel identifiers. Can either : ) one sided formula (e.g. panel.id = ~id+time), ii) character vector length 2 (e.g. panel.id=c('id', 'time'), iii) character scalar two variables separated comma (e.g. panel.id='id,time'). Note can combine variables ^ inside formulas (see dedicated section feols). time.step method compute lags, default NULL (means automatically set). Can equal : \"unitary\", \"consecutive\", \"within.consecutive\", number. \"unitary\", largest common divisor consecutive time periods used (typically time variable represents years, 1). method can apply integer (convertible integer) variables. \"consecutive\", time variable can type: two successive time periods represent lag 1. \"witihn.consecutive\" within given id, two successive time periods represent lag 1. Finally, time variable numeric, can provide numeric time step. duplicate.method several observations id time values, notion lag defined . duplicate.method = \"none\" (default) duplicate values found, leads error. can use duplicate.method = \"first\" first occurrence identical id/time observations used lag.","code":""},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a fixest panel data base — panel","text":"returns data base identical one given input, additional attribute: “panel_info”. attribute contains vectors used efficiently create lags/leads data. data subselected, bookeeping performed attribute “panel_info”.","code":""},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructs a fixest panel data base — panel","text":"function allows use leads lags fixest estimation without provide argument panel.id. also offers options set panel (additional arguments 'time.step' 'duplicate.method'). initial data set also data.table, operations supported may dissolve fixest_panel. case creating subselections initial data additional attributes (e.g. pdt[x>0, .(x, y, z)] dissolve fixest_panel, meaning data.table result call). initial data set also data.table, can create new variables lags leads using functions l f. See example.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a fixest panel data base — panel","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs a fixest panel data base — panel","text":"","code":"data(base_did)  # Setting a data set as a panel... pdat = panel(base_did, ~id+period)  # ...then using the functions l and f est1 = feols(y~l(x1, 0:1), pdat) #> NOTE: 108 observations removed because of NA values (RHS: 108). est2 = feols(f(y)~l(x1, -1:1), pdat) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). est3 = feols(l(y)~l(x1, 0:3), pdat) #> NOTE: 324 observations removed because of NA values (LHS: 108, RHS: 324). etable(est1, est2, est3, order = c(\"f\", \"^x\"), drop=\"Int\") #>                               est1               est2               est3 #> Dependent Var.:                  y             f(y,1)             l(y,1) #>                                                                          #> f(x1,1)                            0.9940*** (0.0542)                    #> x1              0.9948*** (0.0487)    0.0081 (0.0592)   -0.0534 (0.0545) #> Constant         2.235*** (0.2032)  2.464*** (0.2233)  2.196*** (0.2110) #> l(x1,1)            0.0410 (0.0558)    0.0157 (0.0640) 0.9871*** (0.0551) #> l(x1,2)                                                  0.0220 (0.0580) #> l(x1,3)                                                  0.0102 (0.0639) #> _______________ __________________ __________________ __________________ #> S.E.: Clustered             by: id             by: id             by: id #> Observations                   972                864                756 #> R2                         0.26558            0.25697            0.25875 #> Adj. R2                    0.26406            0.25438            0.25480 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # or using the argument panel.id feols(f(y)~l(x1, -1:1), base_did, panel.id = ~id+period) #> NOTE: 216 observations removed because of NA values (LHS: 108, RHS: 216). #> OLS estimation, Dep. Var.: f(y, 1) #> Observations: 864  #> Standard-errors: Clustered (id)  #>             Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept) 2.464313   0.223277 11.037009 < 2.2e-16 *** #> f(x1, 1)    0.994018   0.054216 18.334504 < 2.2e-16 *** #> x1          0.008072   0.059247  0.136241   0.89189     #> l(x1, 1)    0.015693   0.063958  0.245360   0.80665     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.97418   Adj. R2: 0.254377  # You can use panel.id in various ways: pdat = panel(base_did, ~id+period) # is identical to: pdat = panel(base_did, c(\"id\", \"period\")) # and also to: pdat = panel(base_did, \"id,period\")  # l() and f() can also be used within a data.table: if(require(\"data.table\")){   pdat_dt = panel(as.data.table(base_did), ~id+period)   # Now since pdat_dt is also a data.table   #   you can create lags/leads directly   pdat_dt[, x1_l1 := l(x1)]   pdat_dt[, c(\"x1_l1_fill0\", \"y_f2\") := .(l(x1, fill = 0), f(y, 2))] } #> [1] TRUE"},{"path":"https://lrberge.github.io/fixest/reference/plot.fixest.fixef.html","id":null,"dir":"Reference","previous_headings":"","what":"Displaying the most notable fixed-effects — plot.fixest.fixef","title":"Displaying the most notable fixed-effects — plot.fixest.fixef","text":"function plots 5 fixed-effects highest lowest values, fixed-effect dimension. takes argument fixed-effects obtained function fixef.fixest estimation using femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/plot.fixest.fixef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displaying the most notable fixed-effects — plot.fixest.fixef","text":"","code":"# S3 method for fixest.fixef plot(x, n = 5, ...)"},{"path":"https://lrberge.github.io/fixest/reference/plot.fixest.fixef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displaying the most notable fixed-effects — plot.fixest.fixef","text":"x object obtained function fixef.fixest. n number fixed-effects drawn. Defaults 5. ... currently used. Note fixed-effect coefficients might interpretable. function useful fully regular panels. data regular fixed-effect coefficients, means several ‘reference points’ set obtain fixed-effects, thereby impeding interpretation. case warning raised.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/plot.fixest.fixef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Displaying the most notable fixed-effects — plot.fixest.fixef","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/plot.fixest.fixef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Displaying the most notable fixed-effects — plot.fixest.fixef","text":"","code":"data(trade)  # We estimate the effect of distance on trade # => we account for 3 fixed-effects est_pois = femlm(Euros ~ log(dist_km)|Origin+Destination+Product, trade)  # obtaining the fixed-effects coefficients fe_trade = fixef(est_pois)  # plotting them plot(fe_trade)"},{"path":"https://lrberge.github.io/fixest/reference/predict.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for fixest fits — predict.fixest","title":"Predict method for fixest fits — predict.fixest","text":"function obtains prediction fitted model estimated femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/predict.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for fixest fits — predict.fixest","text":"","code":"# S3 method for fixest predict(   object,   newdata,   type = c(\"response\", \"link\"),   se.fit = FALSE,   interval = \"none\",   level = 0.95,   fixef = FALSE,   vs.coef = FALSE,   sample = c(\"estimation\", \"original\"),   vcov = NULL,   ssc = NULL,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/predict.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for fixest fits — predict.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. newdata data.frame containing variables used make prediction. provided, fitted expected (linear type = \"link\") predictors returned. type Character either equal \"response\" (default) \"link\". type=\"response\", output level response variable, .e. expected predictor \\(E(Y|X)\\). \"link\", output level explanatory variables, .e. linear predictor \\(X\\cdot \\beta\\). se.fit Logical, default FALSE. TRUE, standard-error predicted value computed returned column named se.fit. feature available OLS models containing fixed-effects. interval Either \"none\" (default), \"confidence\" \"prediction\". type confidence interval compute. Note feature available OLS models containing fixed-effects (GLM/ML models covered). level numeric scalar 0.5 1, defaults 0.95. used argument 'interval' requested, corresponds width confidence interval. fixef Logical scalar, default FALSE. TRUE, data.frame returned, column representing fixed-effects coefficients observation newdata -- many columns fixed-effects. Note variables varying slopes, slope coefficients returned (.e. multiplied variable). vs.coef Logical scalar, default FALSE. used fixef = TRUE variables varying slopes present. TRUE, coefficients variables varying slopes returned instead coefficient multiplied value variables (default). sample Either \"estimation\" (default) \"original\". argument used arg. 'newdata' missing, ignored otherwise. equal \"estimation\", vector returned matches sample used estimation. equal \"original\", matches original data set (observations used estimation filled NAs). vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/predict.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for fixest fits — predict.fixest","text":"returns numeric vector length equal number observations argument newdata. newdata missing, returns vector length estimation sample, except sample = \"original\", case length vector match one original data set (can, also , estimation sample). fixef = TRUE, data.frame returned. se.fit = TRUE interval != \"none\", object returned data.frame following columns: fit, se.fit, , CIs requested, ci_low ci_high.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/predict.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict method for fixest fits — predict.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/predict.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for fixest fits — predict.fixest","text":"","code":"# Estimation on iris data res = fepois(Sepal.Length ~ Petal.Length | Species, iris)  # what would be the prediction if the data was all setosa? newdata = data.frame(Petal.Length = iris$Petal.Length, Species = \"setosa\") pred_setosa = predict(res, newdata = newdata)  # Let's look at it graphically plot(c(1, 7), c(3, 11), type = \"n\", xlab = \"Petal.Length\",      ylab = \"Sepal.Length\")  newdata = iris[order(iris$Petal.Length), ] newdata$Species = \"setosa\" lines(newdata$Petal.Length, predict(res, newdata))  # versicolor newdata$Species = \"versicolor\" lines(newdata$Petal.Length, predict(res, newdata), col=2)  # virginica newdata$Species = \"virginica\" lines(newdata$Petal.Length, predict(res, newdata), col=3)  # The original data points(iris$Petal.Length, iris$Sepal.Length, col = iris$Species, pch = 18) legend(\"topleft\", lty = 1, col = 1:3, legend = levels(iris$Species))    # # Getting the fixed-effect coefficients for each obs. #  data(trade) est_trade = fepois(Euros ~ log(dist_km) | Destination^Product +                                            Origin^Product + Year, trade) obs_fe = predict(est_trade, fixef = TRUE) head(obs_fe) #>   Destination^Product Origin^Product Year #> 1            22.69941       0.000000    0 #> 2            26.17685      -2.470634    0 #> 3            25.41261       0.000000    0 #> 4            27.60928      -4.672485    0 #> 5            24.43620       0.000000    0 #> 6            26.67832      -4.451350    0  # can we check we get the right sum of fixed-effects head(cbind(rowSums(obs_fe), est_trade$sumFE)) #>          [,1]     [,2] #> [1,] 22.69941 22.69941 #> [2,] 23.70622 23.70622 #> [3,] 25.41261 25.41261 #> [4,] 22.93679 22.93679 #> [5,] 24.43620 24.43620 #> [6,] 22.22697 22.22697   # # Standard-error of the prediction #  base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\"))  est = feols(y ~ x1 + species, base)  head(predict(est, se.fit = TRUE)) #>        fit     se.fit #> 1 5.063856 0.06240784 #> 2 4.662076 0.07686065 #> 3 4.822788 0.06651280 #> 4 4.742432 0.07108218 #> 5 5.144212 0.06458060 #> 6 5.385281 0.07972048  # regular confidence interval head(predict(est, interval = \"conf\")) #>        fit     se.fit   ci_low  ci_high #> 1 5.063856 0.06240784 4.940517 5.187196 #> 2 4.662076 0.07686065 4.510173 4.813979 #> 3 4.822788 0.06651280 4.691336 4.954240 #> 4 4.742432 0.07108218 4.601949 4.882915 #> 5 5.144212 0.06458060 5.016579 5.271846 #> 6 5.385281 0.07972048 5.227726 5.542836  # adding the residual to the CI head(predict(est, interval = \"predi\")) #>        fit     se.fit   ci_low  ci_high #> 1 5.063856 0.06240784 4.189559 5.938154 #> 2 4.662076 0.07686065 3.783294 5.540858 #> 3 4.822788 0.06651280 3.947310 5.698267 #> 4 4.742432 0.07108218 3.865552 5.619312 #> 5 5.144212 0.06458060 4.269299 6.019126 #> 6 5.385281 0.07972048 4.505504 6.265057  # You can change the type of SE on the fly head(predict(est, interval = \"conf\", vcov = ~species)) #>        fit      se.fit   ci_low  ci_high #> 1 5.063856 0.005175705 5.041587 5.086126 #> 2 4.662076 0.030766691 4.529698 4.794454 #> 3 4.822788 0.016389733 4.752269 4.893307 #> 4 4.742432 0.023578212 4.640983 4.843881 #> 5 5.144212 0.012364184 5.091014 5.197411 #> 6 5.385281 0.033929622 5.239293 5.531268"},{"path":"https://lrberge.github.io/fixest/reference/print.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"A print facility for fixest objects. — print.fixest","title":"A print facility for fixest objects. — print.fixest","text":"function similar usual summary functions provides table coefficients along information fit estimation. type output can customized user (using function setFixest_print).","code":""},{"path":"https://lrberge.github.io/fixest/reference/print.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A print facility for fixest objects. — print.fixest","text":"","code":"# S3 method for fixest print(x, n, type = \"table\", fitstat = NULL, ...)  setFixest_print(type = \"table\", fitstat = NULL)  getFixest_print()"},{"path":"https://lrberge.github.io/fixest/reference/print.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A print facility for fixest objects. — print.fixest","text":"x fixest object. Obtained using methods femlm, feols feglm. n Integer, number coefficients display. default, first 8 coefficients displayed x come summary.fixest. type Either \"table\" (default) display coefficients table \"coef\" display coefficients. fitstat formula character vector representing fit statistic display. types must valid types function fitstat. default fit statistics depend type estimation (OLS, GLM, IV, /without fixed-effect). Providing argument fitstat overrides default fit statistics, can however use point \".\" summon back. Ex 1: fitstat = ~ . + ll adds log-likelihood default values. Ex 2: fitstat = ~ ll + pr2 displays log-likelihood pseudo-R2. ... arguments passed vcov.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/print.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A print facility for fixest objects. — print.fixest","text":"possible set default values arguments type fitstat using function setFixest_print.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/print.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A print facility for fixest objects. — print.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/print.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A print facility for fixest objects. — print.fixest","text":"","code":"# Load trade data data(trade)  # We estimate the effect of distance on trade #   => we account for 3 fixed-effects (FEs) est_pois = fepois(Euros ~ log(dist_km)|Origin+Destination+Product, trade)  # displaying the results #  (by default SEs are clustered if FEs are used) print(est_pois) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.115627 -13.2127 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377   # By default the coefficient table is displayed. #  If the user wished to display only the coefficents, use option type: print(est_pois, type = \"coef\") #> log(dist_km)  #>    -1.527747   # To permanently display coef. only, use setFixest_print: setFixest_print(type = \"coef\") est_pois #> log(dist_km)  #>    -1.527747  # back to default: setFixest_print(type = \"table\")  # # fitstat #  # We modify which fit statistic to display print(est_pois, fitstat = ~ . + lr) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.115627 -13.2127 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377  #> LR: stat = 4.527e+12, p < 2.2e-16, on 49 DoF.  # We add the LR test to the default (represented by the \".\")  # to show only the LR stat: print(est_pois, fitstat = ~ . + lr.stat) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.115627 -13.2127 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389  #>            BIC:  1.427e+12     Squared Cor.: 0.60377   #>                                   LR, stat.: 4.527e+12  # To modify the defaults: setFixest_print(fitstat = ~ . + lr.stat + rmse) est_pois #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.115627 -13.2127 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389     #>            BIC:  1.427e+12     Squared Cor.: 0.60377      #>      LR, stat.:  4.527e+12             RMSE: 88,419,292.2  # Back to default (NULL == default) setFixest_print(fitstat = NULL)"},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_fitstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for fit statistics of fixest estimations — print.fixest_fitstat","title":"Print method for fit statistics of fixest estimations — print.fixest_fitstat","text":"Displays brief summary selected fit statistics function fitstat.","code":""},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_fitstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for fit statistics of fixest estimations — print.fixest_fitstat","text":"","code":"# S3 method for fixest_fitstat print(x, na.rm = FALSE, ...)"},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_fitstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for fit statistics of fixest estimations — print.fixest_fitstat","text":"x object resulting fitstat function. na.rm Logical, default FALSE. TRUE, statistics missing displayed. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_fitstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for fit statistics of fixest estimations — print.fixest_fitstat","text":"","code":"data(trade) gravity = feols(log(Euros) ~ log(dist_km) | Destination + Origin, trade)  # Extracting the 'working' number of observations used to compute the pvalues fitstat(gravity, \"g\", simplify = TRUE) #> [1] 15  # Some fit statistics fitstat(gravity, ~ rmse + r2 + wald + wf) #>                 RMSE: 2.26215 #>                   R2: 0.50428 #> Wald (joint nullity): stat =   272.9, p < 2.2e-16, on 1 and 38,309 DoF, VCOV: Clustered (Destination). #>   F-test (projected): stat = 5,832.8, p < 2.2e-16, on 1 and 38,295 DoF.  # You can use them in etable etable(gravity, fitstat = ~ rmse + r2 + wald + wf) #>                                 gravity #> Dependent Var.:              log(Euros) #>                                         #> log(dist_km)         -2.072*** (0.1254) #> Fixed-Effects:       ------------------ #> Destination                         Yes #> Origin                              Yes #> ____________________ __________________ #> S.E.: Clustered         by: Destination #> RMSE                             2.2622 #> R2                              0.50428 #> Wald (joint nullity)             272.90 #> F-test (projected)              5,832.8 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # For wald and wf, you could show the pvalue instead: etable(gravity, fitstat = ~ rmse + r2 + wald.p + wf.p) #>                                          gravity #> Dependent Var.:                       log(Euros) #>                                                  #> log(dist_km)                  -2.072*** (0.1254) #> Fixed-Effects:                ------------------ #> Destination                                  Yes #> Origin                                       Yes #> _____________________________ __________________ #> S.E.: Clustered                  by: Destination #> RMSE                                      2.2622 #> R2                                       0.50428 #> Wald (joint nullity), p-value           4.32e-61 #> F-test (projected), p-value             NaNe-Inf #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Now let's display some statistics that are not built-in # => we use fitstat_register to create them  # We need: a) type name, b) the function to be applied #          c) (optional) an alias  fitstat_register(\"tstand\", function(x) tstat(x, se = \"stand\")[1], \"t-stat (regular)\") fitstat_register(\"thc\", function(x) tstat(x, se = \"heter\")[1], \"t-stat (HC1)\") fitstat_register(\"t1w\", function(x) tstat(x, se = \"clus\")[1], \"t-stat (clustered)\") fitstat_register(\"t2w\", function(x) tstat(x, se = \"twow\")[1], \"t-stat (2-way)\")  # Now we can use these keywords in fitstat: etable(gravity, fitstat = ~ . + tstand + thc + t1w + t2w) #>                               gravity #> Dependent Var.:            log(Euros) #>                                       #> log(dist_km)       -2.072*** (0.1254) #> Fixed-Effects:     ------------------ #> Destination                       Yes #> Origin                            Yes #> __________________ __________________ #> S.E.: Clustered       by: Destination #> Observations                   38,325 #> R2                            0.50428 #> Within R2                     0.13218 #> t-stat (regular)              -76.373 #> t-stat (HC1)                  -80.129 #> t-stat (clustered)            -16.520 #> t-stat (2-way)                -13.268 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Note that the custom stats we created are can easily lead # to errors, but that's another story!"},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for fixest_multi objects — print.fixest_multi","title":"Print method for fixest_multi objects — print.fixest_multi","text":"Displays summary information fixest_multi objects R console.","code":""},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for fixest_multi objects — print.fixest_multi","text":"","code":"# S3 method for fixest_multi print(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for fixest_multi objects — print.fixest_multi","text":"x fixest_multi object, obtained fixest estimation leading multiple results. ... arguments passed summary.fixest_multi.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/print.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for fixest_multi objects — print.fixest_multi","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # Multiple estimation res = feols(y ~ csw(x1, x2, x3), base, split = ~species)  # Let's print all that res #> Standard-errors: IID  #>  #> ### Sample: setosa #>  #> Expl. vars.: x1 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.639001   0.310014 8.51251 3.7424e-11 *** #> x1          0.690490   0.089899 7.68074 6.7098e-10 *** #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.303738   0.385294 5.97917 2.8943e-07 *** #> x1          0.667416   0.090356 7.38653 2.1252e-09 *** #> x2          0.283419   0.197224 1.43704 1.5733e-01     #> --- #> Expl. vars.: x1 + x2 + x3 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.351890   0.392868 5.986471 3.0342e-07 *** #> x1          0.654835   0.092447 7.083324 6.8344e-09 *** #> x2          0.237560   0.208019 1.142011 2.5936e-01     #> x3          0.252126   0.346864 0.726873 4.7099e-01     #>  #> ### Sample: versicolor #>  #> Expl. vars.: x1 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.539735   0.562874 6.28869 9.0690e-08 *** #> x1          0.865078   0.201938 4.28389 8.7719e-05 *** #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.116431   0.494256 4.28206 9.0640e-05 *** #> x1          0.247642   0.186839 1.32543 1.9144e-01     #> x2          0.735587   0.124768 5.89565 3.8707e-07 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.895540   0.507055  3.73833 5.1122e-04 *** #> x1           0.386858   0.204545  1.89131 6.4890e-02 .   #> x2           0.908337   0.165432  5.49068 1.6667e-06 *** #> x3          -0.679224   0.435382 -1.56006 1.2560e-01     #>  #> ### Sample: virginica #>  #> Expl. vars.: x1 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.906836   0.757061 5.16053 4.6563e-06 *** #> x1          0.901534   0.253106 3.56189 8.4346e-04 *** #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 0.624782   0.524867  1.19036 2.3988e-01     #> x1          0.259954   0.153338  1.69531 9.6634e-02 .   #> x2          0.934819   0.089602 10.43302 8.0094e-14 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  0.699883   0.533601  1.311623 1.9616e-01     #> x1           0.330337   0.174329  1.894909 6.4400e-02 .   #> x2           0.945536   0.090722 10.422336 1.0743e-13 *** #> x3          -0.169753   0.198072 -0.857023 3.9587e-01"},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":null,"dir":"Reference","previous_headings":"","what":"R2s of fixest models — r2","title":"R2s of fixest models — r2","text":"Reports different R2s fixest estimations (e.g. feglm feols).","code":""},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R2s of fixest models — r2","text":"","code":"r2(x, type = \"all\", full_names = FALSE)"},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R2s of fixest models — r2","text":"x fixest object, e.g. obtained function feglm feols. type character vector representing R2 compute. R2 codes form: \"wapr2\" letters \"w\" (within), \"\" (adjusted) \"p\" (pseudo) possibly missing. E.g. get regular R2: use type = \"r2\", within adjusted R2: use type = \"war2\", pseudo R2: use type = \"pr2\", etc. Use \"cor2\" squared correlation. default, R2s computed. full_names Logical scalar, default FALSE. TRUE names vector output full names instead keywords (e.g. Squared Correlation instead cor2, etc).","code":""},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R2s of fixest models — r2","text":"Returns named vector.","code":""},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R2s of fixest models — r2","text":"pseudo R2s McFaddens R2s, ratio log-likelihoods. R2s theoretical justification, like e.g. regular R2s maximum likelihood models -- within R2s models without fixed-effects, NA returned. single measure possibly compare kinds models squared correlation dependent variable expected predictor. pseudo-R2 also returned OLS case, corresponds pseudo-R2 equivalent GLM model Gaussian family. adjusted within-R2s, adjustment factor (n - nb_fe) / (n - nb_fe - K) n number observations, nb_fe number fixed-effects K number variables.","code":""},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R2s of fixest models — r2","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/r2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R2s of fixest models — r2","text":"","code":"# Load trade data data(trade)  # We estimate the effect of distance on trade (with 3 fixed-effects) est = feols(log(Euros) ~ log(dist_km)|Origin+Destination+Product, trade)  # Squared correlation: r2(est, \"cor2\") #>      cor2  #> 0.7040186   # \"regular\" r2: r2(est, \"r2\") #>        r2  #> 0.7040186   # pseudo r2 (equivalent to GLM with Gaussian family) r2(est, \"pr2\") #>       pr2  #> 0.2353827   # adjusted within r2 r2(est, \"war2\") #>      war2  #> 0.2182526   # all four at once r2(est, c(\"cor2\", \"r2\", \"pr2\", \"war2\")) #>      cor2        r2       pr2      war2  #> 0.7040186 0.7040186 0.2353827 0.2182526   # same with full names instead of codes r2(est, c(\"cor2\", \"r2\", \"pr2\", \"war2\"), full_names = TRUE) #> Squared Correlation                  R2           Pseudo R2  Adjusted Within R2  #>           0.7040186           0.7040186           0.2353827           0.2182526"},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactors a variable — ref","title":"Refactors a variable — ref","text":"Takes variables types, transforms factors, modifies values factors. Useful estimations want set value vector reference.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactors a variable — ref","text":"","code":"ref(x, ref)"},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refactors a variable — ref","text":"x vector type (must atomic though). ref vector list, special binning values (explained later). vector, must correspond (partially matched) values vector x. vector x transformed factor values placed first levels. main usage function. can also bin --fly values x, using syntax function bin. create new value old values, use ref = list(\"new_value\"=old_values) old_values vector existing values. can use .() list(). accepts regular expressions, must start \"@\", like ref=\"@Aug|Dec\". accepts one-sided formulas must contain variable x, e.g. ref=list(\"<2\" = ~x < 2). names list new names. new name missing, first value matched becomes new name. name, adding \"@d\", d digit, relocate value position d: useful change position factors. vector x numeric, can use special value \"bin::digit\" group every digit element. example x represents years, using ref=\"bin::2\" creates bins two years. data, using \"!bin::digit\" groups every digit consecutive values starting first value. Using \"!!bin::digit\" starting last value. numeric vectors can: ) use \"cut::n\" cut vector n equal parts, b) use \"cut::]b[\" create following bins: [min, ], ], b[, [b, max]. latter syntax sequence number/quartile (q0 q4)/percentile (p0 p100) followed open closed square bracket. can add custom bin names adding character vector 'cut::values'. See details examples. Dot square bracket expansion (see dsb) enabled.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refactors a variable — ref","text":"returns factor length x, levels modified according argument ref.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"-cutting-a-numeric-vector","dir":"Reference","previous_headings":"","what":"\"Cutting\" a numeric vector","title":"Refactors a variable — ref","text":"Numeric vectors can cut easily : ) equal parts, b) user-specified bins. Use \"cut::n\" cut vector n (roughly) equal parts. Percentiles used partition data, hence data distributions can lead create less n parts (example P0 P50). user can specify custom bins following syntax: \"cut::]b]c]\". numbers , b, c, etc, sequence increasing numbers, followed open closed square bracket. numbers can specified either plain numbers (e.g. \"cut::5]12[32[\"), quartiles (e.g. \"cut::q1]q3[\"), percentiles (e.g. \"cut::p10]p15]p90]\"). Values different types can mixed: \"cut::5]q2[p80[\" valid provided median (q2) indeed greater 5, otherwise error thrown. square bracket right number tells whether numbers included excluded current bin. example, say x ranges 0 100, \"cut::5]\" create two  bins: one 0 5 second 6 100. \"cut::5[\" bins 0-4 5-100. factor always returned. labels always report min max values bin. user-specified bin labels, just add character vector following 'cut::values'. need provide , NA values fall back default label. example, bin = c(\"cut::4\", \"Q1\", NA, \"Q3\") modify first third label displayed \"Q1\" \"Q3\".","code":""},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"bin-vs-ref","dir":"Reference","previous_headings":"","what":"bin vs ref","title":"Refactors a variable — ref","text":"functions bin ref able thing, use one instead ? differences: ref always returns factor. contrast bin returns, possible, vector type vector input. ref always places values modified first place factor levels. hand, bin tries modify ordering levels. possible make bin mimic behavior ref adding \"@\" first element list argument bin. vector (list) given input, ref place element vector first place factor levels. behavior bin totally different, bin transform values vector single value x (.e. binning).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Refactors a variable — ref","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refactors a variable — ref","text":"","code":"data(airquality)  # A vector of months month_num = airquality$Month month_lab = c(\"may\", \"june\", \"july\", \"august\", \"september\") month_fact = factor(month_num, labels = month_lab) table(month_num) #> month_num #>  5  6  7  8  9  #> 31 30 31 31 30  table(month_fact) #> month_fact #>       may      june      july    august september  #>        31        30        31        31        30   # # Main use #  # Without argument: equivalent to as.factor ref(month_num) #>   [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 #>  [38] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 #>  [75] 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 #> [112] 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 #> [149] 9 9 9 9 9 #> Levels: 5 6 7 8 9  # Main usage: to set a level first: # (Note that partial matching is enabled.) table(ref(month_fact, \"aug\")) #>  #>    august       may      june      july september  #>        31        31        30        31        30   # You can rename the level on-the-fly # (Northern hemisphere specific!) table(ref(month_fact, .(\"Hot month\"=\"aug\",                         \"Late summer\" = \"sept\"))) #>  #>   Hot month Late summer         may        june        july  #>          31          30          31          30          31    # Main use is in estimations: a = feols(Petal.Width ~ Petal.Length + Species, iris)  # We change the reference b = feols(Petal.Width ~ Petal.Length + ref(Species, \"vers\"), iris)  etable(a, b) #>                                               a                   b #> Dependent Var.:                     Petal.Width         Petal.Width #>                                                                     #> Constant                       -0.0908 (0.0564)    0.3445* (0.1489) #> Petal.Length                 0.2304*** (0.0344)  0.2304*** (0.0344) #> Speciesversicolor            0.4354*** (0.1028)                     #> Speciesvirginica             0.8377*** (0.1453)                     #> ref(Species,\"vers\")setosa                       -0.4354*** (0.1028) #> ref(Species,\"vers\")virginica                     0.4023*** (0.0572) #> ____________________________ __________________ ___________________ #> S.E. type                                   IID                 IID #> Observations                                150                 150 #> R2                                      0.94557             0.94557 #> Adj. R2                                 0.94446             0.94446 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # Binning #  # You can also bin factor values on the fly # Using @ first means a regular expression will be used to match the values. # Note that the value created is placed first. # To avoid that behavior => use the function \"bin\" table(ref(month_fact, .(summer = \"@jul|aug|sep\"))) #>  #> summer    may   june  #>     92     31     30   # Please refer to the example in the bin help page for more example. # The syntax is the same.   # # Precise relocation #  # You can place a factor at the location you want #  by adding \"@digit\" in the name first: table(ref(month_num, .(\"@5\"=5))) #>  #>  6  7  8  9  5  #> 30 31 31 30 31   # Same with renaming table(ref(month_num, .(\"@5 five\"=5))) #>  #>    6    7    8    9 five  #>   30   31   31   30   31"},{"path":"https://lrberge.github.io/fixest/reference/rep.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicates fixest objects — rep.fixest","title":"Replicates fixest objects — rep.fixest","text":"Simple function replicates fixest objects (optionally) computing different standard-errors. Useful mostly combination etable coefplot.","code":""},{"path":"https://lrberge.github.io/fixest/reference/rep.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicates fixest objects — rep.fixest","text":"","code":"# S3 method for fixest rep(x, times = 1, each = 1, vcov, ...)  # S3 method for fixest_list rep(x, times = 1, each = 1, vcov, ...)  .l(...)"},{"path":"https://lrberge.github.io/fixest/reference/rep.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicates fixest objects — rep.fixest","text":"x Either fixest object, either list fixest objects created .l(). times Integer vector giving number repetitions vector elements. default times = 1. must either length 1, either length argument x. Integer scalar indicating repetition element. Default 1. vcov list containing types standard-error computed, default missing. missing, must length times, , final vector. Note arguments times missing, times becomes equal length vcov. see summon VCOV, see dedicated section vignette. ... .l(): fixest objects. rep(): currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/rep.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replicates fixest objects — rep.fixest","text":"Returns list appropriate length. element list fixest object.","code":""},{"path":"https://lrberge.github.io/fixest/reference/rep.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replicates fixest objects — rep.fixest","text":"apply rep.fixest list fixest objects, absolutely necessary use .l() list().","code":""},{"path":"https://lrberge.github.io/fixest/reference/rep.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicates fixest objects — rep.fixest","text":"","code":"# Let's show results with different standard-errors  est = feols(Ozone ~ Solar.R + Wind + Temp, data = airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  my_vcov = list(~ Month, ~ Day, ~ Day + Month)  etable(rep(est, vcov = my_vcov)) #>                         model 1.1          model 1.2         model 1.3 #> Dependent Var.:             Ozone              Ozone             Ozone #>                                                                        #> Constant          -64.34* (21.30)   -64.34** (20.15)   -64.34* (19.66) #> Solar.R           0.0598 (0.0335) 0.0598*** (0.0162)   0.0598 (0.0314) #> Wind              -3.334* (1.181) -3.334*** (0.8343)   -3.334* (1.135) #> Temp            1.652*** (0.1583)  1.652*** (0.1927) 1.652*** (0.1386) #> _______________ _________________ __________________ _________________ #> S.E.: Clustered         by: Month            by: Day   by: Day & Month #> Observations                  111                111               111 #> R2                        0.60589            0.60589           0.60589 #> Adj. R2                   0.59484            0.59484           0.59484 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  coefplot(rep(est, vcov = my_vcov), drop = \"Int\")   # # To rep multiple objects, you need to use .l() #  est_bis = feols(Ozone ~ Solar.R + Wind + Temp | Month, airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  etable(rep(.l(est, est_bis), vcov = my_vcov)) #>                         model 1.1         model 2.1          model 1.2 #> Dependent Var.:             Ozone             Ozone              Ozone #>                                                                        #> Constant          -64.34* (21.30)                     -64.34** (20.15) #> Solar.R           0.0598 (0.0335)   0.0522 (0.0408) 0.0598*** (0.0162) #> Wind              -3.334* (1.181)   -3.109. (1.306) -3.334*** (0.8343) #> Temp            1.652*** (0.1583) 1.875*** (0.1816)  1.652*** (0.1927) #> Fixed-Effects:  ----------------- ----------------- ------------------ #> Month                          No               Yes                 No #> _______________ _________________ _________________ __________________ #> S.E.: Clustered         by: Month         by: Month            by: Day #> Observations                  111               111                111 #> R2                        0.60589           0.63686            0.60589 #> Within R2                      --           0.53154                 -- #>  #>                          model 2.2         model 1.3        model 2.3 #> Dependent Var.:              Ozone             Ozone            Ozone #>                                                                       #> Constant                             -64.34* (19.66)                  #> Solar.R           0.0522* (0.0202)   0.0598 (0.0314)  0.0522 (0.0391) #> Wind            -3.109*** (0.7986)   -3.334* (1.135)  -3.109. (1.215) #> Temp             1.875*** (0.3671) 1.652*** (0.1386) 1.875** (0.2209) #> Fixed-Effects:  ------------------ ----------------- ---------------- #> Month                          Yes                No              Yes #> _______________ __________________ _________________ ________________ #> S.E.: Clustered            by: Day   by: Day & Month  by: Day & Month #> Observations                   111               111              111 #> R2                         0.63686           0.60589          0.63686 #> Within R2                  0.53154                --          0.53154 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # using each etable(rep(.l(est, est_bis), each = 3, vcov = my_vcov)) #>                         model 1.1          model 1.2         model 1.3 #> Dependent Var.:             Ozone              Ozone             Ozone #>                                                                        #> Constant          -64.34* (21.30)   -64.34** (20.15)   -64.34* (19.66) #> Solar.R           0.0598 (0.0335) 0.0598*** (0.0162)   0.0598 (0.0314) #> Wind              -3.334* (1.181) -3.334*** (0.8343)   -3.334* (1.135) #> Temp            1.652*** (0.1583)  1.652*** (0.1927) 1.652*** (0.1386) #> Fixed-Effects:  ----------------- ------------------ ----------------- #> Month                          No                 No                No #> _______________ _________________ __________________ _________________ #> S.E.: Clustered         by: Month            by: Day   by: Day & Month #> Observations                  111                111               111 #> R2                        0.60589            0.60589           0.60589 #> Within R2                      --                 --                -- #>  #>                         model 2.1          model 2.2        model 2.3 #> Dependent Var.:             Ozone              Ozone            Ozone #>                                                                       #> Constant                                                              #> Solar.R           0.0522 (0.0408)   0.0522* (0.0202)  0.0522 (0.0391) #> Wind              -3.109. (1.306) -3.109*** (0.7986)  -3.109. (1.215) #> Temp            1.875*** (0.1816)  1.875*** (0.3671) 1.875** (0.2209) #> Fixed-Effects:  ----------------- ------------------ ---------------- #> Month                         Yes                Yes              Yes #> _______________ _________________ __________________ ________________ #> S.E.: Clustered         by: Month            by: Day  by: Day & Month #> Observations                  111                111              111 #> R2                        0.63686            0.63686          0.63686 #> Within R2                 0.53154            0.53154          0.53154 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts residuals from a fixest object — resid.fixest","title":"Extracts residuals from a fixest object — resid.fixest","text":"function extracts residuals fitted model estimated femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts residuals from a fixest object — resid.fixest","text":"","code":"# S3 method for fixest resid(   object,   type = c(\"response\", \"deviance\", \"pearson\", \"working\"),   na.rm = TRUE,   ... )  # S3 method for fixest residuals(   object,   type = c(\"response\", \"deviance\", \"pearson\", \"working\"),   na.rm = TRUE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts residuals from a fixest object — resid.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. type character scalar, either \"response\" (default), \"deviance\", \"pearson\", \"working\". Note \"working\" corresponds residuals weighted least square applies feglm models. na.rm Logical, default TRUE. Whether remove observations NAs original data set. FALSE, vector returned always length original data set. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts residuals from a fixest object — resid.fixest","text":"returns numeric vector length number observations used estimation (na.rm = TRUE) length original data set (na.rm = FALSE).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts residuals from a fixest object — resid.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts residuals from a fixest object — resid.fixest","text":"","code":"# simple estimation on iris data, using \"Species\" fixed-effects res_poisson = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +                     Petal.Width | Species, iris)  # we plot the residuals plot(resid(res_poisson))"},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the residuals from a fixest_multi object — resid.fixest_multi","title":"Extracts the residuals from a fixest_multi object — resid.fixest_multi","text":"Utility extract residuals multiple fixest estimations. possible, residuals coerced matrix.","code":""},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the residuals from a fixest_multi object — resid.fixest_multi","text":"","code":"# S3 method for fixest_multi resid(   object,   type = c(\"response\", \"deviance\", \"pearson\", \"working\"),   na.rm = FALSE,   ... )  # S3 method for fixest_multi residuals(   object,   type = c(\"response\", \"deviance\", \"pearson\", \"working\"),   na.rm = FALSE,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the residuals from a fixest_multi object — resid.fixest_multi","text":"object fixes_multi object. type character scalar, either \"response\" (default), \"deviance\", \"pearson\", \"working\". Note \"working\" corresponds residuals weighted least square applies feglm models. na.rm Logical, default FALSE. NAs kept? TRUE, removed. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the residuals from a fixest_multi object — resid.fixest_multi","text":"models return residuals length, matrix returned. Otherwise, list returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/resid.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the residuals from a fixest_multi object — resid.fixest_multi","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # A multiple estimation est = feols(y ~ x1 + csw0(x2, x3), base)  # We can get all the residuals at once, # each column is a model head(resid(est)) #>            [,1]        [,2]        [,3] #> [1,] -0.6444588  0.10583516  0.08458424 #> [2,] -0.9561394  0.20359754  0.21000282 #> [3,] -1.1114672 -0.06831541 -0.04925142 #> [4,] -1.2338033 -0.20314694 -0.22599409 #> [5,] -0.7221227 -0.05371731 -0.08049948 #> [6,] -0.2551144  0.02604925  0.02280632  # We can select/order the model using fixest_multi extraction head(resid(est[rhs = .N:1])) #>             [,1]        [,2]       [,3] #> [1,]  0.08458424  0.10583516 -0.6444588 #> [2,]  0.21000282  0.20359754 -0.9561394 #> [3,] -0.04925142 -0.06831541 -1.1114672 #> [4,] -0.22599409 -0.20314694 -1.2338033 #> [5,] -0.08049948 -0.05371731 -0.7221227 #> [6,]  0.02280632  0.02604925 -0.2551144"},{"path":"https://lrberge.github.io/fixest/reference/sample_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly draws observations from a data set — sample_df","title":"Randomly draws observations from a data set — sample_df","text":"function useful check data set. gives random number rows input data set.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sample_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly draws observations from a data set — sample_df","text":"","code":"sample_df(x, n = 10, previous = FALSE)"},{"path":"https://lrberge.github.io/fixest/reference/sample_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly draws observations from a data set — sample_df","text":"x data set: either vector, matrix data frame. n number random rows/elements sample randomly. previous Logical scalar. Whether results previous draw returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sample_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly draws observations from a data set — sample_df","text":"data base (resp vector) n rows (resp elements).","code":""},{"path":"https://lrberge.github.io/fixest/reference/sample_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Randomly draws observations from a data set — sample_df","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/sample_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly draws observations from a data set — sample_df","text":"","code":"sample_df(iris) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 117          6.5         3.0          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 79           6.0         2.9          4.5         1.5 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 130          7.2         3.0          5.8         1.6  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 82           5.5         2.4          3.7         1.0 versicolor #> 51           7.0         3.2          4.7         1.4 versicolor  sample_df(iris, previous = TRUE) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 117          6.5         3.0          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 79           6.0         2.9          4.5         1.5 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 130          7.2         3.0          5.8         1.6  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 82           5.5         2.4          3.7         1.0 versicolor #> 51           7.0         3.2          4.7         1.4 versicolor"},{"path":"https://lrberge.github.io/fixest/reference/sandwich_reexported.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions exported from sandwich to implement fixest methods — sandwich_reexported","title":"Functions exported from sandwich to implement fixest methods — sandwich_reexported","text":"package fixest use estfun bread sandwich, methods implemented allow users leverage variances sandwich.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sandwich_reexported.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions exported from sandwich to implement fixest methods — sandwich_reexported","text":"help package sandwich: estfun bread. help package fixest : estfun.fixest bread.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_coefplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the defaults of coefplot — setFixest_coefplot","title":"Sets the defaults of coefplot — setFixest_coefplot","text":"can set default values arguments coefplot function.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_coefplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the defaults of coefplot — setFixest_coefplot","text":"","code":"setFixest_coefplot(   style,   horiz = FALSE,   dict = getFixest_dict(),   keep,   ci.width = \"1%\",   ci_level = 0.95,   pt.pch = 20,   pt.bg = NULL,   cex = 1,   pt.cex = cex,   col = 1:8,   pt.col = col,   ci.col = col,   lwd = 1,   pt.lwd = lwd,   ci.lwd = lwd,   ci.lty = 1,   grid = TRUE,   grid.par = list(lty = 3, col = \"gray\"),   zero = TRUE,   zero.par = list(col = \"black\", lwd = 1),   pt.join = FALSE,   pt.join.par = list(col = pt.col, lwd = lwd),   ci.join = FALSE,   ci.join.par = list(lwd = lwd, col = col, lty = 2),   ci.fill = FALSE,   ci.fill.par = list(col = \"lightgray\", alpha = 0.5),   ref.line = \"auto\",   ref.line.par = list(col = \"black\", lty = 2),   lab.cex,   lab.min.cex = 0.85,   lab.max.mar = 0.25,   lab.fit = \"auto\",   xlim.add,   ylim.add,   sep,   bg,   group = \"auto\",   group.par = list(lwd = 2, line = 3, tcl = 0.75),   main = \"Effect on __depvar__\",   value.lab = \"Estimate and __ci__ Conf. Int.\",   ylab = NULL,   xlab = NULL,   sub = NULL,   reset = FALSE )  getFixest_coefplot()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_coefplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the defaults of coefplot — setFixest_coefplot","text":"style character scalar giving style plot used. can set styles function setFixest_coefplot, setting default values function. missing, switches either \"default\" \"iplot\", depending calling function. horiz logical scalar, default FALSE. Whether display confidence intervals horizontally instead vertically. dict named character vector logical scalar. changes original variable names ones contained dictionary. E.g. change variables named b3 (resp.) “$log()$” “$bonus^3$”, use dict=c(=\"$log()$\",b3=\"$bonus^3$\"). default, equal getFixest_dict(), default dictionary can set setFixest_dict. can use dict = FALSE disable . default dict modifies entries global dictionary, disable behavior, use \"reset\" first element (ex: dict=c(\"reset\", mpg=\"Miles per gallon\")). keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. ci.width width extremities confidence intervals. Default 0.1. ci_level Scalar 0 1: level CI. default equal 0.95. pt.pch patch coefficient estimates. Default 1 (circle). pt.bg background color point estimate (pt.pch 21 25). Defaults NULL. cex Numeric, default 1. Expansion factor points pt.cex size coefficient estimates. Default argument cex. col color points confidence intervals. Default 1 (\"black\"). Note can set colors separately pt.col ci.col. pt.col color coefficient estimates. Default equal argument col. ci.col color confidence intervals. Default equal argument col. lwd General line . Default 1. pt.lwd line width coefficient estimates. Default equal argument lwd. ci.lwd line width confidence intervals. Default equal argument lwd. ci.lty line type confidence intervals. Default 1. grid Logical, default TRUE. Whether grid displayed. can set display grid argument grid.par. grid.par List. Parameters grid. default values : lty = 3 col = \"gray\". can add graphical parameter passed graphics::abline. also two additional arguments: use horiz = FALSE disable horizontal lines, use vert = FALSE disable vertical lines. Eg: grid.par = list(vert = FALSE, col = \"red\", lwd = 2). zero Logical, default TRUE. Whether 0-line emphasized. can set parameters line argument zero.par. zero.par List. Parameters zero-line. default values col = \"black\" lwd = 1. can add graphical parameter passed graphics::abline. Example: zero.par = list(col = \"darkblue\", lwd = 3). pt.join Logical, default FALSE. TRUE, coefficient estimates joined line. pt.join.par List. Parameters line joining coefficients. default values : col = pt.col lwd = lwd. can add graphical parameter passed lines. Eg: pt.join.par = list(lty = 2). ci.join Logical default FALSE. Whether join extremities confidence intervals. TRUE, can set graphical parameters argument ci.join.par. ci.join.par list parameters passed graphics::lines. used ci.join=TRUE. default equal list(lwd = lwd, col = col, lty = 2). ci.fill Logical default FALSE. Whether fill confidence intervals color. TRUE, can set graphical parameters argument ci.fill.par. ci.fill.par list parameters passed graphics::polygon. used ci.fill=TRUE. default equal list(col = \"lightgray\", alpha = 0.5). Note alpha special parameter adds transparency color (ranges 0 1). ref.line Logical numeric, default \"auto\", whose behavior depends situation. TRUE : ) interactions plotted, ii) x values numeric iii) reference found. TRUE, vertical line drawn level reference value. Otherwise, numeric vertical line drawn specific value. ref.line.par List. Parameters vertical line reference. default values : col = \"black\" lty = 2. can add graphical parameter passed graphics::abline. Eg: ref.line.par = list(lty = 1, lwd = 3). lab.cex size labels coefficients. Default missing. automatically set internal algorithm can go low lab.min.cex (another argument). lab.min.cex minimum size coefficients labels, set internal algorithm. Default 0.85. lab.max.mar maximum size left margin can take trying fit coefficient labels (horiz = TRUE). used internal algorithm fitting coefficient labels. Default 0.25. lab.fit method fit coefficient labels plotting region (horiz = FALSE). Can \"auto\" (default), \"simple\", \"multi\" \"tilted\". \"simple\", classic axis drawn. \"multi\", coefficient labels fit horizontally across several lines, collide. \"tilted\", labels tilted. \"auto\", automatic choice three made. xlim.add numeric vector length 1 2. represents extension factor xlim, percentage. Eg: xlim.add = c(0, 0.5) extends xlim 50% right. length 1, positive values represent right, negative values left (Eg: xlim.add = -0.5 equivalent xlim.add = c(0.5, 0)). ylim.add numeric vector length 1 2. represents extension factor ylim, percentage. Eg: ylim.add = c(0, 0.5) extends ylim 50% top. length 1, positive values represent top, negative values bottom (Eg: ylim.add = -0.5 equivalent ylim.add = c(0.5, 0)). sep distance two estimates -- argument object list estimation results. bg Background color plot. default white. group list, default missing. element list reports coefficients grouped name element group name. element list can either: ) character vector length 1, ii) length 2, ii) numeric vector. equal : ) interpreted pattern: element fitting regular expression grouped (note can use special character \"^^\" clean beginning names, see example), ii) corrsponds first last elements grouped, iii) corresponds coefficients numbers grouped. equal character vector, can use percentage tell algorithm look coefficients aliasing (e.g. \"%varname\"). Example valid uses: group=list(group_name=\\\"pattern\\\"), group=list(group_name=c(\\\"var_start\\\", \\\"var_end\\\")), group=list(group_name=1:2)). See details. group.par list parameters controlling display group. parameters controlling line : lwd, tcl (length tick), line.adj (adjustment position, default 0), tick (whether add ticks), lwd.ticks, col.ticks. parameters controlling text: text.adj (adjustment position, default 0), text.cex, text.font, text.col. main title plot. Default \"Effect __depvar__\". can use special variable __depvar__ set title (useful set plot default setFixest_coefplot). value.lab label appear side coefficient values. horiz = FALSE, label appears y-axis. horiz = TRUE, appears x-axis. default equal \"Estimate __ci__ Conf. Int.\", __ci__ special variable giving value confidence interval. ylab label y-axis, default NULL. Note horiz = FALSE, overrides value argument value.lab. xlab label x-axis, default NULL. Note horiz = TRUE, overrides value argument value.lab. sub subtitle, default NULL. reset Logical, default TRUE. TRUE, arguments set call reset \"factory\"-default values. FALSE, hand, arguments already modified changed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_coefplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the defaults of coefplot — setFixest_coefplot","text":"return anything.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/setFixest_coefplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the defaults of coefplot — setFixest_coefplot","text":"","code":"# coefplot has many arguments, which makes it highly flexible. # If you don't like the default style of coefplot. No worries, # you can set *your* default by using the function # setFixest_coefplot()  # Estimation est = feols(Petal.Length ~ Petal.Width + Sepal.Length +                 Sepal.Width | Species, iris)  # Plot with default style coefplot(est)   # Now we permanently change some arguments dict = c(\"Petal.Length\"=\"Length (Petal)\", \"Petal.Width\"=\"Width (Petal)\",          \"Sepal.Length\"=\"Length (Sepal)\", \"Sepal.Width\"=\"Width (Sepal)\")  setFixest_coefplot(ci.col = 2, pt.col = \"darkblue\", ci.lwd = 3,                    pt.cex = 2, pt.pch = 15, ci.width = 0, dict = dict)  # Tadaaa! coefplot(est)   # To reset to the default settings: setFixest_coefplot(\"all\", reset = TRUE) coefplot(est)"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets/gets the dictionary relabeling the variables — setFixest_dict","title":"Sets/gets the dictionary relabeling the variables — setFixest_dict","text":"Sets/gets default dictionary used function etable, did_means coefplot. dictionaries used relabel variables (usually towards fancier, explicit formatting) exporting Latex table displaying graphs. setting dictionary setFixest_dict, can avoid providing argument dict.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets/gets the dictionary relabeling the variables — setFixest_dict","text":"","code":"setFixest_dict(dict = NULL, ..., reset = FALSE)  getFixest_dict()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets/gets the dictionary relabeling the variables — setFixest_dict","text":"dict named character vector character scalar. E.g. change variable named \"\" \"b\" (resp.) \"$log()$\" \"$bonus^3$\", use dict = c(=\"$log()$\", b3=\"$bonus^3$\"). Alternatively can feed character scalar containing dictionary form \"variable 1: definition \\n variable 2: definition\". case function .dict applied get proper dictionary. dictionary used Latex tables graphs function coefplot. want separate Latex rendering rendering graphs, use ampersand first make variable specific coefplot. ... can add arguments form: variable_name = \"Definition\". alternative using named vector argument dict. reset Logical, default FALSE. TRUE, dictionary reset. Note default dictionary always relabels variable \"(Intercept)\" \"Constant\". overwrite , need add \"(Intercept)\" explicitly dictionary.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_dict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sets/gets the dictionary relabeling the variables — setFixest_dict","text":"default dictionary grows. means successive calls erase previous definitions unless argument reset set TRUE. default dictionary equivalent setFixest_dict(\"(Intercept)\" = \"Constant\"). change default, need provide new definition \"(Intercept)\" explicitly.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_dict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets/gets the dictionary relabeling the variables — setFixest_dict","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets/gets the dictionary relabeling the variables — setFixest_dict","text":"","code":"data(trade) est = feols(log(Euros) ~ log(dist_km)|Origin+Destination+Product, trade) # we export the result & rename some variables etable(est, dict = c(\"log(Euros)\"=\"Euros (ln)\", Origin=\"Country of Origin\")) #>                                  est #> Dependent Var.:           Euros (ln) #>                                      #> log(dist_km)      -2.169*** (0.1542) #> Fixed-Effects:    ------------------ #> Country of Origin                Yes #> Destination                      Yes #> Product                          Yes #> _________________ __________________ #> S.E.: Clustered   by: Country of O.. #> Observations                  38,325 #> R2                           0.70402 #> Within R2                    0.21827 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # If you export many tables, it can be more convenient to use setFixest_dict: setFixest_dict(c(\"log(Euros)\"=\"Euros (ln)\", Origin=\"Country of Origin\")) etable(est) # variables are properly relabeled #>                                  est #> Dependent Var.:           Euros (ln) #>                                      #> log(dist_km)      -2.169*** (0.1542) #> Fixed-Effects:    ------------------ #> Country of Origin                Yes #> Destination                      Yes #> Product                          Yes #> _________________ __________________ #> S.E.: Clustered   by: Country of O.. #> Observations                  38,325 #> R2                           0.70402 #> Within R2                    0.21827 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # The dictionary only 'grows' # Here you get the previous two variables + the new one that are relabeled # Btw you set the dictionary directly using the argument names: setFixest_dict(Destination = \"Country of Destination\") etable(est) #>                                       est #> Dependent Var.:                Euros (ln) #>                                           #> log(dist_km)           -2.169*** (0.1542) #> Fixed-Effects:         ------------------ #> Country of Origin                     Yes #> Country of Destination                Yes #> Product                               Yes #> ______________________ __________________ #> S.E.: Clustered        by: Country of O.. #> Observations                       38,325 #> R2                                0.70402 #> Within R2                         0.21827 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Another way to set a dictionary: with a character string: # See the help page of as.dict dict = \"log(dist_km): Distance (ln); Product: Type of Good\" setFixest_dict(dict) etable(est) #>                                       est #> Dependent Var.:                Euros (ln) #>                                           #> Distance (ln)          -2.169*** (0.1542) #> Fixed-Effects:         ------------------ #> Country of Origin                     Yes #> Country of Destination                Yes #> Type of Good                          Yes #> ______________________ __________________ #> S.E.: Clustered        by: Country of O.. #> Observations                       38,325 #> R2                                0.70402 #> Within R2                         0.21827 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # And now we reset: setFixest_dict(reset = TRUE) etable(est) #>                                est #> Dependent Var.:         log(Euros) #>                                    #> log(dist_km)    -2.169*** (0.1542) #> Fixed-Effects:  ------------------ #> Origin                         Yes #> Destination                    Yes #> Product                        Yes #> _______________ __________________ #> S.E.: Clustered         by: Origin #> Observations                38,325 #> R2                         0.70402 #> Within R2                  0.21827 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Default arguments for fixest estimations — setFixest_estimation","title":"Default arguments for fixest estimations — setFixest_estimation","text":"function sets globally default arguments fixest estimations.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default arguments for fixest estimations — setFixest_estimation","text":"","code":"setFixest_estimation(   data = NULL,   panel.id = NULL,   fixef.rm = \"perfect\",   fixef.tol = 1e-06,   fixef.iter = 10000,   collin.tol = 1e-10,   lean = FALSE,   verbose = 0,   warn = TRUE,   combine.quick = NULL,   demeaned = FALSE,   mem.clean = FALSE,   glm.iter = 25,   glm.tol = 1e-08,   reset = FALSE )  getFixest_estimation()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default arguments for fixest estimations — setFixest_estimation","text":"data data.frame containing necessary variables run model. variables non-linear right hand side formula identified data.frame names. Can also matrix. panel.id panel identifiers. Can either : ) one sided formula (e.g. panel.id = ~id+time), ii) character vector length 2 (e.g. panel.id=c('id', 'time'), iii) character scalar two variables separated comma (e.g. panel.id='id,time'). Note can combine variables ^ inside formulas (see dedicated section feols). fixef.rm Can equal \"perfect\" (default), \"singleton\", \"\" \"none\". Controls observations removed. \"perfect\", observations fixed-effect perfect fit (e.g. 0 outcomes Poisson estimations) removed. \"singleton\", observations fixed-effect appears removed. meaning \"\" \"none\" direct. fixef.tol Precision used obtain fixed-effects. Defaults 1e-5. corresponds maximum absolute difference allowed two coefficients successive iterations. Argument fixef.tol lower 10000*.Machine$double.eps. Note parameter dynamically controlled algorithm. fixef.iter Maximum number iterations fixed-effects algorithm (use 2+ fixed-effects). Default 10000. collin.tol Numeric scalar, default 1e-10. Threshold deciding variables considered collinear subsequently removed estimation. Higher values means variables removed (presence collinearity). One signal presence collinearity t-stats extremely low (instance t-stats < 1e-3). lean Logical, default FALSE. TRUE large objects removed returned result: save memory block possibility use many methods. recommended use arguments se cluster obtain appropriate standard-errors estimation time, since obtaining different SEs possible afterwards. verbose Integer. Higher values give information. particular, can detail number iterations demeaning algorithm (first number left-hand-side, numbers right-hand-side variables). warn Logical, default TRUE. Whether warnings displayed (concerns warnings relating convergence state). combine.quick Logical. combine different variables transform single fixed-effects can e.g. y ~ x | paste(var1, var2). algorithm provides shorthand operation: y ~ x | var1^var2. pasting variables costly operation, internal algorithm may use numerical trick hasten process. cost lose labels. interested getting value fixed-effects coefficients estimation, use combine.quick = FALSE. default equal FALSE number observations lower 50,000, TRUE otherwise. demeaned Logical, default FALSE. used presence fixed-effects: centered variables returned? TRUE, creates items y_demeaned X_demeaned. mem.clean Logical, default FALSE. used data set large compared available RAM. TRUE intermediary objects removed much possible gc run substantial C++ section internal code avoid memory issues. glm.iter Number iterations glm algorithm. Default 25. glm.tol Tolerance level glm algorithm. Default 1e-8. reset Logical scalar, default FALSE. Whether reset values.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default arguments for fixest estimations — setFixest_estimation","text":"function getFixest_estimation returns currently set global defaults.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default arguments for fixest estimations — setFixest_estimation","text":"","code":"# # Example: removing singletons is FALSE by default #  # => changing this default  # Let's create data with singletons base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\") base$fe_singletons = as.character(base$species) base$fe_singletons[1:5] = letters[1:5]  res          = feols(y ~ x1 + x2 | fe_singletons, base) res_noSingle = feols(y ~ x1 + x2 | fe_singletons, base, fixef.rm = \"single\") #> NOTE: 5 fixed-effect singletons were removed (5 observations).  # New defaults setFixest_estimation(fixef.rm = \"single\") res_newDefault = feols(y ~ x1 + x2 | fe_singletons, base) #> NOTE: 5 fixed-effect singletons were removed (5 observations).  etable(res, res_noSingle, res_newDefault) #>                                res     res_noSingle   res_newDefault #> Dependent Var.:                  y                y                y #>                                                                      #> x1                0.4274* (0.1409)  0.4274 (0.1615)  0.4274 (0.1615) #> x2              0.7774*** (0.1099) 0.7774* (0.1260) 0.7774* (0.1260) #> Fixed-Effects:  ------------------ ---------------- ---------------- #> fe_singletons                  Yes              Yes              Yes #> _______________ __________________ ________________ ________________ #> S.E.: Clustered  by: fe_singletons by: fe_singlet.. by: fe_singlet.. #> Observations                   150              145              145 #> R2                         0.86452          0.85729          0.85729 #> Within R2                  0.64201          0.64201          0.64201 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Resetting the defaults setFixest_estimation(reset = TRUE)"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_fml.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets/gets formula macros — setFixest_fml","title":"Sets/gets formula macros — setFixest_fml","text":"can set formula macros globally setFixest_fml. macros can used fixest estimations using function xpd.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_fml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets/gets formula macros — setFixest_fml","text":"","code":"setFixest_fml(..., reset = FALSE)  getFixest_fml()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_fml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets/gets formula macros — setFixest_fml","text":"... Definition macro variables. argument name corresponds name macro variable. required macro variable name starts two dots (e.g. ..ctrl). value argument must one-sided formula character vector, definition macro variable. Example valid call: setFixest_fml(..ctrl = ~ var1 + var2). function xpd, default macro variables taken getFixest_fml, variable ... replace values. can enclose values .[], evaluated current environment. example ..ctrl = ~ x.[1:2] + .[z] lead ~x1 + x2 + var z equal \"var\". reset logical scalar, defaults FALSE. TRUE, macro variables first reset (.e. deleted).","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_fml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets/gets formula macros — setFixest_fml","text":"function getFixest_fml() returns list character strings, names corresponding macro variable names, character strings corresponding definition.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_fml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sets/gets formula macros — setFixest_fml","text":"xpd, default macro variables taken getFixest_fml. value ... argument xpd replace default values. definitions macro variables replace verbatim macro variables. Therefore, can include multipart formulas wish beware order macros variable formula. example, using airquality data, say want set controls variable Temp Day fixed-effects, can setFixest_fml(..ctrl = ~Temp | Day), feols(Ozone ~ Wind + ..ctrl, airquality) quite different feols(Ozone ~ ..ctrl + Wind, airquality), beware!","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/setFixest_fml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets/gets formula macros — setFixest_fml","text":"","code":"# Small examples with airquality data data(airquality) # we set two macro variables setFixest_fml(..ctrl = ~ Temp + Day,               ..ctrl_long = ~ poly(Temp, 2) + poly(Day, 2))  # Using the macro in lm with xpd: lm(xpd(Ozone ~ Wind + ..ctrl), airquality) #>  #> Call: #> lm(formula = xpd(Ozone ~ Wind + ..ctrl), data = airquality) #>  #> Coefficients: #> (Intercept)         Wind         Temp          Day   #>    -76.5168      -3.0681       1.8622       0.2506   #>  lm(xpd(Ozone ~ Wind + ..ctrl_long), airquality) #>  #> Call: #> lm(formula = xpd(Ozone ~ Wind + ..ctrl_long), data = airquality) #>  #> Coefficients: #>    (Intercept)            Wind  poly(Temp, 2)1  poly(Temp, 2)2   poly(Day, 2)1   #>         69.603          -2.773         206.921          90.449          26.681   #>  poly(Day, 2)2   #>         20.483   #>   # You can use the macros without xpd() in fixest estimations a = feols(Ozone ~ Wind + ..ctrl, airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). b = feols(Ozone ~ Wind + ..ctrl_long, airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). etable(a, b, keep = \"Int|Win\") #>                                  a                  b #> Dependent Var.:              Ozone              Ozone #>                                                       #> Wind            -3.068*** (0.6629) -2.773*** (0.6451) #> _______________ __________________ __________________ #> S.E. type                      IID                IID #> Observations                   116                116 #> R2                         0.57308            0.62167 #> Adj. R2                    0.56164            0.60447 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # Using .[]  base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) i = 2:3 z = \"species\" lm(xpd(y ~ x.[2:3] + .[z]), base) #>  #> Call: #> lm(formula = xpd(y ~ x.[2:3] + .[z]), data = base) #>  #> Coefficients: #>       (Intercept)                 x2                 x3  speciesversicolor   #>          3.682982           0.905946          -0.005995          -1.598362   #>  speciesvirginica   #>         -2.112647   #>   # No xpd() needed in feols feols(y ~ x.[2:3] + .[z], base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>                    Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)        3.682982   0.107403 34.291343  < 2.2e-16 *** #> x2                 0.905946   0.074311 12.191282  < 2.2e-16 *** #> x3                -0.005995   0.156260 -0.038368 9.6945e-01     #> speciesversicolor -1.598362   0.205706 -7.770113 1.3154e-12 *** #> speciesvirginica  -2.112647   0.304024 -6.948940 1.1550e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.333482   Adj. R2: 0.832221  # # Auto completion with '..' suffix #  # You can trigger variables autocompletion with the '..' suffix # You need to provide the argument data base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) xpd(y ~ x.., data = base) #> y ~ x1 + x2 + x3 #> <environment: 0x000001b158dc4e80>  # In fixest estimations, this is automatically taken care of feols(y ~ x.., data = base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.310327   Adj. R2: 0.855706   # # You can use xpd for stepwise estimations #  # Note that for stepwise estimations in fixest, you can use # the stepwise functions: sw, sw0, csw, csw0 # -> see help in feols or in the dedicated vignette  # we want to look at the effect of x1 on y # controlling for different variables  base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # We first create a matrix with all possible combinations of variables my_args = lapply(names(base)[-(1:2)], function(x) c(\"\", x)) (all_combs = as.matrix(do.call(\"expand.grid\", my_args))) #>      Var1 Var2 Var3      #> [1,] \"\"   \"\"   \"\"        #> [2,] \"x2\" \"\"   \"\"        #> [3,] \"\"   \"x3\" \"\"        #> [4,] \"x2\" \"x3\" \"\"        #> [5,] \"\"   \"\"   \"species\" #> [6,] \"x2\" \"\"   \"species\" #> [7,] \"\"   \"x3\" \"species\" #> [8,] \"x2\" \"x3\" \"species\"  res_all = list() for(i in 1:nrow(all_combs)){   res_all[[i]] = feols(xpd(y ~ x1 + ..v, ..v = all_combs[i, ]), base) }  etable(res_all) #>                             model 1            model 2            model 3 #> Dependent Var.:                   y                  y                  y #>                                                                           #> Constant          6.526*** (0.4789)  2.249*** (0.2480)  3.457*** (0.3092) #> x1                 -0.2234 (0.1551) 0.5955*** (0.0693) 0.3991*** (0.0911) #> x2                                  0.4719*** (0.0171)                    #> x3                                                     0.9721*** (0.0521) #> speciesversicolor                                                         #> speciesvirginica                                                          #> _________________ _________________ __________________ __________________ #> S.E. type                       IID                IID                IID #> Observations                    150                150                150 #> R2                          0.01382            0.84018            0.70724 #> Adj. R2                     0.00716            0.83800            0.70325 #>  #>                               model 4            model 5             model 6 #> Dependent Var.:                     y                  y                   y #>                                                                              #> Constant            1.856*** (0.2508)  2.251*** (0.3698)   2.390*** (0.2623) #> x1                 0.6508*** (0.0667) 0.8036*** (0.1063)  0.4322*** (0.0814) #> x2                 0.7091*** (0.0567)                     0.7756*** (0.0643) #> x3                -0.5565*** (0.1275)                                        #> speciesversicolor                      1.459*** (0.1121) -0.9558*** (0.2152) #> speciesvirginica                       1.947*** (0.1000)  -1.394*** (0.2857) #> _________________ ___________________ __________________ ___________________ #> S.E. type                         IID                IID                 IID #> Observations                      150                150                 150 #> R2                            0.85861            0.72591             0.86331 #> Adj. R2                       0.85571            0.72027             0.85954 #>  #>                              model 7            model 8 #> Dependent Var.:                    y                  y #>                                                         #> Constant           2.521*** (0.3939)  2.171*** (0.2798) #> x1                0.6982*** (0.1195) 0.4959*** (0.0861) #> x2                                   0.8292*** (0.0685) #> x3                  0.3716. (0.1983)  -0.3152* (0.1512) #> speciesversicolor 0.9881*** (0.2747) -0.7236** (0.2402) #> speciesvirginica    1.238** (0.3913)  -1.023** (0.3337) #> _________________ __________________ __________________ #> S.E. type                        IID                IID #> Observations                     150                150 #> R2                           0.73238            0.86731 #> Adj. R2                      0.72500            0.86271 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 coefplot(res_all, group = list(Species = \"^^species\"))   # # You can use macros to grep variables in your data set #  # Example 1: setting a macro variable globally  data(longley) setFixest_fml(..many_vars = grep(\"GNP|ployed\", names(longley), value = TRUE)) feols(Armed.Forces ~ Population + ..many_vars, longley) #> OLS estimation, Dep. Var.: Armed.Forces #> Observations: 16  #> Standard-errors: IID  #>                 Estimate  Std. Error   t value Pr(>|t|)     #> (Intercept)  4403.682352 4091.847594  1.076209 0.307112     #> Population    -22.844324   32.671302 -0.699217 0.500356     #> GNP.deflator    7.638472   12.347773  0.618611 0.550003     #> GNP             3.150533    3.554170  0.886433 0.396201     #> Unemployed     -0.591649    0.389005 -1.520928 0.159248     #> Employed      -50.059800   25.348299 -1.974878 0.076522 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 36.1   Adj. R2: 0.569345  # Example 2: using ..(\"regex\") or regex(\"regex\") to grep the variables \"live\"  feols(Armed.Forces ~ Population + ..(\"GNP|ployed\"), longley) #> OLS estimation, Dep. Var.: Armed.Forces #> Observations: 16  #> Standard-errors: IID  #>                 Estimate  Std. Error   t value Pr(>|t|)     #> (Intercept)  4403.682352 4091.847594  1.076209 0.307112     #> Population    -22.844324   32.671302 -0.699217 0.500356     #> GNP.deflator    7.638472   12.347773  0.618611 0.550003     #> GNP             3.150533    3.554170  0.886433 0.396201     #> Unemployed     -0.591649    0.389005 -1.520928 0.159248     #> Employed      -50.059800   25.348299 -1.974878 0.076522 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 36.1   Adj. R2: 0.569345  # Example 3: same as Ex.2 but without using a fixest estimation  # Here we need to use xpd(): lm(xpd(Armed.Forces ~ Population + regex(\"GNP|ployed\"), data = longley), longley) #>  #> Call: #> lm(formula = xpd(Armed.Forces ~ Population + regex(\"GNP|ployed\"),  #>     data = longley), data = longley) #>  #> Coefficients: #>  (Intercept)    Population  GNP.deflator           GNP    Unemployed   #>    4403.6824      -22.8443        7.6385        3.1505       -0.5916   #>     Employed   #>     -50.0598   #>   # Stepwise estimation with regex: use a comma after the parenthesis feols(Armed.Forces ~ Population + sw(regex(,\"GNP|ployed\")), longley) #> Standard-errors: IID  #> Expl. vars.: Population + GNP.deflator #>               Estimate Std. Error  t value Pr(>|t|)     #> (Intercept)  1126.8354  573.65977  1.96429 0.071242 .   #> Population    -21.9900   10.44869 -2.10457 0.055351 .   #> GNP.deflator   16.8762    6.73510  2.50570 0.026304 *   #> --- #> Expl. vars.: Population + GNP #>               Estimate  Std. Error  t value  Pr(>|t|)     #> (Intercept) 4123.92248 1276.578585  3.23045 0.0065709 **  #> Population   -44.01096   14.088805 -3.12382 0.0080681 **  #> GNP            3.36522    0.985998  3.41301 0.0046253 **  #> --- #> Expl. vars.: Population + Unemployed #>                Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept) -627.459659 282.947983 -2.21758 0.0450189 *   #> Population     9.201621   2.755427  3.33945 0.0053277 **  #> Unemployed    -0.602393   0.205112 -2.93689 0.0115594 *   #> --- #> Expl. vars.: Population + Employed #>               Estimate Std. Error  t value Pr(>|t|)  #> (Intercept) -396.96880  310.16774 -1.27985  0.22297  #> Population    -9.63435    8.44253 -1.14117  0.27439  #> Employed      27.38861   16.72199  1.63788  0.12541   # Multiple LHS etable(feols(..(\"GNP|ployed\") ~ Population, longley)) #>                 feols(..(\"GNP|..1 feols(..(\"GNP|pl..2 feols(..(\"GN..3 #> Dependent Var.:      GNP.deflator                 GNP      Unemployed #>                                                                       #> Constant        -76.69*** (9.903) -1,275.2*** (59.83) -763.7* (307.0) #> Population      1.519*** (0.0842)   14.16*** (0.5086) 9.223** (2.610) #> _______________ _________________ ___________________ _______________ #> S.E. type                     IID                 IID             IID #> Observations                   16                  16              16 #> R2                        0.95876             0.98226         0.47135 #> Adj. R2                   0.95582             0.98099         0.43359 #>  #>                 feols(..(\"GNP|p..4 #> Dependent Var.:           Employed #>                                    #> Constant            8.381. (4.422) #> Population      0.4849*** (0.0376) #> _______________ __________________ #> S.E. type                      IID #> Observations                    16 #> R2                         0.92235 #> Adj. R2                    0.91680 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # lhs and rhs arguments #  # to create a one sided formula from a character vector vars = letters[1:5] xpd(rhs = vars) #> ~a + b + c + d + e #> <environment: 0x000001b158dc4e80>  # Alternatively, to replace the RHS xpd(y ~ 1, rhs = vars) #> y ~ a + b + c + d + e #> <environment: 0x000001b158dc4e80>  # To create a two sided formula xpd(lhs = \"y\", rhs = vars) #> y ~ a + b + c + d + e #> <environment: 0x000001b158dc4e80>  # # argument 'add' #  xpd(~x1, add = ~ x2 + x3) #> ~x1 + x2 + x3 #> <environment: 0x000001b158dc4e80>  # also works with character vectors xpd(~x1, add = c(\"x2\", \"x3\")) #> ~x1 + x2 + x3 #> <environment: 0x000001b158dc4e80>  # only adds to the RHS xpd(y ~ x, add = ~bon + jour) #> y ~ x + bon + jour #> <environment: 0x000001b158dc4e80>  # # Dot square bracket operator #  # The basic use id to add variables in the formula x = c(\"x1\", \"x2\") xpd(y ~ .[x]) #> y ~ x1 + x2 #> <environment: 0x000001b158dc4e80>  # Alternatively, one-sided formulas can be used and their content will be inserted verbatim x = ~x1 + x2 xpd(y ~ .[x]) #> y ~ x1 + x2 #> <environment: 0x000001b158dc4e80>  # You can create multiple variables at once xpd(y ~ x.[1:5] + z.[2:3]) #> y ~ x1 + x2 + x3 + x4 + x5 + z2 + z3 #> <environment: 0x000001b158dc4e80>  # You can summon variables from the environment to complete variables names var = \"a\" xpd(y ~ x.[var]) #> y ~ xa #> <environment: 0x000001b158dc4e80>  # ... the variables can be multiple vars = LETTERS[1:3] xpd(y ~ x.[vars]) #> y ~ xA + xB + xC #> <environment: 0x000001b158dc4e80>  # You can have \"complex\" variable names but they must be nested in character form xpd(y ~ .[\"x.[vars]_sq\"]) #> y ~ xA_sq + xB_sq + xC_sq #> <environment: 0x000001b158dc4e80>  # DSB can be used within regular expressions re = c(\"GNP\", \"Pop\") xpd(Unemployed ~ regex(\".[re]\"), data = longley) #> Unemployed ~ GNP.deflator + GNP + Population #> <environment: 0x000001b158dc4e80>  # => equivalent to regex(\"GNP|Pop\")  # Use .[,var] (NOTE THE COMMA!) to expand with commas # !! can break the formula if missused vars = c(\"wage\", \"unemp\") xpd(c(y.[,1:3]) ~ csw(.[,vars])) #> c(y1, y2, y3) ~ csw(wage, unemp) #> <environment: 0x000001b158dc4e80>   # Example of use of .[] within a loop res_all = list() for(p in 1:3){   res_all[[p]] = feols(Ozone ~ Wind + poly(Temp, .[p]), airquality) } #> NOTE: 37 observations removed because of NA values (LHS: 37). #> NOTE: 37 observations removed because of NA values (LHS: 37). #> NOTE: 37 observations removed because of NA values (LHS: 37).  etable(res_all) #>                            model 1            model 2            model 3 #> Dependent Var.:              Ozone              Ozone              Ozone #>                                                                          #> Constant          72.28*** (6.847)   70.40*** (6.518)   71.31*** (6.512) #> Wind            -3.055*** (0.6633) -2.866*** (0.6315) -2.928*** (0.6295) #> poly(Temp)1       214.7*** (29.17)   209.0*** (27.73)   201.5*** (28.02) #> poly(Temp)2                          93.36*** (25.44)   101.7*** (25.91) #> poly(Temp)3                                               -37.32 (25.03) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   116                116                116 #> R2                         0.56871            0.61501            0.62256 #> Adj. R2                    0.56108            0.60469            0.60896 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # The former can be compactly estimated with: res_compact = feols(Ozone ~ Wind + sw(.[, \"poly(Temp, .[1:3])\"]), airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). #>       |-> this msg only concerns the variables common to all estimations  etable(res_compact) #>                      res_compact.1      res_compact.2      res_compact.3 #> Dependent Var.:              Ozone              Ozone              Ozone #>                                                                          #> Constant          72.28*** (6.847)   70.40*** (6.518)   71.31*** (6.512) #> Wind            -3.055*** (0.6633) -2.866*** (0.6315) -2.928*** (0.6295) #> poly(Temp)1       214.7*** (29.17)   209.0*** (27.73)   201.5*** (28.02) #> poly(Temp)2                          93.36*** (25.44)   101.7*** (25.91) #> poly(Temp)3                                               -37.32 (25.03) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   116                116                116 #> R2                         0.56871            0.61501            0.62256 #> Adj. R2                    0.56108            0.60469            0.60896 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # How does it work? # 1)  .[, stuff] evaluates stuff and, if a vector, aggregates it with commas #     Comma aggregation is done thanks to the comma placed after the square bracket #     If .[stuff], then aggregation is with sums. # 2) stuff is evaluated, and if it is a character string, it is evaluated with # the function dsb which expands values in .[] # # Wrapping up: # 2) evaluation of dsb(\"poly(Temp, .[1:3])\") leads to the vector: #    c(\"poly(Temp, 1)\", \"poly(Temp, 2)\", \"poly(Temp, 3)\") # 1) .[, c(\"poly(Temp, 1)\", \"poly(Temp, 2)\", \"poly(Temp, 3)\")] leads to #    poly(Temp, 1), poly(Temp, 2), poly(Temp, 3) # # Hence sw(.[, \"poly(Temp, .[1:3])\"]) becomes: #       sw(poly(Temp, 1), poly(Temp, 2), poly(Temp, 3))   # # In non-fixest functions: guessing the data allows to use regex #  # When used in non-fixest functions, the algorithm tries to \"guess\" the data # so that ..(\"regex\") can be directly evaluated without passing the argument 'data' data(longley) lm(xpd(Armed.Forces ~ Population + ..(\"GNP|ployed\")), longley) #>  #> Call: #> lm(formula = xpd(Armed.Forces ~ Population + ..(\"GNP|ployed\")),  #>     data = longley) #>  #> Coefficients: #>  (Intercept)    Population  GNP.deflator           GNP    Unemployed   #>    4403.6824      -22.8443        7.6385        3.1505       -0.5916   #>     Employed   #>     -50.0598   #>   # same for the auto completion with '..' lm(xpd(Armed.Forces ~ Population + GN..), longley) #>  #> Call: #> lm(formula = xpd(Armed.Forces ~ Population + GN..), data = longley) #>  #> Coefficients: #>  (Intercept)    Population  GNP.deflator           GNP   #>     3901.079       -43.219         2.522         3.039   #>"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets/gets whether to display notes in fixest estimation functions — setFixest_notes","title":"Sets/gets whether to display notes in fixest estimation functions — setFixest_notes","text":"Sets/gets default values whether notes (informing NA observations removed) displayed fixest estimation functions.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets/gets whether to display notes in fixest estimation functions — setFixest_notes","text":"","code":"setFixest_notes(x)  getFixest_notes()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets/gets whether to display notes in fixest estimation functions — setFixest_notes","text":"x logical. FALSE, notes permanently removed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_notes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets/gets whether to display notes in fixest estimation functions — setFixest_notes","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets/gets whether to display notes in fixest estimation functions — setFixest_notes","text":"","code":"# Change default with setFixest_notes(FALSE) feols(Ozone ~ Solar.R, airquality) #> OLS estimation, Dep. Var.: Ozone #> Observations: 111  #> Standard-errors: IID  #>              Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 18.598728   6.747904 2.75622 0.00685602 **  #> Solar.R      0.127165   0.032776 3.87979 0.00017931 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 31.1   Adj. R2: 0.113281  # Back to default which is TRUE setFixest_notes(TRUE) feols(Ozone ~ Solar.R, airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7). #> OLS estimation, Dep. Var.: Ozone #> Observations: 111  #> Standard-errors: IID  #>              Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 18.598728   6.747904 2.75622 0.00685602 **  #> Solar.R      0.127165   0.032776 3.87979 0.00017931 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 31.1   Adj. R2: 0.113281"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_nthreads.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets/gets the number of threads to use in fixest functions — setFixest_nthreads","title":"Sets/gets the number of threads to use in fixest functions — setFixest_nthreads","text":"Sets/gets default number threads used fixest estimation functions. default maximum number threads minus two.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_nthreads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets/gets the number of threads to use in fixest functions — setFixest_nthreads","text":"","code":"setFixest_nthreads(nthreads, save = FALSE)  getFixest_nthreads()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_nthreads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets/gets the number of threads to use in fixest functions — setFixest_nthreads","text":"nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. missing, default use 50% threads. save Either logical equal \"reset\". Default FALSE. TRUE value set permanently project level, means restart R, still obtain previously saved defaults. done writing \".Renviron\" file, located project's working directory, hence must write permission work, works Rstudio. equal \"reset\", default project level erased. Since writing file involved, permission asked user.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_nthreads.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets/gets the number of threads to use in fixest functions — setFixest_nthreads","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_nthreads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets/gets the number of threads to use in fixest functions — setFixest_nthreads","text":"","code":"# Gets the current number of threads getFixest_nthreads() #> [1] 8  # To set multi-threading off: setFixest_nthreads(1)  # To set it back to default: setFixest_nthreads()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_vcov.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the default type of standard errors to be used — setFixest_vcov","title":"Sets the default type of standard errors to be used — setFixest_vcov","text":"functions defines extracts default type standard-errors computed fixest summary, vcov.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_vcov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the default type of standard errors to be used — setFixest_vcov","text":"","code":"setFixest_vcov(   no_FE = \"iid\",   one_FE = \"cluster\",   two_FE = \"cluster\",   panel = \"cluster\",   all = NULL,   reset = FALSE )  getFixest_vcov()"},{"path":"https://lrberge.github.io/fixest/reference/setFixest_vcov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the default type of standard errors to be used — setFixest_vcov","text":"no_FE Character scalar equal either: \"iid\" (default), \"hetero\". type standard-errors use default estimations without fixed-effects. one_FE Character scalar equal either: \"iid\", \"hetero\", \"cluster\" (default). type standard-errors use default estimations one fixed-effect. two_FE Character scalar equal either: \"iid\", \"hetero\", \"cluster\" (default), \"twoway\". type standard-errors use default estimations two fixed-effects. panel Character scalar equal either: \"iid\", \"hetero\", \"cluster\" (default), \"driscoll_kraaay\". type standard-errors use default estimations argument panel.id set . Note panel precedence presence fixed-effects. Character scalar equal either: \"iid\", \"hetero\". default NULL. provided, sets SEs value. reset Logical, default FALSE. Whether reset default values.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_vcov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the default type of standard errors to be used — setFixest_vcov","text":"function getFixest_vcov() returns list three elements containing default estimations ) without, ii) one, iii) two fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/setFixest_vcov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the default type of standard errors to be used — setFixest_vcov","text":"","code":"# By default: # - no fixed-effect (FE): standard # - one or more FEs: cluster # - panel: cluster on panel id  data(base_did) est_no_FE  = feols(y ~ x1, base_did) est_one_FE = feols(y ~ x1 | id, base_did) est_two_FE = feols(y ~ x1 | id + period, base_did) est_panel = feols(y ~ x1 | id + period, base_did, panel.id = ~id + period)  etable(est_no_FE, est_one_FE, est_two_FE) #>                          est_no_FE         est_one_FE         est_two_FE #> Dependent Var.:                  y                  y                  y #>                                                                          #> Constant         1.989*** (0.1492)                                       #> x1              0.9831*** (0.0501) 0.9615*** (0.0481) 0.9779*** (0.0458) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> id                              No                Yes                Yes #> period                          No                 No                Yes #> _______________ __________________ __________________ __________________ #> S.E. type                      IID             by: id             by: id #> Observations                 1,080              1,080              1,080 #> R2                         0.26304            0.38715            0.48696 #> Within R2                       --            0.26507            0.30776 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Changing the default standard-errors setFixest_vcov(no_FE = \"hetero\", one_FE = \"iid\",                two_FE = \"twoway\", panel = \"drisc\") etable(est_no_FE, est_one_FE, est_two_FE, est_panel) #>                          est_no_FE         est_one_FE         est_two_FE #> Dependent Var.:                  y                  y                  y #>                                                                          #> Constant         1.989*** (0.1490)                                       #> x1              0.9831*** (0.0510) 0.9615*** (0.0514) 0.9779*** (0.0342) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> id                              No                Yes                Yes #> period                          No                 No                Yes #> _______________ __________________ __________________ __________________ #> S.E. type       Heteroskedas.-rob.                IID    by: id & period #> Observations                 1,080              1,080              1,080 #> R2                         0.26304            0.38715            0.48696 #> Within R2                       --            0.26507            0.30776 #>  #>                          est_panel #> Dependent Var.:                  y #>                                    #> Constant                           #> x1              0.9779*** (0.0241) #> Fixed-Effects:  ------------------ #> id                             Yes #> period                         Yes #> _______________ __________________ #> S.E. type       Drisco.-Kra. (L=1) #> Observations                 1,080 #> R2                         0.48696 #> Within R2                  0.30776 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Resetting the defaults setFixest_vcov(reset = TRUE)"},{"path":"https://lrberge.github.io/fixest/reference/sigma.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual standard deviation of fixest estimations — sigma.fixest","title":"Residual standard deviation of fixest estimations — sigma.fixest","text":"Extract estimated standard deviation errors fixest estimations.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sigma.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residual standard deviation of fixest estimations — sigma.fixest","text":"","code":"# S3 method for fixest sigma(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/sigma.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residual standard deviation of fixest estimations — sigma.fixest","text":"object fixest object. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sigma.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual standard deviation of fixest estimations — sigma.fixest","text":"Returns numeric scalar.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/sigma.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residual standard deviation of fixest estimations — sigma.fixest","text":"","code":"est = feols(Petal.Length ~ Petal.Width, iris) sigma(est) #> [1] 0.4782058"},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":null,"dir":"Reference","previous_headings":"","what":"Governs the small sample correction in fixest VCOVs — ssc","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"Provides small sample correction calculated vcov.fixest/summary.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"","code":"ssc(   adj = TRUE,   fixef.K = \"nested\",   cluster.adj = TRUE,   cluster.df = \"min\",   t.df = \"min\",   fixef.force_exact = FALSE )  dof(   adj = TRUE,   fixef.K = \"nested\",   cluster.adj = TRUE,   cluster.df = \"min\",   t.df = \"min\",   fixef.force_exact = FALSE )  setFixest_ssc(ssc.type = ssc())  getFixest_ssc()"},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"adj Logical scalar, defaults TRUE. Whether apply small sample adjustment form (n - 1) / (n - K), K number estimated parameters. FALSE, adjustment made. fixef.K Character scalar equal \"nested\" (default), \"none\" \"full\". small sample adjustment, account fixed-effects parameters. \"none\", fixed-effects parameters discarded, meaning number parameters (K) equal number variables. \"full\", number parameters equal number variables plus number fixed-effects. Finally, \"nested\", number parameters equal number variables plus number fixed-effects nested clusters used cluster standard-errors. cluster.adj Logical scalar, default TRUE. make small sample correction clustering standard-errors? TRUE G/(G-1) correction performed G number cluster values. cluster.df Either \"conventional\" \"min\" (default). relevant variance-covariance matrix two-way clustered (higher). governs small sample adjustment clusters performed. [Sorry jargon follows.] default unique adjustment made, form G_min/(G_min-1) G_min smallest G_i. cluster.df=\"conventional\" -th \"sandwich\" matrix adjusted G_i/(G_i-1) G_i number unique clusters. t.df Either \"conventional\", \"min\" (default) integer scalar. relevant variance-covariance matrix clustered. governs p-values computed. default, degrees freedom Student t distribution equal minimum size clusters VCOV clustered minus one. t.df=\"conventional\", degrees freedom Student t distribution equal number observations minus number estimated variables. can also pass number manually specify DoF t-distribution. fixef.force_exact Logical, default FALSE. 2 fixed-effects, fixed-effects can irregular, meaning can provide information. , \"real\" number parameters lower total number fixed-effects. fixef.force_exact = TRUE, fixef.fixest first run determine exact number parameters among fixed-effects. Mostly, panels type individual-firm require fixef.force_exact = TRUE (adds computational costs). ssc.type object class ssc.type obtained function ssc.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"returns ssc.type object.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"following vignette: standard-errors, describes details standard-errors computed fixest can replicate standard-errors software.","code":""},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"dof(): function deprecated removed point (6 months August 2021). Exactly ssc.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/ssc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Governs the small sample correction in fixest VCOVs — ssc","text":"","code":"# # Equivalence with lm/glm standard-errors #  # LM # In the absence of fixed-effects, # by default, the standard-errors are computed in the same way  res = feols(Petal.Length ~ Petal.Width + Species, iris) res_lm = lm(Petal.Length ~ Petal.Width + Species, iris) vcov(res) / vcov(res_lm) #>                   (Intercept) Petal.Width Speciesversicolor Speciesvirginica #> (Intercept)                 1           1                 1                1 #> Petal.Width                 1           1                 1                1 #> Speciesversicolor           1           1                 1                1 #> Speciesvirginica            1           1                 1                1  # GLM # By default, there is no small sample adjustment in glm, as opposed to feglm. # To get the same SEs, we need to use ssc(adj = FALSE)  res_pois = fepois(round(Petal.Length) ~ Petal.Width + Species, iris) res_glm = glm(round(Petal.Length) ~ Petal.Width + Species, iris, family = poisson()) vcov(res_pois, ssc = ssc(adj = FALSE)) / vcov(res_glm) #>                   (Intercept) Petal.Width Speciesversicolor Speciesvirginica #> (Intercept)                 1           1                 1                1 #> Petal.Width                 1           1                 1                1 #> Speciesversicolor           1           1                 1                1 #> Speciesvirginica            1           1                 1                1  # Same example with the Gamma res_gamma = feglm(round(Petal.Length) ~ Petal.Width + Species, iris, family = Gamma()) res_glm_gamma = glm(round(Petal.Length) ~ Petal.Width + Species, iris, family = Gamma()) vcov(res_gamma, ssc = ssc(adj = FALSE)) / vcov(res_glm_gamma) #>                   (Intercept) Petal.Width Speciesversicolor Speciesvirginica #> (Intercept)                 1           1                 1                1 #> Petal.Width                 1           1                 1                1 #> Speciesversicolor           1           1                 1                1 #> Speciesvirginica            1           1                 1                1  # # Fixed-effects corrections #  # We create \"irregular\" FEs base = data.frame(x = rnorm(10)) base$y = base$x + rnorm(10) base$fe1 = rep(1:3, c(4, 3, 3)) base$fe2 = rep(1:5, each = 2)  est = feols(y ~ x | fe1 + fe2, base)  # fe1: 3 FEs # fe2: 5 FEs  # # Clustered standard-errors: by fe1 #  # Default: fixef.K = \"nested\" #  => adjustment K = 1 + 5 (i.e. x + fe2) summary(est) #> OLS estimation, Dep. Var.: y #> Observations: 10  #> Fixed-effects: fe1: 3,  fe2: 5 #> Standard-errors: Clustered (fe1)  #>   Estimate Std. Error t value Pr(>|t|)  #> x 0.517215   0.561305 0.92145  0.45409  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.73031     Adj. R2: -1.26941 #>                 Within R2: 0.219994 attributes(vcov(est, attr = TRUE))[c(\"ssc\", \"dof.K\")] #> $ssc #> $adj #> [1] TRUE #>  #> $fixef.K #> [1] \"nested\" #>  #> $cluster.adj #> [1] TRUE #>  #> $cluster.df #> [1] \"min\" #>  #> $t.df #> [1] \"min\" #>  #> $fixef.force_exact #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"ssc.type\" #>  #> $dof.K #> [1] 6 #>    # fixef.K = FALSE #  => adjustment K = 1 (i.e. only x) summary(est, ssc = ssc(fixef.K = \"none\")) #> OLS estimation, Dep. Var.: y #> Observations: 10  #> Fixed-effects: fe1: 3,  fe2: 5 #> Standard-errors: Clustered (fe1)  #>   Estimate Std. Error t value Pr(>|t|)  #> x 0.517215   0.374204 1.38217  0.30104  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.73031     Adj. R2: -1.26941 #>                 Within R2: 0.219994 attr(vcov(est, ssc = ssc(fixef.K = \"none\"), attr = TRUE), \"dof.K\") #> [1] 1   # fixef.K = TRUE #  => adjustment K = 1 + 3 + 5 - 1 (i.e. x + fe1 + fe2 - 1 restriction) summary(est, ssc = ssc(fixef.K = \"full\")) #> OLS estimation, Dep. Var.: y #> Observations: 10  #> Fixed-effects: fe1: 3,  fe2: 5 #> Standard-errors: Clustered (fe1)  #>   Estimate Std. Error  t value Pr(>|t|)  #> x 0.517215   0.793806 0.651563  0.58155  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.73031     Adj. R2: -1.26941 #>                 Within R2: 0.219994 attr(vcov(est, ssc = ssc(fixef.K = \"full\"), attr = TRUE), \"dof.K\") #> [1] 8   # fixef.K = TRUE & fixef.force_exact = TRUE #  => adjustment K = 1 + 3 + 5 - 2 (i.e. x + fe1 + fe2 - 2 restrictions) summary(est, ssc = ssc(fixef.K = \"full\", fixef.force_exact = TRUE)) #> OLS estimation, Dep. Var.: y #> Observations: 10  #> Fixed-effects: fe1: 3,  fe2: 5 #> Standard-errors: Clustered (fe1)  #>   Estimate Std. Error  t value Pr(>|t|)  #> x 0.517215    0.64814 0.797999  0.50857  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.73031     Adj. R2: -1.26941 #>                 Within R2: 0.219994 attr(vcov(est, ssc = ssc(fixef.K = \"full\", fixef.force_exact = TRUE), attr = TRUE), \"dof.K\") #> [1] 7  # There are two restrictions: attr(fixef(est), \"references\") #> NOTE: The fixed-effects are not regular, they cannot be straightforwardly interpreted. #> fe1 fe2  #>   0   2   # # To permanently set the default ssc: #  # eg no small sample adjustment: setFixest_ssc(ssc(adj = FALSE))  # Factory default setFixest_ssc()"},{"path":"https://lrberge.github.io/fixest/reference/stepwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Stepwise estimation tools — stepwise","title":"Stepwise estimation tools — stepwise","text":"Functions perform stepwise estimations.","code":""},{"path":"https://lrberge.github.io/fixest/reference/stepwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stepwise estimation tools — stepwise","text":"","code":"sw(...)  csw(...)  sw0(...)  csw0(...)"},{"path":"https://lrberge.github.io/fixest/reference/stepwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stepwise estimation tools — stepwise","text":"... Represents formula variables added stepwise fashion estimation.","code":""},{"path":"https://lrberge.github.io/fixest/reference/stepwise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stepwise estimation tools — stepwise","text":"include multiple independent variables, need use stepwise functions. 4 stepwise functions: sw, sw0, csw, csw0. explain . Assume following formula: fml = y ~ x1 + sw(x2, x3). stepwise function sw estimate following two models: y ~ x1 + x2 y ~ x1 + x3. , element sw() sequentially, separately, added formula. used sw0 lieu sw, model y ~ x1 also estimated. 0 name implies model without stepwise element also estimated. Finally, prefix c means cumulative: stepwise element added next. , fml = y ~ x1 + csw(x2, x3) lead following models y ~ x1 + x2 y ~ x1 + x2 + x3. 0 meaning also lead model without stepwise elements estimated: words, fml = y ~ x1 + csw0(x2, x3) leads following three models: y ~ x1, y ~ x1 + x2 y ~ x1 + x2 + x3.","code":""},{"path":"https://lrberge.github.io/fixest/reference/stepwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stepwise estimation tools — stepwise","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # Regular stepwise feols(y ~ sw(x1, x2, x3), base) #> Standard-errors: IID  #> Expl. vars.: x1 #>              Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)  6.526223   0.478896 13.62763 < 2.2e-16 *** #> x1          -0.223361   0.155081 -1.44029    0.1519     #> --- #> Expl. vars.: x2 #>             Estimate Std. Error t value  Pr(>|t|)     #> (Intercept) 4.306603   0.078389 54.9389 < 2.2e-16 *** #> x2          0.408922   0.018891 21.6460 < 2.2e-16 *** #> --- #> Expl. vars.: x3 #>             Estimate Std. Error t value  Pr(>|t|)     #> (Intercept) 4.777629   0.072935 65.5055 < 2.2e-16 *** #> x3          0.888580   0.051374 17.2965 < 2.2e-16 ***  # Cumulative stepwise feols(y ~ csw(x1, x2, x3), base) #> Standard-errors: IID  #> Expl. vars.: x1 #>              Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept)  6.526223   0.478896 13.62763 < 2.2e-16 *** #> x1          -0.223361   0.155081 -1.44029    0.1519     #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.249140   0.247970  9.07022 7.0385e-16 *** #> x1          0.595525   0.069328  8.58994 1.1633e-14 *** #> x2          0.471920   0.017118 27.56916  < 2.2e-16 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 ***  # Using the 0 feols(y ~ x1 + x2 + sw0(x3), base) #> Standard-errors: IID  #> Expl. vars.: x1 + x2 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.249140   0.247970  9.07022 7.0385e-16 *** #> x1          0.595525   0.069328  8.58994 1.1633e-14 *** #> x2          0.471920   0.017118 27.56916  < 2.2e-16 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 ***"},{"path":"https://lrberge.github.io/fixest/reference/style.df.html","id":null,"dir":"Reference","previous_headings":"","what":"Style of data.frames created by etable — style.df","title":"Style of data.frames created by etable — style.df","text":"function describes style data.frames created function etable.","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style of data.frames created by etable — style.df","text":"","code":"style.df(   depvar.title = \"Dependent Var.:\",   fixef.title = \"Fixed-Effects:\",   fixef.line = \"-\",   fixef.prefix = \"\",   fixef.suffix = \"\",   slopes.title = \"Varying Slopes:\",   slopes.line = \"-\",   slopes.format = \"__var__ (__slope__)\",   stats.title = \"_\",   stats.line = \"_\",   yesNo = c(\"Yes\", \"No\"),   headers.sep = TRUE,   signif.code = c(`***` = 0.001, `**` = 0.01, `*` = 0.05, . = 0.1),   interaction.combine = \" x \",   i.equal = \" = \",   default = FALSE )"},{"path":"https://lrberge.github.io/fixest/reference/style.df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style of data.frames created by etable — style.df","text":"depvar.title Character scalar. Default \"Dependent Var.:\". row name dependent variables. fixef.title Character scalar. Default \"Fixed-Effects:\". header preceding fixed-effects. equal empty string, line removed. fixef.line single character. Default \"-\". character used create line separation fixed-effects header. Used fixef.title empty string. fixef.prefix Character scalar. Default \"\". prefix appear fixed-effect name. fixef.suffix Character scalar. Default \"\". suffix appear fixed-effect name. slopes.title Character scalar. Default \"Varying Slopes:\". header preceding variables varying slopes. equal empty string, line removed. slopes.line Character scalar. Default \"-\". character used create line separation variables varying slopes header. Used slopes.line empty string. slopes.format Character scalar. Default \"__var__ (__slope__)\". format name varying slopes. values __var__ __slope__ special characters replaced value variable name slope name, respectively. stats.title Character scalar. Default \"_\". header preceding statistics section. equal empty string, line removed. equal single character (like default), character expanded take full column width. stats.line Character scalar. Default \"_\". character used create line separation statistics header. Used stats.title empty string. yesNo Character vector length 1 2. Default c(\"Yes\", \"\"). Used inform presence absence fixed-effects estimation. length 1, automatically second value considered empty string. headers.sep Logical, default TRUE. Whether add line separation headers coefficients. signif.code Named numeric vector, used provide significance codes respect p-value coefficients. Default c(\"***\"=0.001, \"**\"=0.01, \"*\"=0.05, \".\"=0.10). suppress significance codes, use signif.code=NA signif.code=NULL. Can also equal \"letters\", default becomes c(\"\"=0.01, \"b\"=0.05, \"c\"=0.10). interaction.combine Character scalar, defaults \" x \". estimation contains interactions, variables names (aliasing) combined argument. example: dict = c(x1=\"Wind\", x2=\"Rain\") following interaction x1:x2, renamed (default) Wind x Rain -- using interaction.combine = \"*\" lead Wind*Rain. .equal Character scalar, defaults \" = \". affects factor variables created function , tells variable linked value. example Species factor iris data set, default display variable Species = Setosa, etc. .equal = \": \" display becomes Species: Setosa. default Logical, default FALSE. TRUE, values provided user set default.","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style of data.frames created by etable — style.df","text":"returns object class fixest_style_df.","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Style of data.frames created by etable — style.df","text":"@inheritParams etable title elements (depvar.title, fixef.title, slopes.title stats.title) row names returned data.frame. Therefore keep mind two identical (since identical row names forbidden data.frames).","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style of data.frames created by etable — style.df","text":"","code":"# Multiple estimations => see details in feols aq = airquality est = feols(c(Ozone, Solar.R) ~                 Wind + csw(Temp, Temp^2, Temp^3) | Month + Day,             data = aq)   # Default result etable(est) #>                             est.1            est.2            est.3 #> Dependent Var.:             Ozone            Ozone            Ozone #>                                                                     #> Wind             -2.693* (0.8549) -2.630* (0.8632) -2.850* (0.8235) #> Temp            2.373*** (0.2334)   -4.009 (3.422)  -63.53. (27.70) #> Temp square                        0.0407 (0.0213) 0.8215. (0.3757) #> Temp cube                                          -0.0034 (0.0017) #> Fixed-Effects:  ----------------- ---------------- ---------------- #> Month                         Yes              Yes              Yes #> Day                           Yes              Yes              Yes #> _______________ _________________ ________________ ________________ #> S.E.: Clustered         by: Month        by: Month        by: Month #> Observations                  116              116              116 #> R2                        0.78671          0.79718          0.80469 #> Within R2                 0.55271          0.57466          0.59040 #>  #>                          est.4            est.5           est.6 #> Dependent Var.:        Solar.R          Solar.R         Solar.R #>                                                                 #> Wind             3.031 (1.840)    3.181 (1.921)   3.943 (2.466) #> Temp            4.787. (2.086)   17.80. (7.057)   234.4 (152.4) #> Temp square                    -0.0824 (0.0443)  -2.933 (1.969) #> Temp cube                                       0.0124 (0.0084) #> Fixed-Effects:  -------------- ---------------- --------------- #> Month                      Yes              Yes             Yes #> Day                        Yes              Yes             Yes #> _______________ ______________ ________________ _______________ #> S.E.: Clustered      by: Month        by: Month       by: Month #> Observations               146              146             146 #> R2                     0.30641          0.31252         0.32651 #> Within R2              0.08937          0.09740         0.11577 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Playing a bit with the styles etable(est, style.df = style.df(fixef.title = \"\", fixef.suffix = \" FE\",                                  stats.line = \" \", yesNo = \"yes\")) #>                             est.1            est.2            est.3 #> Dependent Var.:             Ozone            Ozone            Ozone #>                                                                     #> Wind             -2.693* (0.8549) -2.630* (0.8632) -2.850* (0.8235) #> Temp            2.373*** (0.2334)   -4.009 (3.422)  -63.53. (27.70) #> Temp square                        0.0407 (0.0213) 0.8215. (0.3757) #> Temp cube                                          -0.0034 (0.0017) #> Month FE                      yes              yes              yes #> Day FE                        yes              yes              yes #> _______________                                                     #> S.E.: Clustered         by: Month        by: Month        by: Month #> Observations                  116              116              116 #> R2                        0.78671          0.79718          0.80469 #> Within R2                 0.55271          0.57466          0.59040 #>  #>                          est.4            est.5           est.6 #> Dependent Var.:        Solar.R          Solar.R         Solar.R #>                                                                 #> Wind             3.031 (1.840)    3.181 (1.921)   3.943 (2.466) #> Temp            4.787. (2.086)   17.80. (7.057)   234.4 (152.4) #> Temp square                    -0.0824 (0.0443)  -2.933 (1.969) #> Temp cube                                       0.0124 (0.0084) #> Month FE                   yes              yes             yes #> Day FE                     yes              yes             yes #> _______________                                                 #> S.E.: Clustered      by: Month        by: Month       by: Month #> Observations               146              146             146 #> R2                     0.30641          0.31252         0.32651 #> Within R2              0.08937          0.09740         0.11577 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/style.tex.html","id":null,"dir":"Reference","previous_headings":"","what":"Style definitions for Latex tables — style.tex","title":"Style definitions for Latex tables — style.tex","text":"function describes style Latex tables exported function etable.","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.tex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style definitions for Latex tables — style.tex","text":"","code":"style.tex(   main = \"base\",   depvar.title,   model.title,   model.format,   line.top,   line.bottom,   var.title,   fixef.title,   fixef.prefix,   fixef.suffix,   fixef.where,   slopes.title,   slopes.format,   fixef_sizes.prefix,   fixef_sizes.suffix,   stats.title,   notes.intro,   notes.tpt.intro,   tablefoot,   tablefoot.value,   yesNo,   tabular = \"normal\",   depvar.style,   no_border,   caption.after,   rules_width,   signif.code,   tpt,   arraystretch,   adjustbox = NULL,   fontsize,   interaction.combine = \" $\\\\times$ \",   i.equal = \" $=$ \" )"},{"path":"https://lrberge.github.io/fixest/reference/style.tex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style definitions for Latex tables — style.tex","text":"main Either \"base\", \"aer\" \"qje\". Defines basic style start . styles \"aer\" \"qje\" almost identical differ top/bottom lines. depvar.title character scalar. title line dependent variables (defaults \"Dependent variable(s):\" main = \"base\" ('s' appears just one variable) \"\" main = \"aer\"). model.title character scalar. title line models (defaults \"Model:\" main = \"base\" \"\" main = \"aer\"). model.format character scalar. value appear top column. defaults \"(1)\". Note 1, , , special characters: found, values automatically incremented across columns. line.top character scalar equal \"simple\", \"double\", anything else. line top table (defaults \"double\" main = \"base\" \"simple\" main = \"aer\"). \"simple\" equivalent \"\\\\toprule\", \"double\" \"\\\\tabularnewline \\\\midrule \\\\midrule\". line.bottom character scalar equal \"simple\", \"double\", anything else. line bottom table (defaults \"double\" main = \"base\" \"simple\" main = \"aer\"). \"simple\" equivalent \"\\\\bottomrule\", \"double\" \"\\\\midrule \\\\midrule & \\\\tabularnewline\". var.title character scalar. title line appearing variables (defaults \"\\\\midrule \\\\emph{Variables}\" main = \"base\" \"\\\\midrule\" main = \"aer\"). Note behavior var.title = \" \" (space) different var.title = \"\" (empty string): first case get empty row, second case get empty row. get line without empty row, use \"\\\\midrule\" (\"\\\\midrule \"!--space!). fixef.title character scalar. title line appearing fixed-effects (defaults \"\\\\midrule \\\\emph{Fixed-effects}\" main = \"base\" \" \" main = \"aer\"). Note behavior fixef.title = \" \" (space) different fixef.title = \"\" (empty string): first case get empty row, second case get empty row. get line without empty row, use \"\\\\midrule\" (\"\\\\midrule \"!--space!). fixef.prefix prefix add fixed-effects names. Defaults \"\" (.e. prefix). fixef.suffix suffix add fixed-effects names. Defaults \"\" main = \"base\") \"fixed-effects\" main = \"aer\"). fixef.Either \"var\" \"stats\". place fixed-effects lines? Defaults \"var\", .e. just variables, main = \"base\") \"stats\", .e. just statistics, main = \"aer\"). slopes.title character scalar. title line appearing variables varying slopes (defaults \"\\\\midrule \\\\emph{Varying Slopes}\" main = \"base\" \"\" main = \"aer\"). Note behavior slopes.title = \" \" (space) different slopes.title = \"\" (empty string): first case get empty row, second case get empty row. get line without empty row, use \"\\\\midrule\" (\"\\\\midrule \"!--space!). slopes.format Character scalar representing format slope variable name. two special characters: \"var\" \"slope\", placeholers variable slope names. Defaults \"__var__ (__slope__)\" main = \"base\") \"__var__ $\\\\times $ __slope__\" main = \"aer\"). fixef_sizes.prefix prefix add fixed-effects names. Defaults \"# \". fixef_sizes.suffix suffix add fixed-effects names. Defaults \"\" (.e. suffix). stats.title character scalar. title line appearing statistics (defaults \"\\\\midrule \\\\emph{Fit statistics\"} main = \"base\" \" \" main = \"aer\"). Note behavior stats.title = \" \" (space) different stats.title = \"\" (empty string): first case get empty row, second case get empty row. get line without empty row, use \"\\\\midrule\" (\"\\\\midrule \"!--space!). notes.intro character scalar. tex code appearing just notes, defaults \"\\\\par \\\\raggedright \\n\". notes.tpt.intro Character scalar. used tpt = TRUE, tex code passed threeparttable item (can used , typically, font size). Default empty string. tablefoot logical scalar. Whether display footer within table. Defaults TRUE main = \"aer\") FALSE main = \"aer\"). tablefoot.value character scalar. notes displayed footer. Defaults \"default\" main = \"base\", leads custom footers informing type standard-error significance codes, depending estimations. yesNo character vector length 1 2. Defaults \"Yes\" main = \"base\" \"$\\\\checkmark$\" main = \"aer\" (package amssymb). message displayed given fixed-effect () included regression. yesNo length 1, second element empty string. tabular (Tex .) Character scalar equal \"normal\" (default), \"*\" \"X\". Represents type tabular environment use: either tabular, tabular* tabularx. depvar.style Character scalar equal either \" \" (default), \"*\" (italic), \"**\" (bold), \"***\" (italic-bold). name dependent variable displayed. no_border Logical, default FALSE. Whether remove side border table (typically adds @\\{\\ sides tabular). caption.Character scalar. Tex code placed right caption. Defaults \"\" main = \"base\" \"\\\\medskip\" main = \"aer\". rules_width Character vector length 1 2. vector gives width booktabs rules: first element heavy-width, second element light-width. NA values mean modification. length 1, heavy rules modified. width Latex units (ex: \"0.1 em\", etc). signif.code Named numeric vector, used provide significance codes respect p-value coefficients. Default c(\"***\"=0.01, \"**\"=0.05, \"*\"=0.10). suppress significance codes, use signif.code=NA signif.code=NULL. Can also equal \"letters\", default becomes c(\"\"=0.01, \"b\"=0.05, \"c\"=0.10). tpt (Tex .) Logical scalar, default FALSE. Whether use threeparttable environment. , notes integrated tablenotes environment. arraystretch (Tex .) numeric scalar, default NULL. provided, command \\\\renewcommand*{\\\\arraystretch{x}} inserted, replacing x value arraystretch. changes specific current table affect rest document. adjustbox (Tex .) logical, numeric character scalar, default NULL. NULL, table inserted within adjustbox environment. default options width = 1\\\\textwidth, center (TRUE). numeric value changes value \\\\textwidth. can also add character form \"x tw\" \"x th\" x number tw (th) stands text-width (text-height). Finally character value passed verbatim adjustbox option. fontsize (Tex .) character scalar, default NULL. Can equal tiny, scriptsize, footnotesize, small, normalsize, large, Large. change affect table (rest document). interaction.combine Character scalar, defaults \" $\\\\times$ \". estimation contains interactions, variables names (aliasing) combined argument. example: dict = c(x1=\"Wind\", x2=\"Rain\") following interaction x1:x2, renamed (default) Wind $\\\\times$ Rain -- using interaction.combine = \"*\" lead Wind*Rain. .equal Character scalar, defaults \" $=$ \". affects factor variables created function , tells variable linked value. example Species factor iris data set, default display variable Species $=$ Setosa, etc. .equal = \": \" display becomes Species: Setosa.","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.tex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style definitions for Latex tables — style.tex","text":"Returns list containing style parameters.","code":""},{"path":"https://lrberge.github.io/fixest/reference/style.tex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Style definitions for Latex tables — style.tex","text":"\\\\checkmark command, used \"aer\" style (argument yesNo), amssymb package. commands \\\\toprule, \\\\midrule \\\\bottomrule booktabs package. can set width top/bottom rules \\\\setlength\\\\heavyrulewidth\\{wd\\}, midrule \\\\setlength\\\\lightrulewidth\\{wd\\}. Note titles (depvar.title, depvar.title, etc) escaped, must valid Latex expressions.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/style.tex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style definitions for Latex tables — style.tex","text":"","code":"# Multiple estimations => see details in feols aq = airquality est = feols(c(Ozone, Solar.R) ~                 Wind + csw(Temp, Temp^2, Temp^3) | Month + Day,             data = aq)  # Playing a bit with the styles etable(est, tex = TRUE) #> \\begingroup #> \\centering #> \\begin{tabular}{lcccccc} #>    \\tabularnewline \\midrule \\midrule #>    Dependent Variables: & \\multicolumn{3}{c}{Ozone} & \\multicolumn{3}{c}{Solar.R}\\\\ #>    Model:       & (1)           & (2)           & (3)           & (4)         & (5)         & (6)\\\\   #>    \\midrule #>    \\emph{Variables}\\\\ #>    Wind         & -2.693$^{**}$ & -2.630$^{**}$ & -2.850$^{**}$ & 3.031       & 3.181       & 3.943\\\\    #>                 & (0.8549)      & (0.8632)      & (0.8235)      & (1.840)     & (1.921)     & (2.466)\\\\    #>    Temp         & 2.373$^{***}$ & -4.009        & -63.53$^{*}$  & 4.787$^{*}$ & 17.80$^{*}$ & 234.4\\\\    #>                 & (0.2334)      & (3.422)       & (27.70)       & (2.086)     & (7.057)     & (152.4)\\\\    #>    Temp square  &               & 0.0407        & 0.8215$^{*}$  &             & -0.0824     & -2.933\\\\    #>                 &               & (0.0213)      & (0.3757)      &             & (0.0443)    & (1.969)\\\\    #>    Temp cube    &               &               & -0.0034       &             &             & 0.0124\\\\    #>                 &               &               & (0.0017)      &             &             & (0.0084)\\\\    #>    \\midrule #>    \\emph{Fixed-effects}\\\\ #>    Month        & Yes           & Yes           & Yes           & Yes         & Yes         & Yes\\\\   #>    Day          & Yes           & Yes           & Yes           & Yes         & Yes         & Yes\\\\   #>    \\midrule #>    \\emph{Fit statistics}\\\\ #>    Observations & 116           & 116           & 116           & 146         & 146         & 146\\\\   #>    R$^2$        & 0.78671       & 0.79718       & 0.80469       & 0.30641     & 0.31252     & 0.32651\\\\   #>    Within R$^2$ & 0.55271       & 0.57466       & 0.59040       & 0.08937     & 0.09740     & 0.11577\\\\   #>    \\midrule \\midrule #>    \\multicolumn{7}{l}{\\emph{Clustered (Month) standard-errors in parentheses}}\\\\ #>    \\multicolumn{7}{l}{\\emph{Signif. Codes: ***: 0.01, **: 0.05, *: 0.1}}\\\\ #> \\end{tabular} #> \\par\\endgroup etable(est, tex = TRUE, style.tex = style.tex(\"aer\")) #> \\begingroup #> \\centering #> \\begin{tabular}{lcccccc} #>    \\toprule #>     & \\multicolumn{3}{c}{Ozone} & \\multicolumn{3}{c}{Solar.R}\\\\ #>                        & (1)           & (2)           & (3)           & (4)           & (5)           & (6)\\\\   #>    \\midrule  #>    Wind                & -2.693$^{**}$ & -2.630$^{**}$ & -2.850$^{**}$ & 3.031         & 3.181         & 3.943\\\\    #>                        & (0.8549)      & (0.8632)      & (0.8235)      & (1.840)       & (1.921)       & (2.466)\\\\    #>    Temp                & 2.373$^{***}$ & -4.009        & -63.53$^{*}$  & 4.787$^{*}$   & 17.80$^{*}$   & 234.4\\\\    #>                        & (0.2334)      & (3.422)       & (27.70)       & (2.086)       & (7.057)       & (152.4)\\\\    #>    Temp square         &               & 0.0407        & 0.8215$^{*}$  &               & -0.0824       & -2.933\\\\    #>                        &               & (0.0213)      & (0.3757)      &               & (0.0443)      & (1.969)\\\\    #>    Temp cube           &               &               & -0.0034       &               &               & 0.0124\\\\    #>                        &               &               & (0.0017)      &               &               & (0.0084)\\\\    #>     \\\\ #>    Observations        & 116           & 116           & 116           & 146           & 146           & 146\\\\   #>    R$^2$               & 0.78671       & 0.79718       & 0.80469       & 0.30641       & 0.31252       & 0.32651\\\\   #>    Within R$^2$        & 0.55271       & 0.57466       & 0.59040       & 0.08937       & 0.09740       & 0.11577\\\\   #>     \\\\ #>    Month fixed effects & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$\\\\    #>    Day fixed effects   & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$  & $\\checkmark$\\\\    #>    \\bottomrule #> \\end{tabular} #> \\par\\endgroup  etable(est, tex = TRUE, style.tex = style.tex(\"aer\",                                       var.title = \"\\\\emph{Expl. Vars.}\",                                       model.format = \"[i]\",                                       yesNo = \"x\",                                       tabular = \"*\")) #> \\begingroup #> \\centering #> \\begin{tabular*}{\\textwidth}{@{\\extracolsep{\\fill}}lcccccc} #>    \\toprule #>     & \\multicolumn{3}{c}{Ozone} & \\multicolumn{3}{c}{Solar.R}\\\\ #>                        & [i]           & [ii]          & [iii]         & [iv]        & [v]         & [vi]\\\\   #>    \\emph{Expl. Vars.}\\\\ #>    Wind                & -2.693$^{**}$ & -2.630$^{**}$ & -2.850$^{**}$ & 3.031       & 3.181       & 3.943\\\\    #>                        & (0.8549)      & (0.8632)      & (0.8235)      & (1.840)     & (1.921)     & (2.466)\\\\    #>    Temp                & 2.373$^{***}$ & -4.009        & -63.53$^{*}$  & 4.787$^{*}$ & 17.80$^{*}$ & 234.4\\\\    #>                        & (0.2334)      & (3.422)       & (27.70)       & (2.086)     & (7.057)     & (152.4)\\\\    #>    Temp square         &               & 0.0407        & 0.8215$^{*}$  &             & -0.0824     & -2.933\\\\    #>                        &               & (0.0213)      & (0.3757)      &             & (0.0443)    & (1.969)\\\\    #>    Temp cube           &               &               & -0.0034       &             &             & 0.0124\\\\    #>                        &               &               & (0.0017)      &             &             & (0.0084)\\\\    #>     \\\\ #>    Observations        & 116           & 116           & 116           & 146         & 146         & 146\\\\   #>    R$^2$               & 0.78671       & 0.79718       & 0.80469       & 0.30641     & 0.31252     & 0.32651\\\\   #>    Within R$^2$        & 0.55271       & 0.57466       & 0.59040       & 0.08937     & 0.09740     & 0.11577\\\\   #>     \\\\ #>    Month fixed effects & x             & x             & x             & x           & x           & x\\\\   #>    Day fixed effects   & x             & x             & x             & x           & x           & x\\\\   #>    \\bottomrule #> \\end{tabular*} #> \\par\\endgroup"},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsets a fixest_multi object — [.fixest_multi","title":"Subsets a fixest_multi object — [.fixest_multi","text":"Subsets fixest_multi object using different keys.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsets a fixest_multi object — [.fixest_multi","text":"","code":"# S3 method for fixest_multi [(x, i, sample, lhs, rhs, fixef, iv, I, reorder = TRUE, drop = FALSE)"},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsets a fixest_multi object — [.fixest_multi","text":"x fixest_multi object, obtained fixest estimation leading multiple results. integer vector. Represents estimations extract. sample integer vector, logical scalar, character vector. represents sample identifiers results extracted. valid fixest estimation split sample. can use .N refer last element. logical, elements selected cases, FALSE leads sample become rightmost key (just try ). lhs integer vector, logical scalar, character vector. represents left-hand-sides identifiers results extracted. valid fixest estimation contained multiple left-hand-sides. can use .N refer last element. logical, elements selected cases, FALSE leads lhs become rightmost key (just try ). rhs integer vector logical scalar. represents right-hand-sides identifiers results extracted. valid fixest estimation contained multiple right-hand-sides. can use .N refer last element. logical, elements selected cases, FALSE leads rhs become rightmost key (just try ). fixef integer vector logical scalar. represents fixed-effects identifiers results extracted. valid fixest estimation contained fixed-effects stepwise fashion. can use .N refer last element. logical, elements selected cases, FALSE leads fixef become rightmost key (just try ). iv integer vector logical scalar. represent stages IV. Note length can greater 2 multiple endogenous regressors (first stage corresponding multiple estimations). Note order stages depends stage argument summary.fixest. logical, elements selected cases, FALSE leads iv become rightmost key (just try ). integer vector. Represents root element extract. reorder Logical, default TRUE. Indicates whether reordering results performed depending user input. drop Logical, default FALSE. result contains one estimation, drop = TRUE transformed fixest object (instead fixest_multi).","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsets a fixest_multi object — [.fixest_multi","text":"returns fixest_multi object. one estimation left object, result simplified fixest object.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subsets a fixest_multi object — [.fixest_multi","text":"order use keys matter. Every time key sample, lhs, rhs, fixef iv used, reordering performed consider leftmost-side key new root. Use logical keys easily reorder. example, say object res contains multiple estimation multiple left-hand-sides, right-hand-sides fixed-effects. default results ordered follows: lhs, fixef, rhs. use res[lhs = FALSE], new order : fixef, rhs, lhs. res[rhs = TRUE, lhs = FALSE] becomes: rhs, fixef, lhs. cases keep estimations.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsets a fixest_multi object — [.fixest_multi","text":"","code":"# Estimation with multiple samples/LHS/RHS aq = airquality[airquality$Month %in% 5:6, ] est_split = feols(c(Ozone, Solar.R) ~ sw(poly(Wind, 2), poly(Temp, 2)),                   aq, split = ~ Month)  # By default: sample is the root etable(est_split) #>                      est_split.1      est_split.2      est_split.3 #> Sample (Month)                 5                5                5 #> Dependent Var.:            Ozone            Ozone          Solar.R #>                                                                    #> Constant        26.06*** (4.090) 41.22*** (6.910) 182.7*** (23.38) #> poly(Wind)1      -89.96* (35.56)                    -142.3 (205.4) #> poly(Wind)2        66.46 (39.66)                    -177.1 (233.1) #> poly(Temp)1                       215.9** (67.18)                  #> poly(Temp)2                         92.23 (63.43)                  #> _______________ ________________ ________________ ________________ #> S.E. type                    IID              IID              IID #> Observations                  26               26               27 #> R2                       0.23366          0.36534          0.07374 #> Adj. R2                  0.16702          0.31015         -0.00345 #>  #>                      est_split.4    est_split.5     est_split.6 #> Sample (Month)                 5              6               6 #> Dependent Var.:          Solar.R          Ozone           Ozone #>                                                                 #> Constant        191.6*** (37.62) 25.43* (7.310) 30.73** (6.188) #> poly(Wind)1                       91.24 (82.49)                 #> poly(Wind)2                      -43.18 (65.91)                 #> poly(Temp)1        124.1 (373.5)                 -6.996 (59.32) #> poly(Temp)2       -484.8 (322.7)                 121.6* (47.13) #> _______________ ________________ ______________ _______________ #> S.E. type                    IID            IID             IID #> Observations                  27              9               9 #> R2                       0.27498        0.18587         0.73781 #> Adj. R2                  0.21456       -0.08550         0.65041 #>  #>                      est_split.7      est_split.8 #> Sample (Month)                 6                6 #> Dependent Var.:          Solar.R          Solar.R #>                                                   #> Constant        196.5*** (16.70) 161.7*** (37.25) #> poly(Wind)1       233.8. (129.0)                  #> poly(Wind)2       -51.86 (111.4)                  #> poly(Temp)1                         313.2 (344.5) #> poly(Temp)2                         78.76 (214.4) #> _______________ ________________ ________________ #> S.E. type                    IID              IID #> Observations                  30               30 #> R2                       0.12942          0.16719 #> Adj. R2                  0.06493          0.10550 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Let's reorder, by considering lhs the root etable(est_split[lhs = 1:.N]) #>                 est_split[lhs..1 est_split[lhs..2 est_split[l..3 #> Sample (Month)                 5                5              6 #> Dependent Var.:            Ozone            Ozone          Ozone #>                                                                  #> Constant        26.06*** (4.090) 41.22*** (6.910) 25.43* (7.310) #> poly(Wind)1      -89.96* (35.56)                   91.24 (82.49) #> poly(Wind)2        66.46 (39.66)                  -43.18 (65.91) #> poly(Temp)1                       215.9** (67.18)                #> poly(Temp)2                         92.23 (63.43)                #> _______________ ________________ ________________ ______________ #> S.E. type                    IID              IID            IID #> Observations                  26               26              9 #> R2                       0.23366          0.36534        0.18587 #> Adj. R2                  0.16702          0.31015       -0.08550 #>  #>                 est_split[lh..4 est_split[lhs..5 est_split[lhs..6 #> Sample (Month)                6                5                5 #> Dependent Var.:           Ozone          Solar.R          Solar.R #>                                                                   #> Constant        30.73** (6.188) 182.7*** (23.38) 191.6*** (37.62) #> poly(Wind)1                       -142.3 (205.4)                  #> poly(Wind)2                       -177.1 (233.1)                  #> poly(Temp)1      -6.996 (59.32)                     124.1 (373.5) #> poly(Temp)2      121.6* (47.13)                    -484.8 (322.7) #> _______________ _______________ ________________ ________________ #> S.E. type                   IID              IID              IID #> Observations                  9               27               27 #> R2                      0.73781          0.07374          0.27498 #> Adj. R2                 0.65041         -0.00345          0.21456 #>  #>                 est_split[lhs..7 est_split[lhs..8 #> Sample (Month)                 6                6 #> Dependent Var.:          Solar.R          Solar.R #>                                                   #> Constant        196.5*** (16.70) 161.7*** (37.25) #> poly(Wind)1       233.8. (129.0)                  #> poly(Wind)2       -51.86 (111.4)                  #> poly(Temp)1                         313.2 (344.5) #> poly(Temp)2                         78.76 (214.4) #> _______________ ________________ ________________ #> S.E. type                    IID              IID #> Observations                  30               30 #> R2                       0.12942          0.16719 #> Adj. R2                  0.06493          0.10550 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Selecting only one LHS and RHS etable(est_split[lhs = \"Ozone\", rhs = 1]) #>                 est_split[lhs..1 est_split[l..2 #> Sample (Month)                 5              6 #> Dependent Var.:            Ozone          Ozone #>                                                 #> Constant        26.06*** (4.090) 25.43* (7.310) #> poly(Wind)1      -89.96* (35.56)  91.24 (82.49) #> poly(Wind)2        66.46 (39.66) -43.18 (65.91) #> _______________ ________________ ______________ #> S.E. type                    IID            IID #> Observations                  26              9 #> R2                       0.23366        0.18587 #> Adj. R2                  0.16702       -0.08550 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Taking the first root (here sample = 5) etable(est_split[I = 1]) #>                 est_split[I =..1 est_split[I =..2 est_split[I =..3 #> Sample (Month)                 5                5                5 #> Dependent Var.:            Ozone            Ozone          Solar.R #>                                                                    #> Constant        26.06*** (4.090) 41.22*** (6.910) 182.7*** (23.38) #> poly(Wind)1      -89.96* (35.56)                    -142.3 (205.4) #> poly(Wind)2        66.46 (39.66)                    -177.1 (233.1) #> poly(Temp)1                       215.9** (67.18)                  #> poly(Temp)2                         92.23 (63.43)                  #> _______________ ________________ ________________ ________________ #> S.E. type                    IID              IID              IID #> Observations                  26               26               27 #> R2                       0.23366          0.36534          0.07374 #> Adj. R2                  0.16702          0.31015         -0.00345 #>  #>                 est_split[I =..4 #> Sample (Month)                 5 #> Dependent Var.:          Solar.R #>                                  #> Constant        191.6*** (37.62) #> poly(Wind)1                      #> poly(Wind)2                      #> poly(Temp)1        124.1 (373.5) #> poly(Temp)2       -484.8 (322.7) #> _______________ ________________ #> S.E. type                    IID #> Observations                  27 #> R2                       0.27498 #> Adj. R2                  0.21456 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # The first and last estimations etable(est_split[i = c(1, .N)]) #>                 est_split[i =..1 est_split[i =..2 #> Sample (Month)                 5                6 #> Dependent Var.:            Ozone          Solar.R #>                                                   #> Constant        26.06*** (4.090) 161.7*** (37.25) #> poly(Wind)1      -89.96* (35.56)                  #> poly(Wind)2        66.46 (39.66)                  #> poly(Temp)1                         313.2 (344.5) #> poly(Temp)2                         78.76 (214.4) #> _______________ ________________ ________________ #> S.E. type                    IID              IID #> Observations                  26               30 #> R2                       0.23366          0.16719 #> Adj. R2                  0.16702          0.10550 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to subselect from a fixest_panel — [.fixest_panel","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"Subselection fixest_panel created function panel. Also allows create lag/lead variables functions l/f fixest_panel also data.table::data.table.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"","code":"# S3 method for fixest_panel [(x, i, j, ...)"},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"x fixest_panel object, created function panel. Row subselection. Allows data.table::data.table style selection (provided data also data.table). j Variable selection. Allows data.table::data.table style selection/variable creation (provided data also data.table). ... arguments passed [.data.frame data.table::data.table (whatever class initial data).","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"returns fixest_panel data base, attributes allowing create lags/leads properly bookkeeped.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"original data also data.table, calls [.fixest_panel may dissolve fixest_panel object return regular data.table. case subselections additional arguments. , note displayed console.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-.fixest_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method to subselect from a fixest_panel — [.fixest_panel","text":"","code":"data(base_did)  # Creating a fixest_panel object pdat = panel(base_did, ~id+period)  # Subselections of fixest_panel objects bookkeeps the leads/lags engine pdat_small = pdat[!pdat$period %in% c(2, 4), ] a = feols(y~l(x1, 0:1), pdat_small) #> NOTE: 324 observations removed because of NA values (RHS: 324).  # we obtain the same results, had we created the lags \"on the fly\" base_small = base_did[!base_did$period %in% c(2, 4), ] b = feols(y~l(x1, 0:1), base_small, panel.id = ~id+period) #> NOTE: 324 observations removed because of NA values (RHS: 324). etable(a, b) #>                                 a                 b #> Dependent Var.:                 y                 y #>                                                     #> Constant        3.691*** (0.3085) 3.691*** (0.3085) #> x1              1.013*** (0.0707) 1.013*** (0.0707) #> l(x1,1)          -0.0063 (0.0779)  -0.0063 (0.0779) #> _______________ _________________ _________________ #> S.E.: Clustered            by: id            by: id #> Observations                  540               540 #> R2                        0.26258           0.26258 #> Adj. R2                   0.25983           0.25983 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # Using data.table to create new lead/lag variables if(require(\"data.table\")){   pdat_dt = panel(as.data.table(base_did), ~id+period)    # Variable creation   pdat_dt[, x_l1 := l(x1)]   pdat_dt[, c(\"x_l1\", \"x_f1_2\") := .(l(x1), f(x1)**2)]    # Estimation on a subset of the data   #  (the lead/lags work appropriately)   feols(y~l(x1, 0:1), pdat_dt[!period %in% c(2, 4)]) } #> NOTE: 324 observations removed because of NA values (RHS: 324). #> OLS estimation, Dep. Var.: y #> Observations: 540  #> Standard-errors: Clustered (id)  #>              Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept)  3.691450   0.308452 11.967645 < 2.2e-16 *** #> x1           1.012976   0.070704 14.327048 < 2.2e-16 *** #> l(x1, 1)    -0.006268   0.077920 -0.080439   0.93604     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 5.02071   Adj. R2: 0.259834"},{"path":"https://lrberge.github.io/fixest/reference/sub-sub-.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts one element from a fixest_multi object — [[.fixest_multi","title":"Extracts one element from a fixest_multi object — [[.fixest_multi","text":"Extracts single elements multiple fixest estimations.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-sub-.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts one element from a fixest_multi object — [[.fixest_multi","text":"","code":"# S3 method for fixest_multi [[(x, i)"},{"path":"https://lrberge.github.io/fixest/reference/sub-sub-.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts one element from a fixest_multi object — [[.fixest_multi","text":"x fixest_multi object, obtained fixest estimation leading multiple results. integer scalar. identifier estimation extract.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sub-sub-.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts one element from a fixest_multi object — [[.fixest_multi","text":"fixest object returned.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/sub-sub-.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts one element from a fixest_multi object — [[.fixest_multi","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # Multiple estimation res = feols(y ~ csw(x1, x2, x3), base, split = ~species)  # The first estimation res[[1]] #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.639001   0.310014 8.51251 3.7424e-11 *** #> x1          0.690490   0.089899 7.68074 6.7098e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.233723   Adj. R2: 0.542029  # The second one, etc res[[2]] #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.303738   0.385294 5.97917 2.8943e-07 *** #> x1          0.667416   0.090356 7.38653 2.1252e-09 *** #> x2          0.283419   0.197224 1.43704 1.5733e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.228751   Adj. R2: 0.551971"},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.fixef.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for fixed-effects coefficients — summary.fixest.fixef","title":"Summary method for fixed-effects coefficients — summary.fixest.fixef","text":"function summarizes main characteristics fixed-effects coefficients. shows number fixed-effects set references first elements fixed-effects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.fixef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for fixed-effects coefficients — summary.fixest.fixef","text":"","code":"# S3 method for fixest.fixef summary(object, n = 5, ...)"},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.fixef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for fixed-effects coefficients — summary.fixest.fixef","text":"object object returned function fixef.fixest. n Positive integer, defaults 5. n first fixed-effects fixed-effect dimension reported. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.fixef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for fixed-effects coefficients — summary.fixest.fixef","text":"prints number fixed-effect coefficients per fixed-effect dimension, well number fixed-effects used references dimension, mean variance fixed-effect coefficients. Finally, reports first 5 (arg. n) elements fixed-effect.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.fixef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for fixed-effects coefficients — summary.fixest.fixef","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.fixef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for fixed-effects coefficients — summary.fixest.fixef","text":"","code":"data(trade)  # We estimate the effect of distance on trade # => we account for 3 fixed-effects effects est_pois = femlm(Euros ~ log(dist_km)|Origin+Destination+Product, trade)  # obtaining the fixed-effects coefficients fe_trade = fixef(est_pois)  # printing some summary information on the fixed-effects coefficients: summary(fe_trade) #> Fixed_effects coefficients #>                         Origin Destination Product #> Number of fixed-effects     15          15      20 #> Number of references         0           1       1 #> Mean                      23.5        3.09  0.0127 #> Standard-deviation        1.28        1.11    1.36 #>  #> COEFFICIENTS: #>   Origin:    AT    BE    DE   DK    ES                  #>           22.67 23.72 24.87 23.6 25.13 ... 10 remaining #> ----- #>   Destination:    AT    BE    DE    DK    ES                  #>                2.436 2.696 4.323 2.451 4.043 ... 10 remaining #> ----- #>   Product: 1     2     3     4      5                  #>            0 1.414 0.656 1.449 -1.521 ... 15 remaining"},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"function similar print.fixest. provides table coefficients along information fit estimation. can compute different types standard errors. new variance covariance matrix object returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"","code":"# S3 method for fixest summary(   object,   vcov = NULL,   cluster = NULL,   ssc = NULL,   .vcov = NULL,   stage = NULL,   lean = FALSE,   agg = NULL,   forceCovariance = FALSE,   se = NULL,   keepBounded = FALSE,   n = 1000,   nthreads = getFixest_nthreads(),   ... )  # S3 method for fixest_list summary(   object,   se,   cluster,   ssc = getFixest_ssc(),   .vcov,   stage = 2,   lean = FALSE,   n,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. .vcov user provided covariance matrix function computing matrix. matrix, must square matrix number rows number variables estimated. function, must return previously mentioned matrix. stage Can equal 2 (default), 1, 1:2 2:1. used object IV estimation: defines stage summary applied. stage = 1 multiple endogenous regressors stage length 2, object class fixest_multi returned. lean Logical, default FALSE. Used reduce (memory) size summary object. TRUE, objects length N (number observations) removed result. Note fixest methods may consequently work applied summary. agg character scalar describing variable names aggregated, pattern-based. sunab estimations, following keywords work: \"att\", \"period\", \"cohort\" FALSE (full disaggregation). variables match pattern aggregated. must form \"(root)\", parentheses must resulting variable name \"root\". can add another root parentheses: \"(root1)regex(root2)\", case resulting name \"root1::root2\". name resulting variable differently can pass named vector: c(\"name\" = \"pattern\") c(\"name\" = \"pattern(root2)\"). bit intricate sorry, please see examples. forceCovariance (Advanced users.) Logical, default FALSE. peculiar case obtained Hessian invertible (usually collinearity variables), use option force covariance matrix, using generalized inverse Hessian. can useful spot possible problems come . se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. keepBounded (Advanced users -- feNmlm non-linear part bounded coefficients .) Logical, default FALSE. TRUE, bounded coefficients () treated unrestricted coefficients S.E. computed (otherwise ). n Integer, default 1000. Number coefficients display print method used. nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. ... used argument .vocv provided function: extra arguments passed function.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"returns fixest object : cov.scaled new variance-covariance matrix (computed according argument se). se new standard-errors (computed according argument se). coeftable table coefficients new standard errors.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":"compatibility-with-sandwich-package","dir":"Reference","previous_headings":"","what":"Compatibility with sandwich package","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"VCOVs sandwich can used feols, feglm fepois estimations. want sandwich VCOV using summary.fixest, can use argument vcov specify VCOV function use (see examples). Note use formula cluster argument, innocuous warning can pop used several non-numeric fixed-effects estimation (due function expand.model.frame used sandwich).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a fixest object. Computes different types of standard errors. — summary.fixest","text":"","code":"# Load trade data data(trade)  # We estimate the effect of distance on trade (with 3 fixed-effects) est_pois = fepois(Euros ~ log(dist_km)|Origin+Destination+Product, trade)  # Comparing different types of standard errors sum_standard = summary(est_pois, vcov = \"iid\") sum_hetero   = summary(est_pois, vcov = \"hetero\") sum_oneway   = summary(est_pois, vcov = \"cluster\") sum_twoway   = summary(est_pois, vcov = \"twoway\")  etable(sum_standard, sum_hetero, sum_oneway, sum_twoway) #>                        sum_standard         sum_hetero         sum_oneway #> Dependent Var.:               Euros              Euros              Euros #>                                                                           #> log(dist_km)    -1.528*** (1.93e-6) -1.528*** (0.0220) -1.528*** (0.1156) #> Fixed-Effects:  ------------------- ------------------ ------------------ #> Origin                          Yes                Yes                Yes #> Destination                     Yes                Yes                Yes #> Product                         Yes                Yes                Yes #> _______________ ___________________ __________________ __________________ #> S.E. type                       IID Heteroskedas.-rob.         by: Origin #> Observations                 38,325             38,325             38,325 #> Squared Cor.                0.60377            0.60377            0.60377 #> Pseudo R2                   0.76039            0.76039            0.76039 #> BIC                        1.43e+12           1.43e+12           1.43e+12 #>  #>                         sum_twoway #> Dependent Var.:              Euros #>                                    #> log(dist_km)    -1.528*** (0.1307) #> Fixed-Effects:  ------------------ #> Origin                         Yes #> Destination                    Yes #> Product                        Yes #> _______________ __________________ #> S.E. type        by: Orig. & Dest. #> Observations                38,325 #> Squared Cor.               0.60377 #> Pseudo R2                  0.76039 #> BIC                       1.43e+12 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Alternative ways to cluster the SE: summary(est_pois, vcov = cluster ~ Product + Origin) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Product & Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.122773 -12.4437 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377  summary(est_pois, vcov = ~Product + Origin) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Product & Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.122773 -12.4437 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377  summary(est_pois, cluster = ~Product + Origin) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Product & Origin)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.122773 -12.4437 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377   # You can interact the clustering variables \"live\" using the var1 ^ var2 syntax.#' summary(est_pois, vcov = ~Destination^Product) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: Clustered (Destination^Product)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.072633 -21.0337 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377   # # Newey-West and Driscoll-Kraay SEs #  data(base_did) # Simple estimation on a panel est = feols(y ~ x1, base_did)  # -- # Newey-West # Use the syntax NW ~ unit + time summary(est, NW ~ id + period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=1)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.174111 11.4223 1.1709e-06 *** #> x1          0.983110   0.052699 18.6551 1.6762e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # Now take a lag of 3: summary(est, NW(3) ~ id + period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=3)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.194500 10.2249 2.9725e-06 *** #> x1          0.983110   0.051042 19.2610 1.2652e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # -- # Driscoll-Kraay # Use the syntax DK ~ time summary(est, DK ~ period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Driscoll-Kraay (L=1)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 1.988753   0.789538  2.51888 3.2829e-02 *   #> x1          0.983110   0.036115 27.22141 5.9051e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # Now take a lag of 3: summary(est, DK(3) ~ period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Driscoll-Kraay (L=3)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 1.988753   0.971486  2.04712 7.0943e-02 .   #> x1          0.983110   0.028415 34.59840 6.9512e-11 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  #-- # Implicit deductions # When the estimation is done with a panel.id, you don't need to # specify these values.  est_panel = feols(y ~ x1, base_did, panel.id = ~id + period)  # Both methods, NM and DK, now work automatically summary(est_panel, \"NW\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=1)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.174111 11.4223 1.1709e-06 *** #> x1          0.983110   0.052699 18.6551 1.6762e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357 summary(est_panel, \"DK\") #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Driscoll-Kraay (L=1)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 1.988753   0.789538  2.51888 3.2829e-02 *   #> x1          0.983110   0.036115 27.22141 5.9051e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # # VCOVs robust to spatial correlation #  data(quakes) est_geo = feols(depth ~ mag, quakes)  # -- # Conley # Use the syntax: conley(cutoff) ~ lat + lon # with lat/lon the latitude/longitude variable names in the data set summary(est_geo, conley(100) ~ lat + long) #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (100km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   108.9005  8.09569 1.6480e-15 *** #> mag         -123.421    19.2323 -6.41737 2.1389e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245  # Change the cutoff, and how the distance is computed summary(est_geo, conley(200, distance = \"spherical\") ~ lat + long) #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (200km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   128.2426  6.87467 1.0937e-11 *** #> mag         -123.421    22.8950 -5.39074 8.7582e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245  # -- # Implicit deduction # By default the latitude and longitude are directly fetched in the data based # on pattern matching. So you don't have to specify them. # Further an automatic cutoff is computed by default.  # The following works summary(est_geo, \"conley\") #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (90km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   110.6727  7.96606 4.4465e-15 *** #> mag         -123.421    20.1746 -6.11765 1.3619e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245    # # Compatibility with sandwich #  # You can use the VOCVs from sandwich by using the argument .vcov: library(sandwich) summary(est_pois, .vcov = vcovCL, cluster = trade[, c(\"Destination\", \"Product\")]) #> Poisson estimation, Dep. Var.: Euros #> Observations: 38,325  #> Fixed-effects: Origin: 15,  Destination: 15,  Product: 20 #> Standard-errors: NULL  #>              Estimate Std. Error  t value  Pr(>|t|)     #> log(dist_km) -1.52775   0.120014 -12.7298 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Log-Likelihood: -7.133e+11   Adj. Pseudo R2: 0.760389 #>            BIC:  1.427e+12     Squared Cor.: 0.60377"},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for fixest_multi objects — summary.fixest_multi","title":"Summary for fixest_multi objects — summary.fixest_multi","text":"Summary information fixest_multi objects. particular, used specify type standard-errors computed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for fixest_multi objects — summary.fixest_multi","text":"","code":"# S3 method for fixest_multi summary(   object,   type = \"short\",   vcov = NULL,   se = NULL,   cluster = NULL,   ssc = NULL,   .vcov = NULL,   stage = 2,   lean = FALSE,   n = 1000,   ... )"},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for fixest_multi objects — summary.fixest_multi","text":"object fixest_multi object, obtained fixest estimation leading multiple results. type character either equal \"short\", \"long\", \"compact\", \"se_compact\" \"se_long\". short, table coefficients displayed estimation. long, full results displayed estimation. compact, data.frame returned one line per model formatted coefficients + standard-errors columns. se_compact, data.frame returned one line per model, one numeric column coefficient one numeric column standard-error. \"se_long\", \"se_compact\" data long format instead wide. vcov, .vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. stage Can equal 2 (default), 1, 1:2 2:1. used object IV estimation: defines stage summary applied. stage = 1 multiple endogenous regressors stage length 2, object class fixest_multi returned. lean Logical, default FALSE. Used reduce (memory) size summary object. TRUE, objects length N (number observations) removed result. Note fixest methods may consequently work applied summary. n Integer, default 1000. Number coefficients display print method used. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for fixest_multi objects — summary.fixest_multi","text":"returns either object class fixest_multi (type equals short long), either data.frame (type equals compact se_compact).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/summary.fixest_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for fixest_multi objects — summary.fixest_multi","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # Multiple estimation res = feols(y ~ csw(x1, x2, x3), base, split = ~species)  # By default, the type is \"short\" # You can still use the arguments from summary.fixest summary(res, se = \"hetero\") #> Standard-errors: Heteroskedasticity-robust  #>  #> ### Sample: setosa #>  #> Expl. vars.: x1 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.639001   0.298624 8.83722 1.2326e-11 *** #> x1          0.690490   0.085903 8.03803 1.9293e-10 *** #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.303738   0.433561 5.31352 2.8928e-06 *** #> x1          0.667416   0.092247 7.23508 3.6001e-09 *** #> x2          0.283419   0.264794 1.07034 2.8993e-01     #> --- #> Expl. vars.: x1 + x2 + x3 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.351890   0.437230 5.379067 2.4390e-06 *** #> x1          0.654835   0.092468 7.081774 6.8711e-09 *** #> x2          0.237560   0.275270 0.863009 3.9261e-01     #> x3          0.252126   0.284622 0.885827 3.8032e-01     #>  #> ### Sample: versicolor #>  #> Expl. vars.: x1 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.539735   0.617019 5.73683 6.3108e-07 *** #> x1          0.865078   0.220701 3.91969 2.8079e-04 *** #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.116431   0.431296 4.90714 1.1507e-05 *** #> x1          0.247642   0.176500 1.40307 1.6717e-01     #> x2          0.735587   0.111386 6.60395 3.2636e-08 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.895540   0.434294  4.36465 7.1434e-05 *** #> x1           0.386858   0.207117  1.86782 6.8165e-02 .   #> x2           0.908337   0.159800  5.68420 8.5897e-07 *** #> x3          -0.679224   0.436600 -1.55571 1.2663e-01     #>  #> ### Sample: virginica #>  #> Expl. vars.: x1 #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.906836   0.760748 5.13552 5.0735e-06 *** #> x1          0.901534   0.246200 3.66179 6.2338e-04 *** #> --- #> Expl. vars.: x1 + x2 #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 0.624782   0.538060  1.16118 2.5143e-01     #> x1          0.259954   0.130150  1.99734 5.1596e-02 .   #> x2          0.934819   0.076962 12.14650 4.2031e-16 *** #> --- #> Expl. vars.: x1 + x2 + x3 #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  0.699883   0.553402  1.264692 2.1235e-01     #> x1           0.330337   0.122494  2.696759 9.7515e-03 **  #> x2           0.945536   0.080881 11.690520 2.2562e-15 *** #> x3          -0.169753   0.210310 -0.807154 4.2373e-01      summary(res, type = \"long\") #>  #> ### Sample: setosa #>  #> Expl. vars.: x1 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.639001   0.310014 8.51251 3.7424e-11 *** #> x1          0.690490   0.089899 7.68074 6.7098e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.233723   Adj. R2: 0.542029 #>  #> Expl. vars.: x1 + x2 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.303738   0.385294 5.97917 2.8943e-07 *** #> x1          0.667416   0.090356 7.38653 2.1252e-09 *** #> x2          0.283419   0.197224 1.43704 1.5733e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.228751   Adj. R2: 0.551971 #>  #> Expl. vars.: x1 + x2 + x3 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): setosa #> Standard-errors: IID  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 2.351890   0.392868 5.986471 3.0342e-07 *** #> x1          0.654835   0.092447 7.083324 6.8344e-09 *** #> x2          0.237560   0.208019 1.142011 2.5936e-01     #> x3          0.252126   0.346864 0.726873 4.7099e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.227449   Adj. R2: 0.547429 #>  #> ### Sample: versicolor #>  #> Expl. vars.: x1 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): versicolor #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.539735   0.562874 6.28869 9.0690e-08 *** #> x1          0.865078   0.201938 4.28389 8.7719e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.434612   Adj. R2: 0.261511 #>  #> Expl. vars.: x1 + x2 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): versicolor #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 2.116431   0.494256 4.28206 9.0640e-05 *** #> x1          0.247642   0.186839 1.32543 1.9144e-01     #> x2          0.735587   0.124768 5.89565 3.8707e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.329521   Adj. R2: 0.566438 #>  #> Expl. vars.: x1 + x2 + x3 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): versicolor #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.895540   0.507055  3.73833 5.1122e-04 *** #> x1           0.386858   0.204545  1.89131 6.4890e-02 .   #> x2           0.908337   0.165432  5.49068 1.6667e-06 *** #> x3          -0.679224   0.435382 -1.56006 1.2560e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.321135   Adj. R2: 0.579273 #>  #> ### Sample: virginica #>  #> Expl. vars.: x1 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): virginica #> Standard-errors: IID  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 3.906836   0.757061 5.16053 4.6563e-06 *** #> x1          0.901534   0.253106 3.56189 8.4346e-04 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.559836   Adj. R2: 0.192579 #>  #> Expl. vars.: x1 + x2 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): virginica #> Standard-errors: IID  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 0.624782   0.524867  1.19036 2.3988e-01     #> x1          0.259954   0.153338  1.69531 9.6634e-02 .   #> x2          0.934819   0.089602 10.43302 8.0094e-14 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.307439   Adj. R2: 0.75132 #>  #> Expl. vars.: x1 + x2 + x3 #> OLS estimation, Dep. Var.: y #> Observations: 50  #> Sample (species): virginica #> Standard-errors: IID  #>              Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)  0.699883   0.533601  1.311623 1.9616e-01     #> x1           0.330337   0.174329  1.894909 6.4400e-02 .   #> x2           0.945536   0.090722 10.422336 1.0743e-13 *** #> x3          -0.169753   0.198072 -0.857023 3.9587e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.305014   Adj. R2: 0.749908  summary(res, type = \"compact\") #>   lhs     sample          rhs     (Intercept)               x1               x2 #> 1   y setosa     x1           2.64*** (0.310) 0.690*** (0.090)                  #> 2   y setosa     x1 + x2      2.30*** (0.385) 0.667*** (0.090)    0.283 (0.197) #> 3   y setosa     x1 + x2 + x3 2.35*** (0.393) 0.655*** (0.092)    0.238 (0.208) #> 4   y versicolor x1           3.54*** (0.563) 0.865*** (0.202)                  #> 5   y versicolor x1 + x2      2.12*** (0.494)    0.248 (0.187) 0.736*** (0.125) #> 6   y versicolor x1 + x2 + x3 1.90*** (0.507)   0.387. (0.205) 0.908*** (0.165) #> 7   y virginica  x1           3.91*** (0.757) 0.902*** (0.253)                  #> 8   y virginica  x1 + x2        0.625 (0.525)   0.260. (0.153) 0.935*** (0.090) #> 9   y virginica  x1 + x2 + x3   0.700 (0.534)   0.330. (0.174) 0.946*** (0.091) #>               x3 #> 1                #> 2                #> 3  0.252 (0.347) #> 4                #> 5                #> 6 -0.679 (0.435) #> 7                #> 8                #> 9 -0.170 (0.198)  summary(res, type = \"se_compact\") #>   lhs     sample          rhs (Intercept) (Intercept)__se        x1     x1__se #> 1   y setosa     x1             2.6390012       0.3100143 0.6904897 0.08989888 #> 2   y setosa     x1 + x2        2.3037382       0.3852942 0.6674162 0.09035581 #> 3   y setosa     x1 + x2 + x3   2.3518898       0.3928675 0.6548350 0.09244742 #> 4   y versicolor x1             3.5397347       0.5628736 0.8650777 0.20193757 #> 5   y versicolor x1 + x2        2.1164314       0.4942556 0.2476422 0.18683892 #> 6   y versicolor x1 + x2 + x3   1.8955395       0.5070552 0.3868576 0.20454490 #> 7   y virginica  x1             3.9068365       0.7570605 0.9015345 0.25310551 #> 8   y virginica  x1 + x2        0.6247824       0.5248675 0.2599540 0.15333757 #> 9   y virginica  x1 + x2 + x3   0.6998830       0.5336009 0.3303370 0.17432873 #>          x2     x2__se         x3    x3__se #> 1        NA         NA         NA        NA #> 2 0.2834193 0.19722377         NA        NA #> 3 0.2375602 0.20801921  0.2521257 0.3468636 #> 4        NA         NA         NA        NA #> 5 0.7355868 0.12476776         NA        NA #> 6 0.9083370 0.16543248 -0.6792238 0.4353821 #> 7        NA         NA         NA        NA #> 8 0.9348189 0.08960197         NA        NA #> 9 0.9455356 0.09072204 -0.1697527 0.1980724  summary(res, type = \"se_long\") #>    lhs     sample          rhs type (Intercept)         x1         x2 #> 1    y setosa     x1           coef   2.6390012 0.69048972         NA #> 2    y setosa     x1             se   0.3100143 0.08989888         NA #> 3    y setosa     x1 + x2      coef   2.3037382 0.66741621 0.28341929 #> 4    y setosa     x1 + x2        se   0.3852942 0.09035581 0.19722377 #> 5    y setosa     x1 + x2 + x3 coef   2.3518898 0.65483497 0.23756017 #> 6    y setosa     x1 + x2 + x3   se   0.3928675 0.09244742 0.20801921 #> 7    y versicolor x1           coef   3.5397347 0.86507772         NA #> 8    y versicolor x1             se   0.5628736 0.20193757         NA #> 9    y versicolor x1 + x2      coef   2.1164314 0.24764216 0.73558681 #> 10   y versicolor x1 + x2        se   0.4942556 0.18683892 0.12476776 #> 11   y versicolor x1 + x2 + x3 coef   1.8955395 0.38685762 0.90833700 #> 12   y versicolor x1 + x2 + x3   se   0.5070552 0.20454490 0.16543248 #> 13   y virginica  x1           coef   3.9068365 0.90153448         NA #> 14   y virginica  x1             se   0.7570605 0.25310551         NA #> 15   y virginica  x1 + x2      coef   0.6247824 0.25995398 0.93481889 #> 16   y virginica  x1 + x2        se   0.5248675 0.15333757 0.08960197 #> 17   y virginica  x1 + x2 + x3 coef   0.6998830 0.33033703 0.94553559 #> 18   y virginica  x1 + x2 + x3   se   0.5336009 0.17432873 0.09072204 #>            x3 #> 1          NA #> 2          NA #> 3          NA #> 4          NA #> 5   0.2521257 #> 6   0.3468636 #> 7          NA #> 8          NA #> 9          NA #> 10         NA #> 11 -0.6792238 #> 12  0.4353821 #> 13         NA #> 14         NA #> 15         NA #> 16         NA #> 17 -0.1697527 #> 18  0.1980724"},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":null,"dir":"Reference","previous_headings":"","what":"Sun and Abraham interactions — sunab","title":"Sun and Abraham interactions — sunab","text":"User-level method implement staggered difference--difference estimations la Sun Abraham (Journal Econometrics, forthcoming).","code":""},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sun and Abraham interactions — sunab","text":"","code":"sunab(   cohort,   period,   ref.c = NULL,   ref.p = -1,   bin,   bin.rel,   bin.c,   bin.p,   att = FALSE,   no_agg = FALSE )  sunab_att(cohort, period, ref.c = NULL, ref.p = -1)"},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sun and Abraham interactions — sunab","text":"cohort vector representing cohort. represent period treatment received (thus fixed unit). period vector representing period. can either relative time period (negative values representing treatment positive values treatment), regular time period. latter case, relative time period created cohort information (represents time treatment received). ref.c vector references cohort. default never treated cohorts taken reference always treated excluded estimation. can add references argument, means dummies created (remain estimation). ref.p vector references (relative!) period. default first relative period (RP) treatment, .e. -1, taken reference. can instead use references (.e. RPs dummies created -- observations remain sample). Please note need least two references. can use special variables .F .L access first last relative periods. bin list values grouped, vector, special value \"bin::digit\". binning applied cohort period (bin separately, see bin.c bin.p). create new value old values, use bin = list(\"new_value\"=old_values) old_values vector existing values. accepts regular expressions, must start \"@\", like bin=\"@Aug|Dec\". names list new names. new name missing, first value matched becomes new name. Feeding vector like using list without name single element. vector numeric, can use special value \"bin::digit\" group every digit element. example x represent years, using bin=\"bin::2\" create bins two years. Using \"!bin::digit\" groups every digit consecutive values starting first value. Using \"!!bin::digit\" bu starting last value. cases, x required numeric. bin.rel list vector defining values bin. applies relative periods cohorts. Please refer help argument bin understand different ways binning (look help bin). bin.c list vector defining values bin. applies cohort. Please refer help argument bin understand different ways binning (look help bin). bin.p list vector defining values bin. applies period. Please refer help argument bin understand different ways binning (look help bin). att Logical, default FALSE. TRUE: total average treatment effect treated computed (instead ATT relative period). no_agg Logical, default FALSE. TRUE: aggregation, leading estimation cohort x time treatment coefficients.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sun and Abraham interactions — sunab","text":"used within fixest estimation, function return matrix interacted coefficients.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sun and Abraham interactions — sunab","text":"function creates matrix cohort x relative_period interactions, used within fixest estimation, coefficients automatically aggregated obtain ATT relative period. practice, coefficients aggregated aggregate.fixest function whose argument agg automatically set appropriate value. SA method requires relative periods (negative/positive /treatment). Either user can compute RP (relative periods) /, either RPs computed fly periods cohorts (represent treatment period). never treated, cohorts displaying negative RPs used references (.e. dummy constructed ). hand, always treated removed estimation, means adding NAs observations. RPs constructed fly, cohort present period considered never treated. means period ranges 1995 2005, cohort = 1994 considered never treated, although considered always treated: careful. construct relative periods, controls cohorts negative RPs.","code":""},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"binning","dir":"Reference","previous_headings":"","what":"Binning","title":"Sun and Abraham interactions — sunab","text":"can bin periods arguments bin, bin.c, bin.p /bin.rel. argument bin applies original periods cohorts (cohorts also binned!). argument works period represent \"calendar\" periods (relative ones!). Alternatively can bin periods bin.p (either \"calendar\" relative); cohorts bin.c. argument bin.rel applies relative periods (hence cohorts) created. understand binning works, please look help examples function bin. Binning can done many different ways: just remember possible makes sense!","code":""},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sun and Abraham interactions — sunab","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/sunab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sun and Abraham interactions — sunab","text":"","code":"# Simple DiD example data(base_stagg) head(base_stagg) #>   id year year_treated time_to_treatment treated treatment_effect_true #> 2 90    1            2                -1       1                     0 #> 3 89    1            3                -2       1                     0 #> 4 88    1            4                -3       1                     0 #> 5 87    1            5                -4       1                     0 #> 6 86    1            6                -5       1                     0 #> 7 85    1            7                -6       1                     0 #>           x1           y #> 2 -1.0947021  0.01722971 #> 3 -3.7100676 -4.58084528 #> 4  2.5274402  2.73817174 #> 5 -0.7204263 -0.65103066 #> 6 -3.6711678 -5.33381664 #> 7 -0.3152137  0.49562631  # Note that the year_treated is set to 1000 for the never treated table(base_stagg$year_treated) #>  #>     2     3     4     5     6     7     8     9    10 10000  #>    50    50    50    50    50    50    50    50    50   500  table(base_stagg$time_to_treatment) #>  #> -1000    -9    -8    -7    -6    -5    -4    -3    -2    -1     0     1     2  #>   500     5    10    15    20    25    30    35    40    45    45    40    35  #>     3     4     5     6     7     8  #>    30    25    20    15    10     5   # The DiD estimation res_sunab = feols(y ~ x1 + sunab(year_treated, year) | id + year, base_stagg) etable(res_sunab) #>                          res_sunab #> Dependent Var.:                  y #>                                    #> x1              0.9947*** (0.0184) #> year = -9          0.3518 (0.3591) #> year = -8         -0.0790 (0.2975) #> year = -7          0.1010 (0.3670) #> year = -6         -0.0564 (0.3089) #> year = -5         -0.2953 (0.2940) #> year = -4         -0.3037 (0.2491) #> year = -3         -0.0884 (0.2558) #> year = -2          0.0847 (0.2443) #> year = 0        -5.188*** (0.2211) #> year = 1        -3.540*** (0.2128) #> year = 2        -2.155*** (0.2258) #> year = 3        -0.7750** (0.2771) #> year = 4         1.069*** (0.3104) #> year = 5         2.118*** (0.4481) #> year = 6         4.631*** (0.4604) #> year = 7         4.890*** (0.3394) #> year = 8         6.244*** (0.2976) #> Fixed-Effects:  ------------------ #> id                             Yes #> year                           Yes #> _______________ __________________ #> S.E.: Clustered             by: id #> Observations                   950 #> R2                         0.90982 #> Within R2                  0.87641 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # By default the reference periods are the first year and the year before the treatment # i.e. ref.p = c(-1, .F); where .F is a shortcut for the first period. # Say you want to set as references the first three periods on top of -1  res_sunab_3ref = feols(y ~ x1 + sunab(year_treated, year, ref.p = c(.F + 0:2, -1)) |                          id + year, base_stagg)  # Display the two results iplot(list(res_sunab, res_sunab_3ref))   # ... + show all refs iplot(list(res_sunab, res_sunab_3ref), ref = \"all\")    # # ATT #  # To get the total ATT, you can use summary with the agg argument: summary(res_sunab, agg = \"ATT\") #> OLS estimation, Dep. Var.: y #> Observations: 950  #> Fixed-effects: id: 95,  year: 10 #> Standard-errors: Clustered (id)  #>      Estimate Std. Error  t value  Pr(>|t|)     #> x1   0.994678   0.018378 54.12293 < 2.2e-16 *** #> ATT -1.133749   0.205070 -5.52858 2.882e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.921817     Adj. R2: 0.887984 #>                  Within R2: 0.876406  # You can also look at the total effect per cohort summary(res_sunab, agg = \"cohort\") #> OLS estimation, Dep. Var.: y #> Observations: 950  #> Fixed-effects: id: 95,  year: 10 #> Standard-errors: Clustered (id)  #>             Estimate Std. Error    t value   Pr(>|t|)     #> x1          0.994678   0.018378  54.122928  < 2.2e-16 *** #> cohort::2   2.434738   0.286046   8.511690 2.6667e-13 *** #> cohort::3   1.376610   0.619741   2.221266 2.8734e-02 *   #> cohort::4   0.754376   0.805496   0.936537 3.5140e-01     #> cohort::5  -2.807954   0.386545  -7.264231 1.0810e-10 *** #> cohort::6  -2.722579   0.595004  -4.575731 1.4486e-05 *** #> cohort::7  -5.075193   0.567640  -8.940869 3.2825e-14 *** #> cohort::8  -5.092821   0.350586 -14.526611  < 2.2e-16 *** #> cohort::9  -7.236730   0.328854 -22.005879  < 2.2e-16 *** #> cohort::10 -8.711575   0.512805 -16.988071  < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.921817     Adj. R2: 0.887984 #>                  Within R2: 0.876406   # # Binning #  # Binning can be done in many different ways  # binning the cohort est_bin.c   = feols(y ~ x1 + sunab(year_treated, year, bin.c = 3:2) | id + year, base_stagg)  # binning the period est_bin.p   = feols(y ~ x1 + sunab(year_treated, year, bin.p = 3:1) | id + year, base_stagg) #> NOTE: 1 observation removed because of NA values (RHS: 1).  # binning both the cohort and the period est_bin     = feols(y ~ x1 + sunab(year_treated, year, bin = 3:1) | id + year, base_stagg) #> NOTE: 1 observation removed because of NA values (RHS: 1).  # binning the relative period, grouping every two years est_bin.rel = feols(y ~ x1 + sunab(year_treated, year, bin.rel = \"bin::2\") | id + year, base_stagg)  etable(est_bin.c, est_bin.p, est_bin, est_bin.rel, keep = \"year\") #>                          est_bin.c          est_bin.p            est_bin #> Dependent Var.:                  y                  y                  y #>                                                                          #> year = -9          0.3555 (0.3578)                                       #> year = -8         -0.0805 (0.2966)                                       #> year = -7          0.1002 (0.3648)    1.048* (0.4725)    1.046* (0.4713) #> year = -6         -0.0572 (0.3076)   1.142** (0.3399)   1.143** (0.3391) #> year = -5         -0.2963 (0.2925)    0.3179 (0.3811)    0.3182 (0.3808) #> year = -4         -0.3037 (0.2478)    0.2338 (0.3841)    0.2330 (0.3839) #> year = -3         -0.0888 (0.2545)    0.2207 (0.3525)    0.2202 (0.3524) #> year = -2          0.2447 (0.2306)   -0.1542 (0.2967)   -0.1545 (0.2966) #> year = 0        -4.831*** (0.2871) -6.265*** (0.2269) -6.265*** (0.2268) #> year = 1        -3.343*** (0.2632) -4.868*** (0.2376) -4.868*** (0.2376) #> year = 2        -1.888*** (0.2664) -3.683*** (0.2754) -3.682*** (0.2755) #> year = 3          -0.2135 (0.3110) -2.391*** (0.3664) -2.391*** (0.3664) #> year = 4         1.664*** (0.3837)  -0.6738. (0.4027)  -0.6734. (0.4026) #> year = 5         2.696*** (0.5327)   -0.3294 (0.5506)   -0.3288 (0.5507) #> year = 6         5.380*** (0.5230)  2.546*** (0.6858)  2.546*** (0.6865) #> year = 7         6.096*** (0.6931)                                       #> year = 8                                                                 #> Fixed-Effects:  ------------------ ------------------ ------------------ #> id                             Yes                Yes                Yes #> year                           Yes                Yes                Yes #> _______________ __________________ __________________ __________________ #> S.E.: Clustered             by: id             by: id             by: id #> Observations                   950                949                949 #> R2                         0.90550            0.85070            0.85108 #> Within R2                  0.87048            0.79505            0.79567 #>  #>                        est_bin.rel #> Dependent Var.:                  y #>                                    #> year = -9          0.5581 (0.3446) #> year = -8          0.1306 (0.2989) #> year = -7                          #> year = -6         -0.1297 (0.2450) #> year = -5                          #> year = -4         -0.1493 (0.2182) #> year = -3                          #> year = -2          0.1110 (0.2398) #> year = 0        -4.431*** (0.1902) #> year = 1                           #> year = 2        -1.558*** (0.2173) #> year = 3                           #> year = 4         1.464*** (0.3491) #> year = 5                           #> year = 6         4.642*** (0.3113) #> year = 7                           #> year = 8         6.210*** (0.2810) #> Fixed-Effects:  ------------------ #> id                             Yes #> year                           Yes #> _______________ __________________ #> S.E.: Clustered             by: id #> Observations                   950 #> R2                         0.90117 #> Within R2                  0.86455 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/terms.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the terms — terms.fixest","title":"Extract the terms — terms.fixest","text":"function extracts terms fixest estimation, excluding fixed-effects part.","code":""},{"path":"https://lrberge.github.io/fixest/reference/terms.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the terms — terms.fixest","text":"","code":"# S3 method for fixest terms(x, ...)"},{"path":"https://lrberge.github.io/fixest/reference/terms.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the terms — terms.fixest","text":"x fixest object. Obtained using functions femlm, feols feglm. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/terms.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the terms — terms.fixest","text":"object class c(\"terms\", \"formula\") contains terms representation symbolic model.","code":""},{"path":"https://lrberge.github.io/fixest/reference/terms.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the terms — terms.fixest","text":"","code":"# simple estimation on iris data, using \"Species\" fixed-effects res = feols(Sepal.Length ~ Sepal.Width*Petal.Length +             Petal.Width | Species, iris)  # Terms of the linear part terms(res) #> Sepal.Length ~ Sepal.Width * Petal.Length + Petal.Width #> attr(,\"variables\") #> list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) #> attr(,\"factors\") #>              Sepal.Width Petal.Length Petal.Width Sepal.Width:Petal.Length #> Sepal.Length           0            0           0                        0 #> Sepal.Width            1            0           0                        1 #> Petal.Length           0            1           0                        1 #> Petal.Width            0            0           1                        0 #> attr(,\"term.labels\") #> [1] \"Sepal.Width\"              \"Petal.Length\"             #> [3] \"Petal.Width\"              \"Sepal.Width:Petal.Length\" #> attr(,\"order\") #> [1] 1 1 1 2 #> attr(,\"intercept\") #> [1] 1 #> attr(,\"response\") #> [1] 1 #> attr(,\".Environment\") #> <environment: 0x000001b152012d30>"},{"path":"https://lrberge.github.io/fixest/reference/to_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast transform of any type of vector(s) into an integer vector — to_integer","title":"Fast transform of any type of vector(s) into an integer vector — to_integer","text":"Tool transform type vector, even combination vectors, integer vector ranging 1 number unique values. actually creates unique identifier vector.","code":""},{"path":"https://lrberge.github.io/fixest/reference/to_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast transform of any type of vector(s) into an integer vector — to_integer","text":"","code":"to_integer(   ...,   sorted = FALSE,   add_items = FALSE,   items.list = FALSE,   multi.df = FALSE,   multi.join = \"_\",   internal = FALSE )"},{"path":"https://lrberge.github.io/fixest/reference/to_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast transform of any type of vector(s) into an integer vector — to_integer","text":"... Vectors type, transformed integer. sorted Logical, default FALSE. Whether integer vector make reference sorted values? add_items Logical, default FALSE. Whether add unique values original vector(s). requested, attribute items created containing values (alternatively, can appear list items.list=TRUE). items.list Logical, default FALSE. used add_items=TRUE. TRUE, list length 2 returned x integer vector items vector items. multi.df Logical, default FALSE. TRUE data.frame listing unique elements returned form data.frame. Ignored add_items = FALSE. multi.join Character scalar used join items multiple vectors. default \"_\". Ignored add_items = FALSE. internal Logical, default FALSE. programming . function used within another function, setting internal = TRUE needed make evaluation ... valid. End users to_integer care.","code":""},{"path":"https://lrberge.github.io/fixest/reference/to_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast transform of any type of vector(s) into an integer vector — to_integer","text":"Reruns vector length input vectors. add_items=TRUE items.list=TRUE, list two elements returned: x integer vector items unique values values x make reference.","code":""},{"path":"https://lrberge.github.io/fixest/reference/to_integer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast transform of any type of vector(s) into an integer vector — to_integer","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/to_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast transform of any type of vector(s) into an integer vector — to_integer","text":"","code":"x1 = iris$Species x2 = as.integer(iris$Sepal.Length)  # transforms the species vector into integers to_integer(x1) #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 #> [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> [149] 3 3  # To obtain the \"items\": to_integer(x1, add_items = TRUE) #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 #> [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> [149] 3 3 #> attr(,\"items\") #> [1] \"setosa\"     \"versicolor\" \"virginica\"  # same but in list form to_integer(x1, add_items = TRUE, items.list = TRUE) #> $x #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 #> [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> [149] 3 3 #>  #> $items #> [1] \"setosa\"     \"versicolor\" \"virginica\"  #>   # transforms x2 into an integer vector from 1 to 4 to_integer(x2, add_items = TRUE) #>   [1] 1 2 2 2 1 1 2 1 2 2 1 2 2 2 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 2 2 1 1 1 2 1 1 #>  [38] 2 2 1 1 2 2 1 1 2 1 2 1 1 3 4 4 1 4 1 4 2 4 1 1 1 4 4 1 4 1 1 4 1 1 4 4 4 #>  [75] 4 4 4 4 4 1 1 1 1 4 1 4 4 4 1 1 1 4 1 1 1 1 1 4 1 1 4 1 3 4 4 3 2 3 4 3 4 #> [112] 4 4 1 1 4 4 3 3 4 4 1 3 4 4 3 4 4 4 3 3 3 4 4 4 3 4 4 4 4 4 4 1 4 4 4 4 4 #> [149] 4 1 #> attr(,\"items\") #> [1] 5 4 7 6  # To have the sorted items: to_integer(x2, add_items = TRUE, sorted = TRUE) #>   [1] 2 1 1 1 2 2 1 2 1 1 2 1 1 1 2 2 2 2 2 2 2 2 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 #>  [38] 1 1 2 2 1 1 2 2 1 2 1 2 2 4 3 3 2 3 2 3 1 3 2 2 2 3 3 2 3 2 2 3 2 2 3 3 3 #>  [75] 3 3 3 3 3 2 2 2 2 3 2 3 3 3 2 2 2 3 2 2 2 2 2 3 2 2 3 2 4 3 3 4 1 4 3 4 3 #> [112] 3 3 2 2 3 3 4 4 3 3 2 4 3 3 4 3 3 3 4 4 4 3 3 3 4 3 3 3 3 3 3 2 3 3 3 3 3 #> [149] 3 2 #> attr(,\"items\") #> [1] 4 5 6 7  # The result can safely be used as an index res = to_integer(x2, add_items = TRUE, sorted = TRUE, items.list = TRUE) all(res$items[res$x] == x2) #> [1] TRUE   # # Multiple vectors #  to_integer(x1, x2, add_items = TRUE) #>   [1]  2  1  1  1  2  2  1  2  1  1  2  1  1  1  2  2  2  2  2  2  2  2  1  2  1 #>  [26]  2  2  2  2  1  1  2  2  2  1  2  2  1  1  2  2  1  1  2  2  1  2  1  2  2 #>  [51]  6  5  5  4  5  4  5  3  5  4  4  4  5  5  4  5  4  4  5  4  4  5  5  5  5 #>  [76]  5  5  5  5  4  4  4  4  5  4  5  5  5  4  4  4  5  4  4  4  4  4  5  4  4 #> [101]  9  8 10  9  9 10  7 10  9 10  9  9  9  8  8  9  9 10 10  9  9  8 10  9  9 #> [126] 10  9  9  9 10 10 10  9  9  9 10  9  9  9  9  9  9  8  9  9  9  9  9  9  8 #> attr(,\"items\") #>  [1] \"setosa_4\"     \"setosa_5\"     \"versicolor_4\" \"versicolor_5\" \"versicolor_6\" #>  [6] \"versicolor_7\" \"virginica_4\"  \"virginica_5\"  \"virginica_6\"  \"virginica_7\"   # You can use multi.join to handle the join of the items: to_integer(x1, x2, add_items = TRUE, multi.join = \"; \") #>   [1]  2  1  1  1  2  2  1  2  1  1  2  1  1  1  2  2  2  2  2  2  2  2  1  2  1 #>  [26]  2  2  2  2  1  1  2  2  2  1  2  2  1  1  2  2  1  1  2  2  1  2  1  2  2 #>  [51]  6  5  5  4  5  4  5  3  5  4  4  4  5  5  4  5  4  4  5  4  4  5  5  5  5 #>  [76]  5  5  5  5  4  4  4  4  5  4  5  5  5  4  4  4  5  4  4  4  4  4  5  4  4 #> [101]  9  8 10  9  9 10  7 10  9 10  9  9  9  8  8  9  9 10 10  9  9  8 10  9  9 #> [126] 10  9  9  9 10 10 10  9  9  9 10  9  9  9  9  9  9  8  9  9  9  9  9  9  8 #> attr(,\"items\") #>  [1] \"setosa; 4\"     \"setosa; 5\"     \"versicolor; 4\" \"versicolor; 5\" #>  [5] \"versicolor; 6\" \"versicolor; 7\" \"virginica; 4\"  \"virginica; 5\"  #>  [9] \"virginica; 6\"  \"virginica; 7\""},{"path":"https://lrberge.github.io/fixest/reference/trade.html","id":null,"dir":"Reference","previous_headings":"","what":"Trade data sample — trade","title":"Trade data sample — trade","text":"data reports trade information countries European Union (EU15).","code":""},{"path":"https://lrberge.github.io/fixest/reference/trade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trade data sample — trade","text":"","code":"data(trade)"},{"path":"https://lrberge.github.io/fixest/reference/trade.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Trade data sample — trade","text":"trade data frame 38,325 observations 6 variables named Destination, Origin, Product, Year, dist_km Euros. Origin: 2-digits codes countries origin trade flow. Destination: 2-digits codes countries destination trade flow. Products: Number representing product categories (1 20). Year: Years 2007 2016 dist_km: Geographic distance km centers countries origin destination. Euros: total amount euros trade flow specific year/product category/origin-destination country pair.","code":""},{"path":"https://lrberge.github.io/fixest/reference/trade.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Trade data sample — trade","text":"data extrated Eurostat October 2017.","code":""},{"path":"https://lrberge.github.io/fixest/reference/unpanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissolves a fixest panel — unpanel","title":"Dissolves a fixest panel — unpanel","text":"Transforms fixest_panel object regular data.frame.","code":""},{"path":"https://lrberge.github.io/fixest/reference/unpanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissolves a fixest panel — unpanel","text":"","code":"unpanel(x)"},{"path":"https://lrberge.github.io/fixest/reference/unpanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissolves a fixest panel — unpanel","text":"x fixest_panel object (obtained function panel).","code":""},{"path":"https://lrberge.github.io/fixest/reference/unpanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissolves a fixest panel — unpanel","text":"Returns data set exact dimension. attribute 'panel_info' erased.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/unpanel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dissolves a fixest panel — unpanel","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/unpanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissolves a fixest panel — unpanel","text":"","code":"data(base_did)  # Setting a data set as a panel pdat = panel(base_did, ~id+period)  # ... allows you to use leads and lags in estimations feols(y~l(x1, 0:1), pdat) #> NOTE: 108 observations removed because of NA values (RHS: 108). #> OLS estimation, Dep. Var.: y #> Observations: 972  #> Standard-errors: Clustered (id)  #>             Estimate Std. Error   t value  Pr(>|t|)     #> (Intercept) 2.234786   0.203176 10.999281 < 2.2e-16 *** #> x1          0.994800   0.048671 20.439162 < 2.2e-16 *** #> l(x1, 1)    0.040962   0.055826  0.733756    0.4647     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.90919   Adj. R2: 0.264064  # Now unpanel => returns the initial data set class(pdat) ; dim(pdat) #> [1] \"fixest_panel\" \"data.frame\"   #> [1] 1080    6 new_base = unpanel(pdat) class(new_base) ; dim(new_base) #> [1] \"data.frame\" #> [1] 1080    6"},{"path":"https://lrberge.github.io/fixest/reference/update.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates a fixest estimation — update.fixest","title":"Updates a fixest estimation — update.fixest","text":"Updates re-estimates fixest model (estimated femlm, feols feglm). function updates formulas use previous starting values estimate new fixest model. data obtained original call.","code":""},{"path":"https://lrberge.github.io/fixest/reference/update.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates a fixest estimation — update.fixest","text":"","code":"# S3 method for fixest update(object, fml.update, nframes = 1, evaluate = TRUE, ...)"},{"path":"https://lrberge.github.io/fixest/reference/update.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates a fixest estimation — update.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. fml.update Changes made original argument fml. See information update.formula. can add/withdraw variables fixed-effects. E.g. . ~ . + x2 | . + z2 add variable x2 cluster z2 former estimation. nframes (Advanced users.) Defaults 1. Number frames stack perform evaluation updated call. default, parent frame. evaluate Logical, default TRUE. FALSE, updated call returned. ... arguments passed functions femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/update.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates a fixest estimation — update.fixest","text":"returns fixest object (see details femlm, feols feglm).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/update.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Updates a fixest estimation — update.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/update.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates a fixest estimation — update.fixest","text":"","code":"# Example using trade data data(trade)  # main estimation est_pois = fepois(Euros ~ log(dist_km) | Origin + Destination, trade)  # we add the variable log(Year) est_2 = update(est_pois, . ~ . + log(Year))  # we add another fixed-effect: \"Product\" est_3 = update(est_2, . ~ . | . + Product)  # we remove the fixed-effect \"Origin\" and the variable log(dist_km) est_4 = update(est_3, . ~ . - log(dist_km) | . - Origin)  # Quick look at the 4 estimations etable(est_pois, est_2, est_3, est_4) #>                           est_pois              est_2              est_3 #> Dependent Var.:              Euros              Euros              Euros #>                                                                          #> log(dist_km)    -1.517*** (0.1131) -1.518*** (0.1132) -1.528*** (0.1157) #> log(Year)                            72.37*** (6.900)   72.62*** (6.983) #> Fixed-Effects:  ------------------ ------------------ ------------------ #> Origin                         Yes                Yes                Yes #> Destination                    Yes                Yes                Yes #> Product                         No                 No                Yes #> _______________ __________________ __________________ __________________ #> S.E.: Clustered         by: Origin         by: Origin         by: Origin #> Observations                38,325             38,325             38,325 #> Squared Cor.               0.37832            0.38444            0.61155 #> Pseudo R2                  0.58950            0.59290            0.76381 #> BIC                       2.44e+12           2.42e+12           1.41e+12 #>  #>                            est_4 #> Dependent Var.:            Euros #>                                  #> log(dist_km)                     #> log(Year)       70.82*** (5.989) #> Fixed-Effects:  ---------------- #> Origin                        No #> Destination                  Yes #> Product                      Yes #> _______________ ________________ #> S.E.: Clustered  by: Destination #> Observations              38,325 #> Squared Cor.             0.17893 #> Pseudo R2                0.35377 #> BIC                     3.85e+12 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the variance/covariance of a fixest object — vcov.fixest","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"function extracts variance-covariance estimated parameters model estimated femlm, feols feglm.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"","code":"# S3 method for fixest vcov(   object,   vcov = NULL,   se = NULL,   cluster,   ssc = NULL,   attr = FALSE,   forceCovariance = FALSE,   keepBounded = FALSE,   nthreads = getFixest_nthreads(),   ... )"},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"object fixest object. Obtained using functions femlm, feols feglm. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ssc object class ssc.type obtained function ssc. Represents degree freedom correction done.must use function ssc argument. arguments defaults function ssc : adj = TRUE, fixef.K=\"nested\", cluster.adj = TRUE, cluster.df = \"min\", t.df = \"min\", fixef.force_exact=FALSE). See help function ssc details. attr Logical, defaults FALSE. Whether include attributes describing VCOV computed. forceCovariance (Advanced users.) Logical, default FALSE. peculiar case obtained Hessian invertible (usually collinearity variables), use option force covariance matrix, using generalized inverse Hessian. can useful spot possible problems come . keepBounded (Advanced users -- feNmlm non-linear part bounded coefficients .) Logical, default FALSE. TRUE, bounded coefficients () treated unrestricted coefficients S.E. computed (otherwise ). nthreads number threads. Can : ) integer lower , equal , maximum number threads; b) 0: meaning available threads used; c) number strictly 0 1 represents fraction threads use. default use 50% threads. can set permanently number threads used within package using function setFixest_nthreads. ... arguments passed summary.fixest. computation VCOV matrix first done summary.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"returns \\(K\\times K\\) square matrix \\(K\\) number variables fitted model. attr = TRUE, matrix attribute “type” specifying variance/covariance matrix computed.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"explanation standard-errors computed exact meaning arguments, please look dedicated vignette: standard-errors.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the variance/covariance of a fixest object — vcov.fixest","text":"","code":"# Load panel data data(base_did)  # Simple estimation on a panel est = feols(y ~ x1, base_did)  # ======== # # IID VCOV # # ======== #  # By default the VCOV assumes iid errors: se(vcov(est)) #> (Intercept)          x1  #>   0.1491554   0.0501191   # You can make the call for an iid VCOV explicitly: se(vcov(est, \"iid\")) #> (Intercept)          x1  #>   0.1491554   0.0501191   # # Heteroskedasticity-robust VCOV #  # By default the VCOV assumes iid errors: se(vcov(est, \"hetero\")) #> (Intercept)          x1  #>  0.14902573  0.05101605   # => note that it also accepts vcov = \"White\" and vcov = \"HC1\" as aliases.  # =============== # # Clustered VCOVs # # =============== #  # To cluster the VCOV, you can use a formula of the form cluster ~ var1 + var2 etc # Let's cluster by the panel ID: se(vcov(est, cluster ~ id)) #> (Intercept)          x1  #>   0.1943525   0.0467892   # Alternative ways:  # -> cluster is implicitly assumed when a one-sided formula is provided se(vcov(est, ~ id)) #> (Intercept)          x1  #>   0.1943525   0.0467892   # -> using the argument cluster instead of vcov se(vcov(est, cluster = ~ id)) #> (Intercept)          x1  #>   0.1943525   0.0467892   # For two-/three- way clustering, just add more variables: se(vcov(est, ~ id + period)) #> (Intercept)          x1  #>  0.61496508  0.04721779   # -------------------| # Implicit deduction | # -------------------| # When the estimation contains FEs, the dimension on which to cluster # is directly inferred from the FEs used in the estimation, so you don't need # to explicitly add them.  est_fe = feols(y ~ x1 | id + period, base_did)  # Clustered along \"id\" se(vcov(est_fe, \"cluster\")) #>         x1  #> 0.04578726   # Clustered along \"id\" and \"period\" se(vcov(est_fe, \"twoway\")) #>         x1  #> 0.03417711    # =========== # # Panel VCOVs # # =========== #  # ---------------------| # Newey West (NW) VCOV | # ---------------------| # To obtain NW VCOVs, use a formula of the form NW ~ id + period se(vcov(est, NW ~ id + period)) #> (Intercept)          x1  #>  0.17411100  0.05269927   # If you want to change the lag: se(vcov(est, NW(3) ~ id + period)) #> (Intercept)          x1  #>  0.19450009  0.05104156   # Alternative way:  # -> using the vcov_NW function se(vcov(est, vcov_NW(unit = \"id\", time = \"period\", lag = 3))) #> (Intercept)          x1  #>  0.19450009  0.05104156   # -------------------------| # Driscoll-Kraay (DK) VCOV | # -------------------------| # To obtain DK VCOVs, use a formula of the form DK ~ period  se(vcov(est, DK ~ period)) #> (Intercept)          x1  #>  0.78953790  0.03611533   # If you want to change the lag: se(vcov(est, DK(3) ~ period)) #> (Intercept)          x1  #>  0.97148590  0.02841491   # Alternative way:  # -> using the vcov_DK function se(vcov(est, vcov_DK(time = \"period\", lag = 3))) #> (Intercept)          x1  #>  0.97148590  0.02841491   # -------------------| # Implicit deduction | # -------------------| # When the estimation contains a panel identifier, you don't need # to re-write them later on  est_panel = feols(y ~ x1, base_did, panel.id = ~id + period)  # Both methods, NM and DK, now work automatically se(vcov(est_panel, \"NW\")) #> (Intercept)          x1  #>  0.17411100  0.05269927  se(vcov(est_panel, \"DK\")) #> (Intercept)          x1  #>  0.78953790  0.03611533    # =================================== # # VCOVs robust to spatial correlation # # =================================== #  data(quakes) est_geo = feols(depth ~ mag, quakes)  # ------------| # Conley VCOV | # ------------| # To obtain a Conley VCOV, use a formula of the form conley(cutoff) ~ lat + lon # with lat/lon the latitude/longitude variable names in the data set se(vcov(est_geo, conley(100) ~ lat + long)) #> (Intercept)         mag  #>   108.90052    19.23233   # Alternative way:  # -> using the vcov_DK function se(vcov(est_geo, vcov_conley(lat = \"lat\", lon = \"long\", cutoff = 100))) #> (Intercept)         mag  #>   108.90052    19.23233   # -------------------| # Implicit deduction | # -------------------| # By default the latitude and longitude are directly fetched in the data based # on pattern matching. So you don't have to specify them. # Furhter, an automatic cutoff is deduced by default.  # The following works: se(vcov(est_geo, \"conley\")) #> (Intercept)         mag  #>   110.67271    20.17456    # ======================== # # Small Sample Corrections # # ======================== #  # You can change the way the small sample corrections are done with the argument ssc. # The argument ssc must be created by the ssc function se(vcov(est, ssc = ssc(adj = FALSE))) #> (Intercept)          x1  #>  0.14908629  0.05009587   # You can add directly the call to ssc in the vcov formula. # You need to add it like a variable: se(vcov(est, iid ~ ssc(adj = FALSE))) #> (Intercept)          x1  #>  0.14908629  0.05009587  se(vcov(est, DK ~ period + ssc(adj = FALSE))) #> (Intercept)          x1  #>  0.78917195  0.03609859"},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustered VCOV — vcov_cluster","title":"Clustered VCOV — vcov_cluster","text":"Computes clustered VCOV fixest objects.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustered VCOV — vcov_cluster","text":"","code":"vcov_cluster(x, cluster = NULL, ssc = NULL)"},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustered VCOV — vcov_cluster","text":"x fixest object. cluster Either ) character vector giving names variables onto cluster, ii) formula giving names, iii) vector/list/data.frame giving hard values clusters. Note cases ) ii) variables fetched directly data set used estimation. ssc object returned function ssc. specifies perform small sample correction.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustered VCOV — vcov_cluster","text":"first argument fixest object, VCOV returned (.e. symmetric matrix). first argument fixest object, ) implicitly arguments shifted left (.e. vcov_cluster(~var1 + var2) equivalent vcov_cluster(cluster = ~var1 + var2)) b) VCOV-request returned VCOV. VCOV-request can used argument vcov various fixest functions (e.g. vcov.fixest even estimation calls).","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clustered VCOV — vcov_cluster","text":"Cameron AC, Gelbach JB, Miller DL (2011). \"Robust Inference Multiway Clustering.\" Journal Business & Economic Statistics, 29(2), 238-249. doi:10.1198/jbes.2010.07136.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clustered VCOV — vcov_cluster","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clustered VCOV — vcov_cluster","text":"","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\") base$clu = rep(1:5, 30)  est = feols(y ~ x1, base)  # VCOV: using a formula giving the name of the clusters vcov_cluster(est, ~species + clu) #>             (Intercept)         x1 #> (Intercept)   0.6046144 -0.2634955 #> x1           -0.2634955  0.1235058  # works as well with a character vector vcov_cluster(est, c(\"species\", \"clu\")) #>             (Intercept)         x1 #> (Intercept)   0.6046144 -0.2634955 #> x1           -0.2634955  0.1235058  # you can also combine the two with '^' vcov_cluster(est, ~species^clu) #>             (Intercept)          x1 #> (Intercept)  0.27358801 -0.09893941 #> x1          -0.09893941  0.03852919  # # Using VCOV requests #  # per se: pretty useless... vcov_cluster(~species) #> ~species #> <environment: 0x000001b1573fe218>  # ...but VCOV-requests can be used at estimation time: # it may be more explicit than... feols(y ~ x1, base, vcov = vcov_cluster(\"species\")) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: Clustered (species)  #>              Estimate Std. Error   t value Pr(>|t|)     #> (Intercept)  6.526223   0.939312  6.947878 0.020093 *   #> x1          -0.223361   0.406738 -0.549152 0.638023     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.819578   Adj. R2: 0.007159  # ...the equivalent, built-in way: feols(y ~ x1, base, vcov = ~species) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: Clustered (species)  #>              Estimate Std. Error   t value Pr(>|t|)     #> (Intercept)  6.526223   0.939312  6.947878 0.020093 *   #> x1          -0.223361   0.406738 -0.549152 0.638023     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.819578   Adj. R2: 0.007159  # The argument vcov does not accept hard values, # so you can feed them with a VCOV-request: feols(y ~ x1, base, vcov = vcov_cluster(rep(1:5, 30))) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: Clustered (rep(1:5, 30))  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  6.526223   0.296270 22.02795 2.5137e-05 *** #> x1          -0.223361   0.100044 -2.23263 8.9350e-02 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.819578   Adj. R2: 0.007159"},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":null,"dir":"Reference","previous_headings":"","what":"Conley VCOV — vcov_conley","title":"Conley VCOV — vcov_conley","text":"Compute VCOVs robust spatial correlation, la Conley (1999).","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conley VCOV — vcov_conley","text":"","code":"vcov_conley(   x,   lat = NULL,   lon = NULL,   cutoff = NULL,   pixel = 0,   distance = \"triangular\",   ssc = NULL )  conley(cutoff = NULL, pixel = NULL, distance = NULL)"},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conley VCOV — vcov_conley","text":"x fixest object. lat character scalar one sided formula giving name variable representing latitude. latitude must lie [-90, 90], [0, 180] [-180, 0]. lon character scalar one sided formula giving name variable representing longitude. longitude must [-180, 180], [0, 360] [-360, 0]. cutoff distance cutoff, km. can express cutoff miles writing number character form adding \"mi\" suffix: cutoff = \"100mi\" 100 miles. missing, rule thumb used deduce cutoff. pixel positive numeric scalar, default 0. positive number, coordinates observation pooled pixel x pixel km squares. lowers precision can (depending cases) greatly improve computational speed low precision cost. Note cutoff expressed miles, pixel also miles. distance compute distance points. can equal \"triangular\" (default) \"spherical\". latter case corresponds great circle distance precise triangular bit intensive computationally. ssc object returned function ssc. specifies perform small sample correction.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conley VCOV — vcov_conley","text":"first argument fixest object, VCOV returned (.e. symmetric matrix). first argument fixest object, ) implicitly arguments shifted left (.e. vcov_conley(\"lat\", \"long\") equivalent vcov_conley(lat = \"lat\", lon = \"long\")) b) VCOV-request returned VCOV. VCOV-request can used argument vcov various fixest functions (e.g. vcov.fixest even estimation calls).","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conley VCOV — vcov_conley","text":"function computes VCOVs robust spatial correlations assuming correlation units geographic distance lower given cutoff. kernel uniform. cutoff provided, estimation given. cutoff ensures minimum units lie within robust sub-sampling. automatic cutoff convenience, appropriate cutoff shall depend application shall provided user. function conley compute VCOVs directly meant used argument vcov fixest functions (e.g. vcov.fixest even estimation calls).","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conley VCOV — vcov_conley","text":"Conley TG (1999). \"GMM Estimation Cross Sectional Dependence\", Journal Econometrics, 92, 1-45.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_conley.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conley VCOV — vcov_conley","text":"","code":"data(quakes)  # We use conley() in the vcov argument of the estimation feols(depth ~ mag, quakes, conley(100)) #> OLS estimation, Dep. Var.: depth #> Observations: 1,000  #> Standard-errors: Conley (100km)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  881.625   108.9005  8.09569 1.6480e-15 *** #> mag         -123.421    19.2323 -6.41737 2.1389e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 209.6   Adj. R2: 0.052245  # Post estimation est = feols(depth ~ mag, quakes) vcov_conley(est, cutoff = 100) #>             (Intercept)        mag #> (Intercept)   11859.324 -1955.8155 #> mag           -1955.816   369.8824"},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":null,"dir":"Reference","previous_headings":"","what":"HAC VCOVs — vcov_hac","title":"HAC VCOVs — vcov_hac","text":"Set functions compute VCOVs robust different forms correlation panel time series settings.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HAC VCOVs — vcov_hac","text":"","code":"vcov_DK(x, time = NULL, lag = NULL, ssc = NULL)  vcov_NW(x, unit = NULL, time = NULL, lag = NULL, ssc = NULL)  NW(lag = NULL)  newey_west(lag = NULL)  DK(lag = NULL)  driscoll_kraay(lag = NULL)"},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HAC VCOVs — vcov_hac","text":"x fixest object. time character scalar one sided formula giving name variable representing time. lag integer scalar, default NULL. NULL, default lag equal n_t^0.25 n_t number time periods (Newey West 1987) panel Newey-West Driscoll-Kraay. default time series Newey-West computed via bwNeweyWest implements Newey West 1994 method. ssc object returned function ssc. specifies perform small sample correction. unit character scalar one sided formula giving name variable representing units panel.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HAC VCOVs — vcov_hac","text":"first argument fixest object, VCOV returned (.e. symmetric matrix). first argument fixest object, ) implicitly arguments shifted left (.e. vcov_DK(~year) equivalent vcov_DK(time = ~year)) b) VCOV-request returned VCOV. VCOV-request can used argument vcov various fixest functions (e.g. vcov.fixest even estimation calls).","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HAC VCOVs — vcov_hac","text":"currently three VCOV types: Newey-West applied time series, Newey-West applied panel setting (argument 'unit' missing), Driscoll-Kraay. functions page without prefix \"vcov_\" compute VCOVs directly meant used argument vcov fixest functions (e.g. vcov.fixest even estimation calls). Note Driscoll-Kraay VCOVs, ensure properties number periods long enough (minimum 20 periods ).","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"lag-selection","dir":"Reference","previous_headings":"","what":"Lag selection","title":"HAC VCOVs — vcov_hac","text":"default lag selection depends whether VCOV applies panel time series. panels, .e. panel Newey-West Driscoll-Kraay VCOV, default lag n_t^0.25 n_t number time periods. based Newey West 1987. time series Newey-West, default lag found thanks bwNeweyWest function sandwich package. based Newey West 1994.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HAC VCOVs — vcov_hac","text":"Newey WK, West KD (1987). \"Simple, Positive Semi-Definite, Heteroskedasticity Autocorrelation Consistent Covariance Matrix.\" Econometrica, 55(3), 703-708. doi:10.2307/1913610. Driscoll JC, Kraay AC (1998). \"Consistent Covariance Matrix Estimation Spatially Dependent Panel Data.\" Review Economics Statistics, 80(4), 549-560. doi:10.1162/003465398557825. Millo G (2017). \"Robust Standard Error Estimators Panel Models: Unifying Approach\" Journal Statistical Software, 82(3). doi:10.18637/jss.v082.i03.","code":""},{"path":"https://lrberge.github.io/fixest/reference/vcov_hac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HAC VCOVs — vcov_hac","text":"","code":"data(base_did)  # # During the estimation #  # Panel Newey-West, lag = 2 feols(y ~ x1, base_did, NW(2) ~ id + period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=2)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.186061 10.6887 2.0500e-06 *** #> x1          0.983110   0.051618 19.0457 1.3968e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # Driscoll-Kraay feols(y ~ x1, base_did, DK ~ period) #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Driscoll-Kraay (L=1)  #>             Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 1.988753   0.789538  2.51888 3.2829e-02 *   #> x1          0.983110   0.036115 27.22141 5.9051e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # If the estimation is made with a panel.id, the dimensions are # automatically deduced: est = feols(y ~ x1, base_did, \"NW\", panel.id = ~id + period) est #> OLS estimation, Dep. Var.: y #> Observations: 1,080  #> Standard-errors: Newey-West (L=1)  #>             Estimate Std. Error t value   Pr(>|t|)     #> (Intercept) 1.988753   0.174111 11.4223 1.1709e-06 *** #> x1          0.983110   0.052699 18.6551 1.6762e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 4.89686   Adj. R2: 0.262357  # # Post estimation #  # If missing, the unit and time are automatically deduced from # the panel.id used in the estimation vcov_NW(est, lag = 2) #>             (Intercept)          x1 #> (Intercept) 0.034618659 0.000265638 #> x1          0.000265638 0.002664456"},{"path":"https://lrberge.github.io/fixest/reference/wald.html","id":null,"dir":"Reference","previous_headings":"","what":"Wald test of nullity of coefficients — wald","title":"Wald test of nullity of coefficients — wald","text":"Wald test used test joint nullity set coefficients.","code":""},{"path":"https://lrberge.github.io/fixest/reference/wald.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wald test of nullity of coefficients — wald","text":"","code":"wald(x, keep = NULL, drop = NULL, print = TRUE, vcov, se, cluster, ...)"},{"path":"https://lrberge.github.io/fixest/reference/wald.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wald test of nullity of coefficients — wald","text":"x fixest object. Obtained using methods femlm, feols feglm. keep Character vector. element used display subset variables. vector regular expressions (see base::regex help info). variable satisfying regular expressions kept. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use keep = \"x[[:digit:]]$\". first character exclamation mark, effect reversed (e.g. keep = \"!Intercept\" means: every variable contain “Intercept” kept). See details. drop Character vector. element used variables displayed. vector regular expressions (see base::regex help info). variable satisfying regular expressions discarded. argument applied post aliasing (see argument dict). Example: variable x1 x55 want display x1 x9, use drop = \"x[[:digit:]]{2}\". first character exclamation mark, effect reversed (e.g. drop = \"!Intercept\" means: every variable contain “Intercept” dropped). See details. print Logical, default TRUE. TRUE, verbose description test prompted R console. Otherwise named vector containing test statistics returned. vcov Versatile argument specify VCOV. general, either character scalar equal VCOV type, either formula form: vcov_type ~ variables. VCOV types implemented : \"iid\", \"hetero\" (\"HC1\"), \"cluster\", \"twoway\", \"NW\" (\"newey_west\"), \"DK\" (\"driscoll_kraay\"), \"conley\". also accepts object vcov_cluster, vcov_NW, NW, vcov_DK, DK, vcov_conley conley. also accepts covariance matrices computed externally. Finally accepts functions compute covariances. See vcov documentation vignette. se Character scalar. kind standard error computed: “standard”, “hetero”, “cluster”, “twoway”, “threeway” “fourway”? default clusters estimation: se = \"cluster\", otherwise se = \"iid\". Note argument deprecated, use vcov instead. cluster Tells cluster standard-errors (clustering requested). Can either list vectors, character vector variable names, formula integer vector. Assume want perform 2-way clustering var1 var2 contained data.frame base used estimation. following cluster arguments valid thing: cluster = base[, c(\"var1\", \"var2\")], cluster = c(\"var1\", \"var2\"), cluster = ~var1+var2. two variables used fixed-effects estimation, can leave blank vcov = \"twoway\" (assuming var1 [resp. var2] 1st [resp. 2nd] fixed-effect). can interact two variables using ^ following syntax: cluster = ~var1^var2 cluster = \"var1^var2\". ... element passed summary.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/reference/wald.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wald test of nullity of coefficients — wald","text":"named vector containing following elements returned: stat, p, df1, df2. correspond test statistic, p-value, first second degrees freedoms. valid coefficient found, value NA returned.","code":""},{"path":"https://lrberge.github.io/fixest/reference/wald.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wald test of nullity of coefficients — wald","text":"type VCOV matrix plays crucial role test. Use arguments se cluster change type VCOV test.","code":""},{"path":"https://lrberge.github.io/fixest/reference/wald.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wald test of nullity of coefficients — wald","text":"","code":"data(airquality)  est = feols(Ozone ~ Solar.R + Wind + poly(Temp, 3), airquality) #> NOTE: 42 observations removed because of NA values (LHS: 37, RHS: 7).  # Testing the joint nullity of the Temp polynomial wald(est, \"poly\") #> Wald test, H0: joint nullity of poly(Temp, 3)1, poly(Temp, 3)2 and poly(Temp, 3)3 #>  stat = 23.1, p-value = 1.452e-11, on 3 and 105 DoF, VCOV: IID.  # Same but with clustered SEs wald(est, \"poly\", cluster = \"Month\") #> Wald test, H0: joint nullity of poly(Temp, 3)1, poly(Temp, 3)2 and poly(Temp, 3)3 #>  stat = 170.3, p-value < 2.2e-16, on 3 and 105 DoF, VCOV: Clustered (Month).  # Now: all vars but the polynomial and the intercept wald(est, drop = \"Inte|poly\") #> Wald test, H0: joint nullity of Solar.R and Wind #>  stat = 19.1, p-value = 8.538e-8, on 2 and 105 DoF, VCOV: IID.  # # Toy example: testing pre-trends #  data(base_did)  est_did = feols(y ~ x1 + i(period, treat, 5) | id + period, base_did)  # The graph of the coefficients coefplot(est_did)   # The pre-trend test wald(est_did, \"period::[1234]$\") #> [1] NA  # If \"period::[1234]$\" looks weird to you, check out # regular expressions: e.g. see ?regex. # Learn it, you won't regret it!"},{"path":"https://lrberge.github.io/fixest/reference/weights.fixest.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the weights from a fixest object — weights.fixest","title":"Extracts the weights from a fixest object — weights.fixest","text":"Simply extracts weights used estimate fixest model.","code":""},{"path":"https://lrberge.github.io/fixest/reference/weights.fixest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the weights from a fixest object — weights.fixest","text":"","code":"# S3 method for fixest weights(object, ...)"},{"path":"https://lrberge.github.io/fixest/reference/weights.fixest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the weights from a fixest object — weights.fixest","text":"object fixest object. ... currently used.","code":""},{"path":"https://lrberge.github.io/fixest/reference/weights.fixest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the weights from a fixest object — weights.fixest","text":"Returns vector length number observations original data set. Ignored observations due NA perfect fit re-introduced weights set NA.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/weights.fixest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the weights from a fixest object — weights.fixest","text":"","code":"est = feols(Petal.Length ~ Petal.Width, iris, weights = ~as.integer(Sepal.Length) - 3.99) weights(est) #>   [1] 1.01 0.01 0.01 0.01 1.01 1.01 0.01 1.01 0.01 0.01 1.01 0.01 0.01 0.01 1.01 #>  [16] 1.01 1.01 1.01 1.01 1.01 1.01 1.01 0.01 1.01 0.01 1.01 1.01 1.01 1.01 0.01 #>  [31] 0.01 1.01 1.01 1.01 0.01 1.01 1.01 0.01 0.01 1.01 1.01 0.01 0.01 1.01 1.01 #>  [46] 0.01 1.01 0.01 1.01 1.01 3.01 2.01 2.01 1.01 2.01 1.01 2.01 0.01 2.01 1.01 #>  [61] 1.01 1.01 2.01 2.01 1.01 2.01 1.01 1.01 2.01 1.01 1.01 2.01 2.01 2.01 2.01 #>  [76] 2.01 2.01 2.01 2.01 1.01 1.01 1.01 1.01 2.01 1.01 2.01 2.01 2.01 1.01 1.01 #>  [91] 1.01 2.01 1.01 1.01 1.01 1.01 1.01 2.01 1.01 1.01 2.01 1.01 3.01 2.01 2.01 #> [106] 3.01 0.01 3.01 2.01 3.01 2.01 2.01 2.01 1.01 1.01 2.01 2.01 3.01 3.01 2.01 #> [121] 2.01 1.01 3.01 2.01 2.01 3.01 2.01 2.01 2.01 3.01 3.01 3.01 2.01 2.01 2.01 #> [136] 3.01 2.01 2.01 2.01 2.01 2.01 2.01 1.01 2.01 2.01 2.01 2.01 2.01 2.01 1.01"},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Expands formula macros — xpd","title":"Expands formula macros — xpd","text":"Create macros within formulas expand character vectors formulas.","code":""},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expands formula macros — xpd","text":"","code":"xpd(fml, ..., add = NULL, lhs, rhs, data = NULL, frame = parent.frame())"},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expands formula macros — xpd","text":"fml formula containing macros variables. macro variable must start two dots. macro variables can set globally using setFixest_fml, can defined .... Special macros form ..(\"regex\") can used fetch, regular expression, variables directly character vector (column names) given argument data (note algorithm tries \"guess\" argument data nested function calls [see example]). can negate regex starting \"!\". Square brackets special meaning: Values evaluated parsed accordingly. Example: y~x.[1:2] + z.[] lead y~x1+x2+z3 ==3. can trigger auto-completion variables using '..' suffix, like y ~ x.. include x1 x2, etc. See examples. ... Definition macro variables. argument name corresponds name macro variable. required macro variable name starts two dots (e.g. ..ctrl). value argument must one-sided formula character vector, definition macro variable. Example valid call: setFixest_fml(..ctrl = ~ var1 + var2). function xpd, default macro variables taken getFixest_fml, variable ... replace values. can enclose values .[], evaluated current environment. example ..ctrl = ~ x.[1:2] + .[z] lead ~x1 + x2 + var z equal \"var\". add Either character scalar one-sided formula. elements added right-hand-side formula, macro expansion applied. lhs present formula constructed lhs full left-hand-side. value lhs can one-sided formula, call, character vector. Note macro variables wont applied. can use combination argument rhs. Note fml missing, LHS replaced lhs. rhs present, formula constructed rhs full right-hand-side. value rhs can one-sided formula, call, character vector. Note macro variables wont applied. can use combination argument lhs. Note fml missing, RHS replaced rhs. data Either character vector data.frame. argument used macro type ..(\"regex\") used formula argument fml. , variable name data matches regular expression added formula. frame environment containing values expanded dot square bracket operator. Default parent.frame().","code":""},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expands formula macros — xpd","text":"returns formula macros expanded.","code":""},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expands formula macros — xpd","text":"xpd, default macro variables taken getFixest_fml. value ... argument xpd replace default values. definitions macro variables replace verbatim macro variables. Therefore, can include multi-part formulas wish beware order macros variable formula. example, using airquality data, say want set controls variable Temp Day fixed-effects, can setFixest_fml(..ctrl = ~Temp | Day), feols(Ozone ~ Wind + ..ctrl, airquality) quite different feols(Ozone ~ ..ctrl + Wind, airquality), beware!","code":""},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"dot-square-bracket-operator-in-formulas","dir":"Reference","previous_headings":"","what":"Dot square bracket operator in formulas","title":"Expands formula macros — xpd","text":"formula, dot square bracket (DSB) operator can: ) create manifold variables , ii) capture values current environment put verbatim formula. Say want include variables x1 x3 formula. can use xpd(y ~ x.[1:3]) get y ~ x1 + x2 + x3. summon values environment, simply put variable square brackets. example: (1:3) xpd(y.[] ~ x) create formulas y1 ~ x y3 ~ x depending value . can include full variable environment way: (y c(\"\", \"b\")) xpd(.[y] ~ x) create two formulas ~ x b ~ x. DSB can even used within variable names, variable must nested character form. example y ~ .[\"x.[1:2]_sq\"] create y ~ x1_sq + x2_sq. Using character form important avoid formula parsing error. Double quotes must used. Note character string nested parsed function dsb, thus return vector. default, DSB operator expands vectors sums. can add comma, like .[, x], expand commas--content can used within functions. instance: c(x.[, 1:2]) create c(x1, x2) (c(x1 + x2)). fixest estimations, special parsing enabled, need use xpd. One-sided formulas can expanded DSB operator: let x = ~sepal + petal, xpd(y ~ .[x]) leads color ~ sepal + petal. can even use multiple square brackets within single variable, use nesting required. example, following xpd(y ~ .[\".[letters[1:2]]_.[1:2]\"]) create y ~ a_1 + b_2. Remember nested character string parsed dsb, explains behavior. element expanded ) equal empty string , ii) length 0, replaced neutral element, namely 1. example, x = \"\" ; xpd(y ~ .[x]) leads y ~ 1.","code":""},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"regular-expressions","dir":"Reference","previous_headings":"","what":"Regular expressions","title":"Expands formula macros — xpd","text":"can catch several variable names using regular expressions. use regular expressions, need enclose dot-dot regex function: ..(\"regex\") regex(\"regex\"). example, regex(\"Sepal\") catch variables Sepal.Length Sepal.Width iris data set. fixest estimation, variables names regex applied come data set. use xpd, need provide either data set vector names argument data. default variables aggregated sum. example data set variables x1 x10, regex(\"x(1|2)\" yield x1 + x2 + x10. can instead ask \"comma\" aggregation using comma first, just regular expression: y ~ sw(regex(,\"x(1|2)\")) lead y ~ sw(x1, x2, x10). Note dot square bracket operator (DSB, see ) applied regular expression evaluated. means regex(\"x.[3:4]_sq\") lead, evaluation DSB, regex(\"x3_sq|x4_sq\"). handy way insert range numbers regular expression.","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expands formula macros — xpd","text":"Laurent Berge","code":""},{"path":"https://lrberge.github.io/fixest/reference/xpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expands formula macros — xpd","text":"","code":"# Small examples with airquality data data(airquality) # we set two macro variables setFixest_fml(..ctrl = ~ Temp + Day,               ..ctrl_long = ~ poly(Temp, 2) + poly(Day, 2))  # Using the macro in lm with xpd: lm(xpd(Ozone ~ Wind + ..ctrl), airquality) #>  #> Call: #> lm(formula = xpd(Ozone ~ Wind + ..ctrl), data = airquality) #>  #> Coefficients: #> (Intercept)         Wind         Temp          Day   #>    -76.5168      -3.0681       1.8622       0.2506   #>  lm(xpd(Ozone ~ Wind + ..ctrl_long), airquality) #>  #> Call: #> lm(formula = xpd(Ozone ~ Wind + ..ctrl_long), data = airquality) #>  #> Coefficients: #>    (Intercept)            Wind  poly(Temp, 2)1  poly(Temp, 2)2   poly(Day, 2)1   #>         69.603          -2.773         206.921          90.449          26.681   #>  poly(Day, 2)2   #>         20.483   #>   # You can use the macros without xpd() in fixest estimations a = feols(Ozone ~ Wind + ..ctrl, airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). b = feols(Ozone ~ Wind + ..ctrl_long, airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). etable(a, b, keep = \"Int|Win\") #>                                  a                  b #> Dependent Var.:              Ozone              Ozone #>                                                       #> Wind            -3.068*** (0.6629) -2.773*** (0.6451) #> _______________ __________________ __________________ #> S.E. type                      IID                IID #> Observations                   116                116 #> R2                         0.57308            0.62167 #> Adj. R2                    0.56164            0.60447 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # Using .[]  base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) i = 2:3 z = \"species\" lm(xpd(y ~ x.[2:3] + .[z]), base) #>  #> Call: #> lm(formula = xpd(y ~ x.[2:3] + .[z]), data = base) #>  #> Coefficients: #>       (Intercept)                 x2                 x3  speciesversicolor   #>          3.682982           0.905946          -0.005995          -1.598362   #>  speciesvirginica   #>         -2.112647   #>   # No xpd() needed in feols feols(y ~ x.[2:3] + .[z], base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>                    Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)        3.682982   0.107403 34.291343  < 2.2e-16 *** #> x2                 0.905946   0.074311 12.191282  < 2.2e-16 *** #> x3                -0.005995   0.156260 -0.038368 9.6945e-01     #> speciesversicolor -1.598362   0.205706 -7.770113 1.3154e-12 *** #> speciesvirginica  -2.112647   0.304024 -6.948940 1.1550e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.333482   Adj. R2: 0.832221  # # Auto completion with '..' suffix #  # You can trigger variables autocompletion with the '..' suffix # You need to provide the argument data base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) xpd(y ~ x.., data = base) #> y ~ x1 + x2 + x3 #> <environment: 0x000001b153f66608>  # In fixest estimations, this is automatically taken care of feols(y ~ x.., data = base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.310327   Adj. R2: 0.855706   # # You can use xpd for stepwise estimations #  # Note that for stepwise estimations in fixest, you can use # the stepwise functions: sw, sw0, csw, csw0 # -> see help in feols or in the dedicated vignette  # we want to look at the effect of x1 on y # controlling for different variables  base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # We first create a matrix with all possible combinations of variables my_args = lapply(names(base)[-(1:2)], function(x) c(\"\", x)) (all_combs = as.matrix(do.call(\"expand.grid\", my_args))) #>      Var1 Var2 Var3      #> [1,] \"\"   \"\"   \"\"        #> [2,] \"x2\" \"\"   \"\"        #> [3,] \"\"   \"x3\" \"\"        #> [4,] \"x2\" \"x3\" \"\"        #> [5,] \"\"   \"\"   \"species\" #> [6,] \"x2\" \"\"   \"species\" #> [7,] \"\"   \"x3\" \"species\" #> [8,] \"x2\" \"x3\" \"species\"  res_all = list() for(i in 1:nrow(all_combs)){   res_all[[i]] = feols(xpd(y ~ x1 + ..v, ..v = all_combs[i, ]), base) }  etable(res_all) #>                             model 1            model 2            model 3 #> Dependent Var.:                   y                  y                  y #>                                                                           #> Constant          6.526*** (0.4789)  2.249*** (0.2480)  3.457*** (0.3092) #> x1                 -0.2234 (0.1551) 0.5955*** (0.0693) 0.3991*** (0.0911) #> x2                                  0.4719*** (0.0171)                    #> x3                                                     0.9721*** (0.0521) #> speciesversicolor                                                         #> speciesvirginica                                                          #> _________________ _________________ __________________ __________________ #> S.E. type                       IID                IID                IID #> Observations                    150                150                150 #> R2                          0.01382            0.84018            0.70724 #> Adj. R2                     0.00716            0.83800            0.70325 #>  #>                               model 4            model 5             model 6 #> Dependent Var.:                     y                  y                   y #>                                                                              #> Constant            1.856*** (0.2508)  2.251*** (0.3698)   2.390*** (0.2623) #> x1                 0.6508*** (0.0667) 0.8036*** (0.1063)  0.4322*** (0.0814) #> x2                 0.7091*** (0.0567)                     0.7756*** (0.0643) #> x3                -0.5565*** (0.1275)                                        #> speciesversicolor                      1.459*** (0.1121) -0.9558*** (0.2152) #> speciesvirginica                       1.947*** (0.1000)  -1.394*** (0.2857) #> _________________ ___________________ __________________ ___________________ #> S.E. type                         IID                IID                 IID #> Observations                      150                150                 150 #> R2                            0.85861            0.72591             0.86331 #> Adj. R2                       0.85571            0.72027             0.85954 #>  #>                              model 7            model 8 #> Dependent Var.:                    y                  y #>                                                         #> Constant           2.521*** (0.3939)  2.171*** (0.2798) #> x1                0.6982*** (0.1195) 0.4959*** (0.0861) #> x2                                   0.8292*** (0.0685) #> x3                  0.3716. (0.1983)  -0.3152* (0.1512) #> speciesversicolor 0.9881*** (0.2747) -0.7236** (0.2402) #> speciesvirginica    1.238** (0.3913)  -1.023** (0.3337) #> _________________ __________________ __________________ #> S.E. type                        IID                IID #> Observations                     150                150 #> R2                           0.73238            0.86731 #> Adj. R2                      0.72500            0.86271 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 coefplot(res_all, group = list(Species = \"^^species\"))   # # You can use macros to grep variables in your data set #  # Example 1: setting a macro variable globally  data(longley) setFixest_fml(..many_vars = grep(\"GNP|ployed\", names(longley), value = TRUE)) feols(Armed.Forces ~ Population + ..many_vars, longley) #> OLS estimation, Dep. Var.: Armed.Forces #> Observations: 16  #> Standard-errors: IID  #>                 Estimate  Std. Error   t value Pr(>|t|)     #> (Intercept)  4403.682352 4091.847594  1.076209 0.307112     #> Population    -22.844324   32.671302 -0.699217 0.500356     #> GNP.deflator    7.638472   12.347773  0.618611 0.550003     #> GNP             3.150533    3.554170  0.886433 0.396201     #> Unemployed     -0.591649    0.389005 -1.520928 0.159248     #> Employed      -50.059800   25.348299 -1.974878 0.076522 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 36.1   Adj. R2: 0.569345  # Example 2: using ..(\"regex\") or regex(\"regex\") to grep the variables \"live\"  feols(Armed.Forces ~ Population + ..(\"GNP|ployed\"), longley) #> OLS estimation, Dep. Var.: Armed.Forces #> Observations: 16  #> Standard-errors: IID  #>                 Estimate  Std. Error   t value Pr(>|t|)     #> (Intercept)  4403.682352 4091.847594  1.076209 0.307112     #> Population    -22.844324   32.671302 -0.699217 0.500356     #> GNP.deflator    7.638472   12.347773  0.618611 0.550003     #> GNP             3.150533    3.554170  0.886433 0.396201     #> Unemployed     -0.591649    0.389005 -1.520928 0.159248     #> Employed      -50.059800   25.348299 -1.974878 0.076522 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 36.1   Adj. R2: 0.569345  # Example 3: same as Ex.2 but without using a fixest estimation  # Here we need to use xpd(): lm(xpd(Armed.Forces ~ Population + regex(\"GNP|ployed\"), data = longley), longley) #>  #> Call: #> lm(formula = xpd(Armed.Forces ~ Population + regex(\"GNP|ployed\"),  #>     data = longley), data = longley) #>  #> Coefficients: #>  (Intercept)    Population  GNP.deflator           GNP    Unemployed   #>    4403.6824      -22.8443        7.6385        3.1505       -0.5916   #>     Employed   #>     -50.0598   #>   # Stepwise estimation with regex: use a comma after the parenthesis feols(Armed.Forces ~ Population + sw(regex(,\"GNP|ployed\")), longley) #> Standard-errors: IID  #> Expl. vars.: Population + GNP.deflator #>               Estimate Std. Error  t value Pr(>|t|)     #> (Intercept)  1126.8354  573.65977  1.96429 0.071242 .   #> Population    -21.9900   10.44869 -2.10457 0.055351 .   #> GNP.deflator   16.8762    6.73510  2.50570 0.026304 *   #> --- #> Expl. vars.: Population + GNP #>               Estimate  Std. Error  t value  Pr(>|t|)     #> (Intercept) 4123.92248 1276.578585  3.23045 0.0065709 **  #> Population   -44.01096   14.088805 -3.12382 0.0080681 **  #> GNP            3.36522    0.985998  3.41301 0.0046253 **  #> --- #> Expl. vars.: Population + Unemployed #>                Estimate Std. Error  t value  Pr(>|t|)     #> (Intercept) -627.459659 282.947983 -2.21758 0.0450189 *   #> Population     9.201621   2.755427  3.33945 0.0053277 **  #> Unemployed    -0.602393   0.205112 -2.93689 0.0115594 *   #> --- #> Expl. vars.: Population + Employed #>               Estimate Std. Error  t value Pr(>|t|)  #> (Intercept) -396.96880  310.16774 -1.27985  0.22297  #> Population    -9.63435    8.44253 -1.14117  0.27439  #> Employed      27.38861   16.72199  1.63788  0.12541   # Multiple LHS etable(feols(..(\"GNP|ployed\") ~ Population, longley)) #>                 feols(..(\"GNP|..1 feols(..(\"GNP|pl..2 feols(..(\"GN..3 #> Dependent Var.:      GNP.deflator                 GNP      Unemployed #>                                                                       #> Constant        -76.69*** (9.903) -1,275.2*** (59.83) -763.7* (307.0) #> Population      1.519*** (0.0842)   14.16*** (0.5086) 9.223** (2.610) #> _______________ _________________ ___________________ _______________ #> S.E. type                     IID                 IID             IID #> Observations                   16                  16              16 #> R2                        0.95876             0.98226         0.47135 #> Adj. R2                   0.95582             0.98099         0.43359 #>  #>                 feols(..(\"GNP|p..4 #> Dependent Var.:           Employed #>                                    #> Constant            8.381. (4.422) #> Population      0.4849*** (0.0376) #> _______________ __________________ #> S.E. type                      IID #> Observations                    16 #> R2                         0.92235 #> Adj. R2                    0.91680 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1   # # lhs and rhs arguments #  # to create a one sided formula from a character vector vars = letters[1:5] xpd(rhs = vars) #> ~a + b + c + d + e #> <environment: 0x000001b153f66608>  # Alternatively, to replace the RHS xpd(y ~ 1, rhs = vars) #> y ~ a + b + c + d + e #> <environment: 0x000001b153f66608>  # To create a two sided formula xpd(lhs = \"y\", rhs = vars) #> y ~ a + b + c + d + e #> <environment: 0x000001b153f66608>  # # argument 'add' #  xpd(~x1, add = ~ x2 + x3) #> ~x1 + x2 + x3 #> <environment: 0x000001b153f66608>  # also works with character vectors xpd(~x1, add = c(\"x2\", \"x3\")) #> ~x1 + x2 + x3 #> <environment: 0x000001b153f66608>  # only adds to the RHS xpd(y ~ x, add = ~bon + jour) #> y ~ x + bon + jour #> <environment: 0x000001b153f66608>  # # Dot square bracket operator #  # The basic use id to add variables in the formula x = c(\"x1\", \"x2\") xpd(y ~ .[x]) #> y ~ x1 + x2 #> <environment: 0x000001b153f66608>  # Alternatively, one-sided formulas can be used and their content will be inserted verbatim x = ~x1 + x2 xpd(y ~ .[x]) #> y ~ x1 + x2 #> <environment: 0x000001b153f66608>  # You can create multiple variables at once xpd(y ~ x.[1:5] + z.[2:3]) #> y ~ x1 + x2 + x3 + x4 + x5 + z2 + z3 #> <environment: 0x000001b153f66608>  # You can summon variables from the environment to complete variables names var = \"a\" xpd(y ~ x.[var]) #> y ~ xa #> <environment: 0x000001b153f66608>  # ... the variables can be multiple vars = LETTERS[1:3] xpd(y ~ x.[vars]) #> y ~ xA + xB + xC #> <environment: 0x000001b153f66608>  # You can have \"complex\" variable names but they must be nested in character form xpd(y ~ .[\"x.[vars]_sq\"]) #> y ~ xA_sq + xB_sq + xC_sq #> <environment: 0x000001b153f66608>  # DSB can be used within regular expressions re = c(\"GNP\", \"Pop\") xpd(Unemployed ~ regex(\".[re]\"), data = longley) #> Unemployed ~ GNP.deflator + GNP + Population #> <environment: 0x000001b153f66608>  # => equivalent to regex(\"GNP|Pop\")  # Use .[,var] (NOTE THE COMMA!) to expand with commas # !! can break the formula if missused vars = c(\"wage\", \"unemp\") xpd(c(y.[,1:3]) ~ csw(.[,vars])) #> c(y1, y2, y3) ~ csw(wage, unemp) #> <environment: 0x000001b153f66608>   # Example of use of .[] within a loop res_all = list() for(p in 1:3){   res_all[[p]] = feols(Ozone ~ Wind + poly(Temp, .[p]), airquality) } #> NOTE: 37 observations removed because of NA values (LHS: 37). #> NOTE: 37 observations removed because of NA values (LHS: 37). #> NOTE: 37 observations removed because of NA values (LHS: 37).  etable(res_all) #>                            model 1            model 2            model 3 #> Dependent Var.:              Ozone              Ozone              Ozone #>                                                                          #> Constant          72.28*** (6.847)   70.40*** (6.518)   71.31*** (6.512) #> Wind            -3.055*** (0.6633) -2.866*** (0.6315) -2.928*** (0.6295) #> poly(Temp)1       214.7*** (29.17)   209.0*** (27.73)   201.5*** (28.02) #> poly(Temp)2                          93.36*** (25.44)   101.7*** (25.91) #> poly(Temp)3                                               -37.32 (25.03) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   116                116                116 #> R2                         0.56871            0.61501            0.62256 #> Adj. R2                    0.56108            0.60469            0.60896 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # The former can be compactly estimated with: res_compact = feols(Ozone ~ Wind + sw(.[, \"poly(Temp, .[1:3])\"]), airquality) #> NOTE: 37 observations removed because of NA values (LHS: 37). #>       |-> this msg only concerns the variables common to all estimations  etable(res_compact) #>                      res_compact.1      res_compact.2      res_compact.3 #> Dependent Var.:              Ozone              Ozone              Ozone #>                                                                          #> Constant          72.28*** (6.847)   70.40*** (6.518)   71.31*** (6.512) #> Wind            -3.055*** (0.6633) -2.866*** (0.6315) -2.928*** (0.6295) #> poly(Temp)1       214.7*** (29.17)   209.0*** (27.73)   201.5*** (28.02) #> poly(Temp)2                          93.36*** (25.44)   101.7*** (25.91) #> poly(Temp)3                                               -37.32 (25.03) #> _______________ __________________ __________________ __________________ #> S.E. type                      IID                IID                IID #> Observations                   116                116                116 #> R2                         0.56871            0.61501            0.62256 #> Adj. R2                    0.56108            0.60469            0.60896 #> --- #> Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # How does it work? # 1)  .[, stuff] evaluates stuff and, if a vector, aggregates it with commas #     Comma aggregation is done thanks to the comma placed after the square bracket #     If .[stuff], then aggregation is with sums. # 2) stuff is evaluated, and if it is a character string, it is evaluated with # the function dsb which expands values in .[] # # Wrapping up: # 2) evaluation of dsb(\"poly(Temp, .[1:3])\") leads to the vector: #    c(\"poly(Temp, 1)\", \"poly(Temp, 2)\", \"poly(Temp, 3)\") # 1) .[, c(\"poly(Temp, 1)\", \"poly(Temp, 2)\", \"poly(Temp, 3)\")] leads to #    poly(Temp, 1), poly(Temp, 2), poly(Temp, 3) # # Hence sw(.[, \"poly(Temp, .[1:3])\"]) becomes: #       sw(poly(Temp, 1), poly(Temp, 2), poly(Temp, 3))   # # In non-fixest functions: guessing the data allows to use regex #  # When used in non-fixest functions, the algorithm tries to \"guess\" the data # so that ..(\"regex\") can be directly evaluated without passing the argument 'data' data(longley) lm(xpd(Armed.Forces ~ Population + ..(\"GNP|ployed\")), longley) #>  #> Call: #> lm(formula = xpd(Armed.Forces ~ Population + ..(\"GNP|ployed\")),  #>     data = longley) #>  #> Coefficients: #>  (Intercept)    Population  GNP.deflator           GNP    Unemployed   #>    4403.6824      -22.8443        7.6385        3.1505       -0.5916   #>     Employed   #>     -50.0598   #>   # same for the auto completion with '..' lm(xpd(Armed.Forces ~ Population + GN..), longley) #>  #> Call: #> lm(formula = xpd(Armed.Forces ~ Population + GN..), data = longley) #>  #> Coefficients: #>  (Intercept)    Population  GNP.deflator           GNP   #>     3901.079       -43.219         2.522         3.039   #>"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0111","dir":"Changelog","previous_headings":"","what":"fixest 0.11.1","title":"fixest 0.11.1","text":"CRAN release: 2023-01-10","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"documentation-bug-0-11-1","dir":"Changelog","previous_headings":"","what":"Documentation bug","title":"fixest 0.11.1","text":"fix bug help bin","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"c-code-0-11-1","dir":"Changelog","previous_headings":"","what":"C++ code","title":"fixest 0.11.1","text":"replace stdint cstdint","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0110","dir":"Changelog","previous_headings":"","what":"fixest 0.11.0","title":"fixest 0.11.0","text":"CRAN release: 2022-10-19","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fixest 0.11.0","text":"fix bug function coef() leading methods throw errors R devel. Thanks @vincentarelbundock reporting (#291). fix bug predict method applied objects estimated feNmlm. Thanks @vincentarelbundock reporting (#292)! fix missing variable names VCOV matrix feNmlm models. Thanks (yet !) @vincentarelbundock reporting (#293). Comme dit : jamais deux sans trois ! fix display bug cluster names etable. fix bug IV estimations exogenous variable fixed-effect (thanks Kyle Butts, #296). fix bug panel vs panel.id behaving differently terms default type VCOV estimation contained lags. fix bug confint.fixest one variable estimated (thanks @joachim-gassen, #296). fix several bugs predict using (), particular used combination factor poly() (reported @rfbressan, #301). fix bug etable relating ampersands correctly escaped. fix bug sunab time variable exactly named t (reported Florian Hollenbach, #330). fix bug feols.fit vcov supplied estimation contain fixed-effects (reported @grlju, #341). fix bug sample_df name variable long. fix rare bug regarding error message missing variable exist function environment. fix bug preventing use binning formulas reported @tlcaputi, #359). fix various errors documentation (thanks Ed Rubin others!). fix bug warning message peculiar case divergence GLM (reported @pachadotdev, #315). fix bug preventing use global data set wrapper functions (fepois, fenegbin, etc). Reported @turbanisch, #343. fix bug preventing use split non-GLM, non-OLS estimations (reported @bberger94, #333).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"multiple-estimations-0-11-0","dir":"Changelog","previous_headings":"","what":"Multiple estimations","title":"fixest 0.11.0","text":"new internal algorithm leading object much like plain list, much easier interact . new function models extract matrix reporting model estimated. multiple estimations: warnings turned notes notes delayed stacked. coef.fixest_multi: Now reports model estimation first columns. Also gains arguments collin, long (display results long format) na.rm. new methods: coeftable.fixest_multi, se.fixest_multi, tstat.fixest_multi, pvalue.fixest_multi easily extract results multiple estimations. new method confint.fixest_multi extract confidence intervals multiple estimations.","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) mult_est = feols(y ~ csw(x.[,1:3]), base) models(mult_est) #>   id          rhs #> 1  1           x1 #> 2  2      x1 + x2 #> 3  3 x1 + x2 + x3 coef(mult_est) #>   id          rhs (Intercept)         x1       x2         x3 #> 1  1           x1    6.526223 -0.2233611       NA         NA #> 2  2      x1 + x2    2.249140  0.5955247 0.471920         NA #> 3  3 x1 + x2 + x3    1.855997  0.6508372 0.709132 -0.5564827  # Now in long format coef(mult_est, long = TRUE) #>    id          rhs coefficient   estimate #> 1   1           x1 (Intercept)  6.5262226 #> 2   1           x1          x1 -0.2233611 #> 5   2      x1 + x2 (Intercept)  2.2491402 #> 6   2      x1 + x2          x1  0.5955247 #> 7   2      x1 + x2          x2  0.4719200 #> 9   3 x1 + x2 + x3 (Intercept)  1.8559975 #> 10  3 x1 + x2 + x3          x1  0.6508372 #> 11  3 x1 + x2 + x3          x2  0.7091320 #> 12  3 x1 + x2 + x3          x3 -0.5564827 coeftable(mult_est) #>   id          rhs coefficient   Estimate Std. Error   t value     Pr(>|t|) #> 1  1           x1 (Intercept)  6.5262226 0.47889634 13.627631 6.469702e-28 #> 2  1           x1          x1 -0.2233611 0.15508093 -1.440287 1.518983e-01 #> 3  2      x1 + x2 (Intercept)  2.2491402 0.24796963  9.070224 7.038510e-16 #> 4  2      x1 + x2          x1  0.5955247 0.06932816  8.589940 1.163254e-14 #> 5  2      x1 + x2          x2  0.4719200 0.01711768 27.569160 5.847914e-60 #> 6  3 x1 + x2 + x3 (Intercept)  1.8559975 0.25077711  7.400984 9.853855e-12 #> 7  3 x1 + x2 + x3          x1  0.6508372 0.06664739  9.765380 1.199846e-17 #> 8  3 x1 + x2 + x3          x2  0.7091320 0.05671929 12.502483 7.656980e-25 #> 9  3 x1 + x2 + x3          x3 -0.5564827 0.12754795 -4.362929 2.412876e-05"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"xpd-0-11-0","dir":"Changelog","previous_headings":"","what":"xpd","title":"fixest 0.11.0","text":"new argument add facilitate adding elements formula. new argument frame tell fetch values variables expanded dot square bracket operator. empty strings empty elements expanded .[] now set equal 1 (neutral element formulas): regex values can negated: just start !: auto-completion variables names now enabled ‘..’ suffix. using xpd non-fixest functions, algorithm tries guess data calls ..(\"regex\") auto-completion can used seamlessly. dot-square-bracket operator xpd also expands one-sided formulas:","code":"x = \"\" xpd(y ~ .[x] + .[NULL]) #> y ~ 1 + 1 xpd(am ~ ..(\"!^am\"), data = mtcars) #> am ~ mpg + cyl + disp + hp + drat + wt + qsec + vs + gear + carb base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) xpd(y ~ x.., data = base) #> y ~ x1 + x2 + x3 feols(y ~ x.., base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  1.855997   0.250777  7.40098 9.8539e-12 *** #> x1           0.650837   0.066647  9.76538  < 2.2e-16 *** #> x2           0.709132   0.056719 12.50248  < 2.2e-16 *** #> x3          -0.556483   0.127548 -4.36293 2.4129e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.310327   Adj. R2: 0.855706 lm(xpd(y ~ x..), base) #> Call: #> lm(formula = xpd(y ~ x..), data = base) #>  #> Coefficients: #> (Intercept)           x1           x2           x3   #>      1.8560       0.6508       0.7091      -0.5565 x_all = ~sepal + petal xpd(color ~ .[x_all]) #> color ~ sepal + petal"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"etable-0-11-0","dir":"Changelog","previous_headings":"","what":"etable","title":"fixest 0.11.0","text":"argument fitstat, formula now automatically expanded xpd. means can set fit statistics macro can summoned etable. Useful set default fit statistics : IVs, GLMs, etc. now support models coefficient (fixed-effects). application markdown markup now robust can also escaped backslash. escaping ported c++.","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) est = feols(y ~ csw(x.[,1:3]), base)  # setting the macro setFixest_fml(..fit_ols = ~ n + ar2 + my)  # summoning it etable(est, fitstat = ~..fit_ols) #>                             est.1              est.2               est.3 #> Dependent Var.:                 y                  y                   y #>                                                                          #> Constant        6.526*** (0.4789)  2.249*** (0.2480)   1.856*** (0.2508) #> x1               -0.2234 (0.1551) 0.5955*** (0.0693)  0.6508*** (0.0667) #> x2                                0.4719*** (0.0171)  0.7091*** (0.0567) #> x3                                                   -0.5565*** (0.1275) #> _______________ _________________ __________________ ___________________ #> S.E. type                     IID                IID                 IID #> Observations                  150                150                 150 #> Adj. R2                   0.00716            0.83800             0.85571 #> Dep. Var. mean             5.8433             5.8433              5.8433"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"coeftable-0-11-0","dir":"Changelog","previous_headings":"","what":"coeftable","title":"fixest 0.11.0","text":"gains argument list. TRUE, result returned list form. Useful Rmarkdown documents quick reference specific values.","code":"est = feols(mpg ~ cyl + drat + wt, mtcars) ct = coeftable(est, list = TRUE) ct$constant$coef #> Estimate  #> 39.76766  ct$wt$se #> Std. Error  #>  0.8293065"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"all-estimations-0-11-0","dir":"Changelog","previous_headings":"","what":"All estimations","title":"fixest 0.11.0","text":"arguments split fsplit gain %keep% %drop% operators allow split sample subset elements. estimations also gain arguments split.keep split.drop thing previous operators.","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) est = feols(y ~ x.[1:3], base, fsplit = ~species %keep% c(\"set\", \"vers\")) etable(est) #>                              model 1            model 2            model 3 #> Sample (species)         Full sample             setosa         versicolor #> Dependent Var.:                    y                  y                  y #>                                                                            #> (Intercept)        1.856*** (0.2508)  2.352*** (0.3929)  1.896*** (0.5071) #> x1                0.6508*** (0.0667) 0.6548*** (0.0925)   0.3869. (0.2045) #> x2                0.7091*** (0.0567)    0.2376 (0.2080) 0.9083*** (0.1654) #> x3               -0.5565*** (0.1275)    0.2521 (0.3469)   -0.6792 (0.4354) #> ________________ ___________________ __________________ __________________ #> S.E. type                        IID                IID                IID #> Observations                     150                 50                 50 #> R2                           0.85861            0.57514            0.60503 #> Adj. R2                      0.85571            0.54743            0.57927"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"dictionary-0-11-0","dir":"Changelog","previous_headings":"","what":"Dictionary","title":"fixest 0.11.0","text":"new way create dictionaries .dict: setFixest_dict: ) now dictionary grows, ii) can define variables directly arguments setFixest_dict, iii) .dict applied dictionary relevant, iv) ’s new argument reset.","code":"x = \" # Main vars mpg: Miles per gallon hp: Horsepower  # Categorical variables cyl: Number of cylinders; vs: Engine\"  as.dict(x) #>                   mpg                    hp                   cyl                    vs  #>    \"Miles per gallon\"          \"Horsepower\" \"Number of cylinders\"              \"Engine\"   # setFixest_dict works directly with x setFixest_dict(x)"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functions-0-11-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"fixest 0.11.0","text":"new function degrees_freedom_iid user-friendly version degrees_freedom. new function fdim print dimension data set user-readable way.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-11-0","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.11.0","text":"remove warnings binomial family used weights feglm. add arguments y, X, weights, endo, inst function est_env make user-friendly. fix documentation typos (thanks Caleb Kwon). etable now returns data.frame whose first column variables names (contained row names). fix environment problems lean = TRUE, leading large objects saved disk. print.fixest now displays information sample/subset/offset/weights.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0104","dir":"Changelog","previous_headings":"","what":"fixest 0.10.4","title":"fixest 0.10.4","text":"CRAN release: 2022-03-31","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"hot-fix-0-10-4","dir":"Changelog","previous_headings":"","what":"Hot fix","title":"fixest 0.10.4","text":"fix major bug related extraction fixed-effects (function fixef) 3+ fixed-effects. bug led , specific circumstances, wrong values fixed-effects coefficients. Thanks lot @pachadotdev (#286) finding !","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-bug-fixes-0-10-4","dir":"Changelog","previous_headings":"","what":"Other bug fixes","title":"fixest 0.10.4","text":"fix bug confint sunab used (thanks Sarah Hofmann). fix important “documentation bug” Sun Abraham method (thanks Kyle Butts, #287). fix bugs regarding view/markdown features etable.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-10-4","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.10.4","text":"added compatibility car::deltaMethod following Grant McDermott’s suggestion. new function lag_fml alias lag.formula. latter easily stomped function names packages.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0103","dir":"Changelog","previous_headings":"","what":"fixest 0.10.3","title":"fixest 0.10.3","text":"CRAN release: 2022-03-01 fix bug linked proper identification estimations fixed-effects. remove use anyNA.data.frame leading dependency R 3.6.3 (reported @MichaelChirico, #261).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0102","dir":"Changelog","previous_headings":"","what":"fixest 0.10.2","title":"fixest 0.10.2","text":"CRAN release: 2022-02-17","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-fixes-0-10-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fixest 0.10.2","text":"fix bug stepwise estimations two (stepwised) explanatory variables exactly NAs values. fix display bug regarding factors etable dict present. fix bug tablefoot.value working (reported @resulumit, #224). fix possible environment problem estimating non linear functions outside global environment. fix bug stepwise functions sw csw contained one variable. fix bug etable preventing automatic headers displayed. fix bug n_unik preventing auto completion variable names. fix bug fitstat KPR statistic (reported @etiennebacher, #161). fix bug two factor variables interacted one specific value one variable set reference. fix bug model.matrix variable used estimation (reported @kylebutts, #229). model.matrix now returns variables order estimation – discrepancy happen stepwise estimations interactions interactions put fixed covariates (related @sergiu-burlacu, #231). fix bugs feglm.fit prevented VCOV computed (reported @etiennebacher @edrubin, #237) fix bug predict variables created () leading prediction even values included original estimation (reported @vincentarelbundock, #235). fix bug multiple estimations data contains weights missing values y’s X’s (reported @sahilchinoy, #263). fix bug multiverse stepwise estimation contains fixed-effects IVs (reported @resulumit, #260). fix bug startup message trigger. increase robustness code leading startup message (reported @flycattt, #262). improve robustness algorithm parsing fixed-effects (linked issue, #253). fix minor bug Cragg-Donald statistic. fix peculiar problem load directories names end “.R” (thanks @kyleam, #271). remove remaining large items GLM estimations lean = TRUE. fix bug removing singletons several fixed-effects (reported @johannesbubeck, #244). rep.fixest: replace argument cluster argument vcov enable use VCOV (related , #258 @ShunsukeMatsuno). fix bug predict, automatically discarded NA values (reported @ColinTB, #273).","code":""},{"path":[]},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-arguments-0-10-2","dir":"Changelog","previous_headings":"etable","what":"New arguments","title":"fixest 0.10.2","text":"new argument view display latex table viewer pane (suggestion Avishay-Rizi, #227). need ) working distribution pdflatex, imagemagick ghostscript, b) R packages pdftools tinytex installed, feature work. new argument view.cache setFixest_etable: whether cache PNGs generated. new argument export export Latex table PNG file. new (experimental) argument markdown: Latex tables can automatically integrated non-Latex markdown document PNG format. new argument div.class. Linked markdown argument. Rmarkdown documents, table PNG format embedded <div> container. class div div.class, default \"etable\". new argument tpt nest table threeparttable environment. Notes nested tablenotes environment. style.tex: new argument notes.tpt.intro insert code right tablenotes environment note (useful set font size notes globally instance). new argument arraystretch set height table rows. new argument fontsize applies Latex font sizes table. new argument adjustbox: adjustbox = TRUE nests tabular adjustbox environment width = \\\\textwidth, center default option. Use adjustbox = x x number giving text-width. Use adjustbox = \"x th\" x number giving text-height. Finally can use character string, adjustbox = \"options\", passed verbatim adjustbox option. new argument highlight highlight coefficients frame changing row/cell color. new argument coef.style apply arbitrary style one several coefficients. style.tex: new argument rules_width easily set width booktabs rules. style.tex: new argument caption.insert code right caption. style.tex: new argument no_border remove borders sides table.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-10-2","dir":"Changelog","previous_headings":"etable","what":"New features","title":"fixest 0.10.2","text":"quality tex output substantially improved. signif.code now replaces signifCode (retro compatibility ensured). signifCode removed setFixest_etable, signif.code added style.tex style.df style can significance code defined globally. object returned etable now class etable_tex (tex = TRUE) etable_df, types printing method. significance codes now displayed table output data.frame. headers/extralines: cmidrule show empty column names . new markup: markdown-style markup (e.g. **text**) can used put text italic/bold almost anything table. notes can set dictionary: useful notes (like source example) gets repeated across tables. line.top line.bottom now admit values simple double. argument line.bottom now affects “effective” end table, irrespective value tablefoot. line intuition. improve use tabularx. automatic support makecell: new lines found names within table translated makecell. example: \"\\n long \\n varname\" automatically translated \\makecell{\\\\ long \\\\ varname}.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"dsb-0-10-2","dir":"Changelog","previous_headings":"","what":"dsb","title":"fixest 0.10.2","text":"completely new function dsb() manipulate strings. Applies many low level string operations easily. syntax may bit disturbing first, , unlike French grammar, ’s logic behind! 30 basic string operations available! complex string manipulations single call! dot square bracket operator formulas now calls dsb calls nested:","code":"# At first sight, it's impossible to understand what's going on. # But I assure you, it's pretty logical!  # Type dsb(\"--help\") to get some help.  dollar = 6 reason = \"glory\" dsb(\"Why do you develop packages? For .[`dollar`*c!$]?\",     \"For money? No... for .[U,''s, c?reason]!\", sep = \"\\n\") #> Why do you develop packages? For $$$$$$? #> For money? No... for G L O R Y! xpd(~ sw(.[, \"disp:.[/mpg, cyl]\"])) #> ~sw(disp:mpg, disp:cyl)"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-argument-in-all-estimations-0-10-2","dir":"Changelog","previous_headings":"","what":"New argument in all estimations","title":"fixest 0.10.2","text":"new argument .coef estimation. TRUE, estimated coefficients returned, can useful MC experiments.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functions-0-10-2","dir":"Changelog","previous_headings":"","what":"New functions","title":"fixest 0.10.2","text":"new function est_env estimate model fixest environment. Mostly useful cut overheads simulations. new function ref allows re-factor variables --fly. function always returns factor relocates values given argument first factor levels. also allows bin values, similarly function bin:","code":"# First we get the environment (the estimation is not performed!) env = feols(mpg ~ disp + drat, mtcars, only.env = TRUE)  # Then we estimate: we get the reult from feols(mpg ~ disp + drat, mtcars)  est_env(env) #> OLS estimation, Dep. Var.: mpg #> Observations: 32  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 21.844880   6.747971  3.23725 3.0167e-03 **  #> disp        -0.035694   0.006653 -5.36535 9.1914e-06 *** #> drat         1.802027   1.542091  1.16856 2.5210e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 3.07661   Adj. R2: 0.712458  # Why doing that? You can modify the env w/t incurring overheads  assign(\"weights.value\", mtcars$wt, env) # New estimation with weights est_env(env) #> OLS estimation, Dep. Var.: mpg #> Observations: 32  #> Standard-errors: IID  #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept) 21.967576   6.320006  3.47588 1.6241e-03 **  #> disp        -0.032922   0.005884 -5.59478 4.8664e-06 *** #> drat         1.505517   1.470671  1.02369 3.1444e-01     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 5.08781   Adj. R2: 0.709392 # We want to place 5 in the first place ref(1:5, 5) #> [1] 1 2 3 4 5 #> Levels: 5 1 2 3 4  # You can also bin at the same time ref(1:5, .(\"4:5\" = 4:5)) #> [1] 1   2   3   4:5 4:5 #> Levels: 4:5 1 2 3"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-10-2","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.10.2","text":"bin: cut:: now ignores white spaces, cut:: q1 ] q3 [ works appropriately. speed stepwise estimations (using sw [csw]) improved. recursive formula macro definitions allowed (feature request @turbanisch, #234). startup message pop Rmarkdown documents . function sample_df gains argument previous recovers previous draw.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0101","dir":"Changelog","previous_headings":"","what":"fixest 0.10.1","title":"fixest 0.10.1","text":"CRAN release: 2021-10-30","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-fixes-0-10-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fixest 0.10.1","text":"remove new R native piping test |> led errors R < 4.1.0 despite conditional testing. fix bug etable headers one wants include several lines first line contains one element repeated across columns. fix bugs predict: ) variables created functions data, b) new data contains single level factors (relates issues #200 #180 @steffengreup @IsadoraBM). fix bug etable non-clustered standard errors displaying properly footers. fix bug etable regarding escaping fixef_sizes (reported Apoorva Lal, #201). fix bug introduced 0.10.0 preventing estimation IV models interacted fixed-effects (reported @etiennebacher, #203). fix bug IV estimations : ) exogenous variables present IV part contained lags; b) endogenous variables contained least two lags. Reported Robbie Minton. fix bug .fit methods argument vcov wasn’t NULL. fix bug summary.fixest_multi: variance NA internal bug pop circumstances. fix bug plot.fixef working fepois (reported @statzhero, #213). fix error message (wrong) argument X used feols.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"dot-square-bracket-operator-0-10-1","dir":"Changelog","previous_headings":"","what":"Dot square bracket operator","title":"fixest 0.10.1","text":"add comma first, like .[,stuff], separate variables commas (instead separating additions): new function dsb: applies dot square bracket operator character strings. function dsb, can add string literal first last position .[] “collapse” character string question. way collapse performed depends position:","code":"lhs_vars = c(\"var1\", \"var2\") xpd(c(.[,lhs_vars]) ~ csw(x.[,1:3])) #> c(var1, var2) ~ csw(x1, x2, x3) name = c(\"Juliet\", \"Romeo\")  # default behavior => vector dsb(\"hello .[name], what's up?\") #> [1] \"hello Juliet, what's up?\" \"hello Romeo, what's up?\"   # string literal in first position dsb(\"hello .[' and ', name], what's up?\") #> [1] \"hello Juliet and Romeo, what's up?\"  # string literal in last position dsb(\"hello .[name, ' and '], what's up?\") #> [1] \"hello Juliet and hello Romeo, what's up?\""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bin-0-10-1","dir":"Changelog","previous_headings":"","what":"bin","title":"fixest 0.10.1","text":"bin: numeric vectors can ‘cut’ new special value 'cut::q3]p90]', check ! bin also accepts formulas, e.g. bin = list(\"<2\" = ~ x < 2) (x must variable). bin accepts use .() list(). can add location element using @d name. Useful rearrange factors:","code":"data(iris) plen = iris$Petal.Length  # 3 parts of (roughly) equal size table(bin(plen, \"cut::3\")) #>  #> [1.0; 1.9] [3.0; 4.9] [5.0; 6.9]  #>         50         54         46   # Three custom bins table(bin(plen, \"cut::2]5]\")) #>  #> [1.0; 1.9] [3.0; 5.0] [5.1; 6.9]  #>         50         58         42   # .. same, excluding 5 in the 2nd bin table(bin(plen, \"cut::2]5[\")) #>  #> [1.0; 1.9] [3.0; 4.9] [5.0; 6.9]  #>         50         54         46   # Using quartiles table(bin(plen, \"cut::q1]q2]q3]\")) #>  #> [1.0; 1.6] [1.7; 4.3] [4.4; 5.1] [5.2; 6.9]  #>         44         31         41         34   # Using percentiles table(bin(plen, \"cut::p20]p50]p70]p90]\")) #>  #> [1.0; 1.5] [1.6; 4.3] [4.4; 5.0] [5.1; 5.8] [5.9; 6.9]  #>         37         38         33         29         13   # Mixing all table(bin(plen, \"cut::2[q2]p90]\")) #>  #> [1.0; 1.9] [3.0; 4.3] [4.4; 5.8] [5.9; 6.9]  #>         50         25         62         13  # Adding custom names table(bin(plen, c(\"cut::2[q2]p90]\", \"<2\", \"]2; Q2]\", NA, \">90%\"))) #>         <2    ]2; Q2] [4.4; 5.8]       >90%  #>         50         25         62         13 base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) table(base$species) #>     setosa versicolor  virginica  #>         50         50         50  table(bin(base$species, .(\"@3\" = \"seto\", \"@1 VIRGIN\" = \"virg\"))) #>     VIRGIN versicolor     setosa  #>         50         50         50"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"etable-0-10-1","dir":"Changelog","previous_headings":"","what":"etable","title":"fixest 0.10.1","text":"tex output now “nicely” formatted. argument extralines replaces argument extraline increase coherence. Hence function extraline_register becomes extralines_register (change done without deprecation since guess function must rarely used). arguments extralines headers accept .() list().","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\"))"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-function-0-10-1","dir":"Changelog","previous_headings":"","what":"New function","title":"fixest 0.10.1","text":"check_conv_feols: checks convergence fixed-effects feols models looking first-order conditions.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functions-unrelated-but-possibly-useful-0-10-1","dir":"Changelog","previous_headings":"","what":"New functions, unrelated but possibly useful","title":"fixest 0.10.1","text":"Although bit unrelated purpose package, functions extensively used author’s research decided leverage author privileges include fixest make easier share co-authors. osize: simple function returning formatted object size. n_unik: simple flexible function returning number unique elements variables one several data sets. Useful checking keys. sample_df: simple function extract random lines data.frame.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-new-features-0-10-1","dir":"Changelog","previous_headings":"","what":"Other new features","title":"fixest 0.10.1","text":"computing Newey-West standard-errors time series, bandwidth now selected thanks bwNeweyWest function sandwich package. function implements method described Newey West 1994. add type = \"se_long\" summary.fixest_multi yields coefficients SEs estimations “long” format. fixest estimations, using “naked” dot square bracket variable left-hand-side includes multiple left hand sides. Regular expressions can also used LHS.","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) y = c(\"y\", \"x1\") feols(.[y] ~ x2, base) #> Standard-errors: IID  #> Dep. var.: y #>             Estimate Std. Error t value  Pr(>|t|)     #> (Intercept) 4.306603   0.078389 54.9389 < 2.2e-16 *** #> x2          0.408922   0.018891 21.6460 < 2.2e-16 *** #> --- #> Dep. var.: x1 #>              Estimate Std. Error  t value   Pr(>|t|)     #> (Intercept)  3.454874   0.076095 45.40188  < 2.2e-16 *** #> x2          -0.105785   0.018339 -5.76845 4.5133e-08 ***   etable(feols(..(\"x\") ~ y + i(species), base)) #>                                  model 1            model 2            model 3 #> Dependent Var.:                       x1                 x2                 x3 #>                                                                                #> (Intercept)            1.677*** (0.2354) -1.702*** (0.2301) -0.4794** (0.1557) #> y                     0.3499*** (0.0463) 0.6321*** (0.0453) 0.1449*** (0.0306) #> species = versicolor -0.9834*** (0.0721)  2.210*** (0.0705) 0.9452*** (0.0477) #> species = virginica   -1.008*** (0.0933)  3.090*** (0.0912)  1.551*** (0.0617) #> ____________________ ___________________ __________________ __________________ #> S.E. type                            IID                IID                IID #> Observations                         150                150                150 #> R2                               0.56925            0.97489            0.93833 #> Adj. R2                          0.56040            0.97438            0.93706"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-10-1","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.10.1","text":"improve error messages subset select element. xpd fixest estimations, variables can “grepped” data set regex(\"regex\"). add inheritance default style iplot style set globally setFixest_coefplot. improve error messages general prompting additional error calls (appropriate). dictionaries now ignore white spaces coefficient names (thanks Caleb Kwon). package startup messages improved (pop less often). comply CRAN policies, startup message doesn’t write .Renviron file .","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-0100","dir":"Changelog","previous_headings":"","what":"fixest 0.10.0","title":"fixest 0.10.0","text":"CRAN release: 2021-09-28","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bugs fixes","title":"fixest 0.10.0","text":"Fix bug occurring IV models multiple instruments multithreading . bug lead wrong imputation IV residuals, hence affecting standard-errors (although order magnitude variation minor). Thanks @whitfillp, #182. Fix minor, rare, bug occurring feglm model badly specified VAR(Y) >>>> VAR(X) one variable. model.matrix work type = \"fixef\" (thanks @kylebutts, #172). nonlinear estimations:fixef.rm = \"none\" fixef.rm = \"singleton\" work expected (thanks @kre32, #171). Fix bug occur observations removed several fixed-effects dimensions (impact estimates though). Fix bug etable file provided tex = FALSE (thanks @roussanoff, #169). Fix bug : ) fixest_panel used data set estimation, ii) NA values removed iii) fixed-effects used. Thanks Nicola Cortinovis report! Fix bug to_integer converting multiple vectors sorting required, without items. Fix bug feols.fit matrix regressors partially named (reported @leucothea, #176). Fix bug value fixed-effects coefficients IV estimations (thanks @tappek, #190). Fix bug coefplot lean = TRUE estimation (reported @adamaltmejd, #195). Fix bug iplot IVs contained interactions. Fix bug iplot preventing variables removed (reported @roussanoff, #164). Fix 0 right-padding numbers displayed estimation results confusing (reported @hjuerges, #197).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"fixest 0.10.0","text":"New argument vcov: greatly simplifies extends specify SEs completely replaces arguments se cluster (still work) accepts functions see documentation vignette New built-VCOVs: Newey-West (1987) serially correlated errors Driscoll-Kraay (1998) cross-sectionally serially correlated errors Conley (1999) spatially correlated errors can summon variables environment directly formula using new dot square bracket (DSB) operator. DSB operator can used create many variables , can also using within regular expressions. One example: sunab can now bin variables fly new argument bin. new function bin also available user-level. Function dof renamed ssc (stands small sample correction) improve clarity. Retro compatibility partially ensured function dof removed point.","code":"base = setNames(iris, c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")) i = 2:3 z = \"i(species)\" feols(y ~ x.[i] + .[z], base) #> OLS estimation, Dep. Var.: y #> Observations: 150  #> Standard-errors: IID  #>                      Estimate Std. Error   t value   Pr(>|t|)     #> (Intercept)          3.682982   0.107403 34.291343  < 2.2e-16 *** #> x2                   0.905946   0.074311 12.191282  < 2.2e-16 *** #> x3                  -0.005995   0.156260 -0.038368 9.6945e-01     #> species::versicolor -1.598362   0.205706 -7.770113 1.3154e-12 *** #> species::virginica  -2.112647   0.304024 -6.948940 1.1550e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 0.333482   Adj. R2: 0.832221"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"breaking-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"fixest 0.10.0","text":"Functions setFixest_dof setFixest_se renamed setFixest_ssc setFixest_vcov. retro compatibility ensured. Removal var::factor operator interact continuous variable variable treated factor.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.10.0","text":"feglm now accepts partially matched character shortcuts families: “poisson”, “logit”, “probit” now valid family arguments. predict.fixest accepts new argument fixef , TRUE, returns data.frame fixed-effects coefficients observation, number columns number fixed-effects (feature requests #144 #175 @pp2382 @cseveren). offsets present formula now accepted. VCOV aliases (Grant McDermott’s suggestions: thanks Grant!): default standard-errors now \"iid\" (former keywords still work) keyword hc1 can used summon heteroskedasticity-robust SEs Argument sliding: argument vcov can called implicitly data set globally: piping data now works: user can now specify custom degrees freedom compute t-tests ssc() (feature request Kyle F. Butts). predict method gains new argument se.fit interval computes SEs/CI predicted variable. works OLS models without fixed-effects. Feature request Gábor Békés, #193. iplot gains argument .select navigate different variables created () (provided one course).","code":"base = setNames(iris = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\"))  # Setting up the data setFixest_estimation(data = base)  # Now vcov can be used without using vcov = stuff: feols(y ~ x1 + x2, ~species)  # => same as feols(y ~ x1 + x2, vcov = ~species) mtcars |> feols(cyl ~ mpg) # => same as feols(cyl ~ mpg, mtcars)"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"etable-0-10-0","dir":"Changelog","previous_headings":"","what":"etable","title":"fixest 0.10.0","text":"new argument interaction.order control order interacted variables displayed (feature request @inkrement, #120). new argument .equal control values taken factor variables created () displayed. new meta.XX family arguments exporting Latex. include various type information comments table (suggestion adding time Apoorva Lal, #184). far new arguments : meta.time, meta.author, meta.sys, meta.call, meta.comment. argument meta shortcut . default values can saved project level using argument save = TRUE function setFixest_etable. means default values automatically set without call setFixest_etable startup R session. example, want permanently add creation time Latex exports, just use setFixest_etable(meta.time = TRUE, save = TRUE), won’t need bother anymore future session current project. changes extraline, now: ) accepts raw vectors, ii) accepts lines without title, iii) elements recycled across models, iv) accepts elements form list(\"item1\" = #item1, \"item2\" = #item2, etc), v) elements Latex-escaped. style.tex: Latex-escaping removed. argument subtitle renamed headers (retro-compatibility ensured). new argument headers: accepts named lists numbers, names represent values cell numbers represent span. example headers = list(\"Gender\" = list(\"M\" = 3, \"F\" = 4)) create line 3 times “M” 4 times “F”. adding special tag \":_:\" row name add rule column group (previous example \":_:Gender\" ). Suggestion @nhirschey, #173. can control placement header line using first character following special tags: “^” (top), “-” (mid, default), “_” (bottom). Ex: headers = list(\"_Gender\" = list(\"M\" = 3, \"F\" = 4)) place header line bottom headers. default values Latex-escaped. can disable escaping adding \":tex:\" row title. argument sdBelow renamed se.(retro-compatibility ensured). new argument se.row control whether row displaying standard-errors displayed (clarification requested @waynelapierre, #127). dict now directly modifies entries global dictionary instead creating brand new one. example setFixest_dict(c(cyl=\"Cylinder\")) use etable dict=c(mpg=\"miles per gallon\"), end names cyl mpg modified. disable behavior, can add \"reset\" first element, like dict=c(\"reset\", mpg=\"miles per gallon\").","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-10-0","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.10.0","text":"multiple estimations, now made explicit information regarding NA values concern variables common across models (formerly, implicit hence confusing).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-090","dir":"Changelog","previous_headings":"","what":"fixest 0.9.0","title":"fixest 0.9.0","text":"CRAN release: 2021-06-19","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-9-0","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.9.0","text":"Major bug, leading R crash, occurring variable used several different slopes (thanks @Oravishayrizi, #119). Major bug, leading R crash, occurring 3+ fixed-effects combined. Major bug, leading R crash, occurring multiple LHS estimated option fixef.rm = \"singleton\" (thanks Ole Rogeberg). Major bug, leading R crash, occurring many fixed-effects removed 0/1 outcomes (thanks @mangelett #146 @ChristianDueben #157). Fix bug occurring undefined covariances one regressor (thanks @joseph-richard-martinez, #118). Fix bug IV estimations regarding Wald statistic first stage lean = TRUE VCOV computation done post estimation. Fix bug Wald test IV estimations variables removed collinearity (thanks @pei-huang, #117). Fix bug regarding multiple estimations multiple fixed-effects contained variables varying slopes. Fix various display bugs fitstat. Fix bug etable: using split sample estimations prevented argument title render correctly. Fix incorrect information message observations removed infinite values (circumstances removal wrongly attributed NAness). Fix bug etable checking argument coefstat (thanks @waynelapierre, #121). Fix bug feols IV estimations contained fixed-effects lean = TRUE (thanks @adamaltmejd, #123). Fix bug IV estimations endogenous regressor removed collinearity. Fix bug estimation without intercept working lags present formula (thanks @nreigl, #126). Fix various bugs using subset estimations (reported @noahmbuckley @Oravishayrizi, #129 #131). Fix error message data fetched (reported @Oravishayrizi, #134). Fix bug getting “G” statistic fitstat. Fix bug predict poly() term used formula long (reported @XiangLiu-github, #135). fix bug extracting sub statistics \"ivwald\" \"ivf\" fitstat. fix bug () used without intercept. Fix display bug etable Tex output requested interactions composed identical variables different interacted orders present (reported @Oravishayrizi, #148). Fix bug etabe fixef.group used fixed-effects renamed (reported @jamesfeigenbaum). Fix bug fplit used subset. Fix bug using cluster subset NA values removed (reported @adamaltmejd, #154). Fix bug argument lean working summary applied existing summary argument lean present (reported @adamaltmejd). Fix bug using multiple LHS lags formula (reported @Nicolas Reigl, #158). Fix bug regarding intercept-likelihood weights provided (Poisson logit models), reported @fostermeijer, #155.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"breaking-changes-new-i-function-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes: new i() function","title":"fixest 0.9.0","text":"function (), used create factors interactions tidied , leading breaking changes. first two arguments swapped! now first argument always treated factor. new syntax (factor_var, var, ref, keep, ref2, keep2) var can either continuous factor-like (argument f2, interaction factors, removed). Fix rare bug number parameters greater number observations GLM family dispersion parameter.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"breaking-changes-new-default-family-for-feglm-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes: new default family for feglm","title":"fixest 0.9.0","text":"line R stats’s glm, new default family feglm gaussian (previously Poisson, using , please now use function fepois instead).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"breaking-changes-coefplot-is-now-split-in-two-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes: coefplot is now split in two","title":"fixest 0.9.0","text":"function coefplot split two: coefplot: always plots coefficients. iplot: plots interactions factors created function (). function iplot hence replaces coefplot’s former argument .inter controlled whether focus interactions.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"etable-0-9-0","dir":"Changelog","previous_headings":"","what":"etable","title":"fixest 0.9.0","text":"group extraline: enhanced simplified control placement new rows. Now two special characters beginning row name decide location. new argument fixest.group. TRUE, fixed-effects appearing always jointly across models grouped single row. user can alternatively specify list declare fixed-effect group customize row name. sdBelow now works tex = FALSE (request Sasha Indarte). extraline can now equal formula containing extraline macros valid fitstat types. list, extraline can contain functions (returning scalar) applied model. list, extraline can contain formulas containing extraline macros valid fitstat types. can register extraline macros new function extraline_register. tex = TRUE, n-way clustering now always leads name clustered SEs (n-way shown ). Add argument coef.just controls justification coefficients standard-errors. works tex = FALSE (.e. data.frame requested).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"sun-and-abraham-staggered-did-method-0-9-0","dir":"Changelog","previous_headings":"","what":"Sun and Abraham staggered DiD method","title":"fixest 0.9.0","text":"new function sunab simplifies implementation SA method. just type sunab(cohort, period) fixest estimation works!","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest_multi-methods-0-9-0","dir":"Changelog","previous_headings":"","what":"fixest_multi methods","title":"fixest 0.9.0","text":"Common methods extended fixest_multi objects. coef.fixest_multi: re-arranges coefficients multiple estimations matrix. resid.fixest_multi: re-arranges residuals multiple estimations matrix.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fitstat-new-fit-statistics-0-9-0","dir":"Changelog","previous_headings":"","what":"fitstat: New fit statistics","title":"fixest 0.9.0","text":"kpr: Kleibergen-Paap rank test IV estimations. cd: Cragg-Donald F statistic IV estimations. : gives mean dependent variable.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functions-0-9-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"fixest 0.9.0","text":"degrees_freedom: access DoFs models (sometimes can intricate). feols.fit: fit method feols. obs: obtain observations used estimation.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.9.0","text":"fixest estimation now accept scalars global environment (variables still allowed!). Better handling DoFs fitstat (particular VCOV clustered). model.matrix: endogenous exogenous regressors, instruments IV estimations can now easily extracted. new arguments .matrix .df coerce result particular format. .fit methods (feols.fit feglm.fit) now handle multiple dependent variables. to_integer now sorts appropriately kind vectors (just numeric/character/factors). substantial speed improvement combining several vectors many cases (> millions). number threads use can now set permanently project level new argument save function setFixest_nthreads.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"minor-breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Minor breaking changes","title":"fixest 0.9.0","text":"model.matrix type = \"lhs\" return object now vector (previously data.frame).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"fixest 0.9.0","text":"Improve error messages. hatvalues.fixest: now returns error instead message fixed-effects present (makes interplay sadnwich ‘nicer’).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-084","dir":"Changelog","previous_headings":"","what":"fixest 0.8.4","title":"fixest 0.8.4","text":"CRAN release: 2021-03-29","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-8-4","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.8.4","text":"Fix bug depvar = FALSE working tex output requested (thanks @apoorvalal @pbaylis, #104). Fix bug naming () led one variable retained (thanks @ colejharvey, #106). Fix bug display degrees freedom selected fitstat. Fix bug lean = TRUE IV estimations fixed-effects (large object still present, thanks @zozotintin). Fix bug display etable Rmarkdown (thanks @kdzhang, #93, @nikolassch, #112) Improve error messages fitstat selecting statistics components. Fix bug predict poly() used estimation (thanks @tholdaway, #109). Fix bug predict: error message pop combined fixed-effects used combine.quick = TRUE (thanks @benzipperer, #115). Fix bug properly account nestedness combined fixed-effects clustered standard-errors requested (thanks @Oravishayrizi , #116). Fig major bug model.matrix make slow. Led function aggregate slow (thanks Benny Goldman). Fix bug prevented aggregate effectively use weights (thanks Benny Goldman).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-8-4","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.8.4","text":"model.matrix gains new argument subset allows creation design matrix subset variables . drop.section now works etable tex = FALSE. argument panel.id used estimations can set globally function setFixest_estimation.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-changes-0-8-4","dir":"Changelog","previous_headings":"","what":"Other changes","title":"fixest 0.8.4","text":": Factor variables values 0 1 treated numeric. fitstat: statistic G now equal degrees freedom used t-test coefficients testing. esttable esttex deprecated : now pure aliases etable. aggregate: weighted regressions, use_weights controls whether use weights perform aggregation.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-083-2021-03-01","dir":"Changelog","previous_headings":"","what":"fixest 0.8.3 (2021-03-01)","title":"fixest 0.8.3 (2021-03-01)","text":"CRAN release: 2021-03-01","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-8-3","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.8.3 (2021-03-01)","text":"Remove test leads (uber odd) bug fedora devel. Fix bug IV estimation using factors instrumented variables (thanks @adamaltmejd, #99). Fix bug using least two fixed-effects varying slopes singletons (thanks @adamtheising, #89).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-8-3","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.8.3 (2021-03-01)","text":"xpd, macros parsed even creating formula lhs rhs arguments.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-082-2021-02-11","dir":"Changelog","previous_headings":"","what":"fixest 0.8.2 (2021-02-11)","title":"fixest 0.8.2 (2021-02-11)","text":"CRAN release: 2021-02-11","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-8-2","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.8.2 (2021-02-11)","text":"Fix bug IV estimations lean = TRUE (thanks @reifjulian, #88). Fix various bugs related use summary lean = TRUE estimation. Fix bug preventing se = \"cluster\" used etable (thanks Caleb Kwon). Fix bug etable escaping variable names properly sdBelow = FALSE (thanks Jeppe Viero). Fix bug IV estimation lean = TRUE. Fix bug preventing return demeaned variables IV estimations (thanks @amarbler, #94).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-8-2","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.8.2 (2021-02-11)","text":"() now automatically converts first argument numeric type logical. user can still pass logicals argument f2 expected behavior really treat logical. Improve fitstat help error messages.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-081-2021-01-13","dir":"Changelog","previous_headings":"","what":"fixest 0.8.1 (2021-01-13)","title":"fixest 0.8.1 (2021-01-13)","text":"CRAN release: 2021-01-13","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-8-1","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.8.1 (2021-01-13)","text":"Bug etable default value fitstat set setFixest_etable. Bug model.matrix model contained fixed-effects RHS requested: intercept wrongfully added. Fix rare bug () called within specific set functions. Fix bug R old release due anyNA.data.frame. Fix bug regarding panel data sets variables created data.table within functions (thanks @tcovert, #76). Add extra elements removed lean = TRUE keep object small possible (reported @zozotintin, #81). Fix bug fixed-effects estimations multiple LHS different number observations per estimation prevented get default behavior standard-errors work. Fix occasional bug using split fixed-effects. xpd now appropriately returns two sided formula one sided formula fed argument lhs provided. Fix bug coefplot preventing proper scaling x-axis interactions multiple models displayed. Fix occasional bug ordering sub-selections multiple estimations.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"sun-and-abraham-method-for-staggered-did-0-8-1","dir":"Changelog","previous_headings":"","what":"Sun and Abraham method for staggered DiD","title":"fixest 0.8.1 (2021-01-13)","text":"staggered difference--difference analyzes: method Sun Abraham (forthcoming, Journal Econometrics) implemented. used () interact cohort dummies time treatment dummies, use function aggregate recover yearly treatment effects. far way , although easy, bit arcane next versions software include user-friendly way. details, check help page function aggregate staggered section vignette fixest walkthrough.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-8-1","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.8.1 (2021-01-13)","text":"Function () now new arguments f2, drop2 keep2 allows interaction two factors (useful staggered estimations). Argument dof, used compute standard-errors, can now used estimation time. etable, argument digits can now accepts character value specifying way decimals displayed. example digits = \"r2\" means numbers rounded two decimals two decimals always displayed. default behavior display significant digits. Follows feature request #82 @lyifa. etable also gains argument digits.stats monitors fit statistics decimals displayed. Argument split now accepts variable names.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-8-1","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.8.1 (2021-01-13)","text":"coherence regarding use summary applied models SEs computed estimation time. Now memory SEs computed, , example, argument dof passed summary, SEs clustered way estimation time dof change. Now error raised () used fixed-effects part formula. appropriate way indicated (related #77 @rrichmond). Improved default setting standard-errors. Improved error messages. multiple estimations, models returning full NA coefficients returned (instead raising error).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-080-2020-12-14","dir":"Changelog","previous_headings":"","what":"fixest 0.8.0 (2020-12-14)","title":"fixest 0.8.0 (2020-12-14)","text":"CRAN release: 2020-12-14","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-8-0","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.8.0 (2020-12-14)","text":"Major bug predict used presence fixed-effects (thanks @jurojas5, #54). Introduced version 0.7. using variable names cluster standard-errors inside functions, summary may fetch data right frame (thanks @chenwang, #52). Now completely new internal mechanic place. using variables varying slopes number iterations greater 300, bug occurred function checking convergence right (thanks @kendonB, #53). Fix bug demeaning algorithm two variables varying slopes identical. Fix bug femlm/feNmlm factor variables removed due removal observations. summary, fix bug argument cluster equal formula expressions variable name (thanks @edrubin, #55). Fix bug integers present RHS (thanks @zozotintin, #56). Fix bug nb_FE >= 2 data large (thanks @zozotintin, #56). Fix bug display standard-errors clustered etable. Fix bug occurring lags used combination combined fixed-effects (.e. fe1 ^ fe2) (thanks @SuperMayo, #59). Fix bug coefplot representing multiple estimations coefficient names numbers.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"iv-0-8-0","dir":"Changelog","previous_headings":"","what":"IV","title":"fixest 0.8.0 (2020-12-14)","text":"IV estimations now supported. summoned adding formula defining endogenous regressors instruments pipe.","code":"base = iris names(base) = c(\"y\", \"x1\", \"x_endo\", \"x_inst\", \"species\") base$endo_bis = 0.5 * base$y + 0.3 * base$x_inst + rnorm(150) base$inst_bis = 0.2 * base$x_endo + 0.3 * base$endo_bis + rnorm(150)  # The endo/instrument is defined in a formula past a pipe res_iv1 = feols(y ~ x1 | x_endo ~ x_inst, base)  # Same with the species fixed-effect res_iv2 = feols(y ~ x1 | species | x_endo ~ x_inst, base)  # To add multiple endogenous regressors: embed them in c() res_iv3 = feols(y ~ x1 | c(x_endo, x_endo_bis) ~ x_inst + x_inst_bis, base)"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fit-statistics-0-8-0","dir":"Changelog","previous_headings":"","what":"fit statistics","title":"fixest 0.8.0 (2020-12-14)","text":"fitstat function significantly enhanced. Now following types supported: Likelihood ratios F-tests Wald tests IV related tests (F/Wald/Sargan) common stats like R2s, RMSE, Log-likelihood, etc can register fit statistics. can seamlessly summoned etable via argument fitstat. print.fixest function now supports fitstat argument. means can display desired fit statistics printing fixest objects. especially useful combination setFixest_print function allows define default fit statistics display . See example “Instrumental variables” section Walkthrough vignette. new function wald computes basic Wald tests.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"multiple-estimations-0-8-0","dir":"Changelog","previous_headings":"","what":"Multiple estimations","title":"fixest 0.8.0 (2020-12-14)","text":"New arguments split fsplit: can now perform split sample estimations (fsplit adds full sample). Estimations multiple left-hand-sides can done wrapping variables c(). right-hand-side fixed-effects parts formula, stepwise estimations can performed new stepwise functions (sw, sw0, csw csw0). object returned class fixest_multi. can easily navigate results subset methods.","code":"aq = airquality[airquality$Month %in% 5:6, ] est_split = feols(c(Ozone, Solar.R) ~ sw(poly(Wind, 2), poly(Temp, 2)),                  aq, split = ~ Month)                   # By default: sample is the root etable(est_split)  # Let's reorder, by considering lhs the root etable(est_split[lhs = TRUE])  # Selecting only one LHS and RHS etable(est_split[lhs = \"Ozone\", rhs = 1])  # Taking the first root (here sample = 5) etable(est_split[I = 1])  # The first and last estimations etable(est_split[i = c(1, .N)])"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"formula-macros-0-8-0","dir":"Changelog","previous_headings":"","what":"Formula macros","title":"fixest 0.8.0 (2020-12-14)","text":"algorithm now accepts regular expressions syntax ..(\"regex\"):","code":"data(longley) # All variables containing \"GNP\" or \"ployed\" in their names are fetched feols(Armed.Forces ~ Population + ..(\"GNP|ployed\"), longley)"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-in-etable-0-8-0","dir":"Changelog","previous_headings":"","what":"New features in etable","title":"fixest 0.8.0 (2020-12-14)","text":"New style.tex style.df arguments define look either Latex tables output data.frames. can set new functions style.tex style.df contain documentation. etable arguments ported style functions (yesNo, tablefoot). New postprocess.tex postprocess.df arguments allow automatic postprocessing outputs. See dedicated vignette exporting tables illustration. new tabular arguments allows create tabular* tables (suggestion @fostermeijer, #51). polynomials powers automatically renamed facilitate comparison across models. can set style argument poly_dict. labeling models enhanced rep.fixest used different standard-errors (model names now “model INDEX.SUB-INDEX”). argument subtitles improved, now automatically displays samples split sample estimations performed.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"Other new features","title":"fixest 0.8.0 (2020-12-14)","text":"estimations: subset: regular subset (long overdue). split, fsplit: perform split sample estimations. se, cluster: cluster standard-errors call. lean: TRUE, summary applied large object removed result. save memory => many methods won’t work afterwards. fixef.rm: argument accepts none, perfect, singleton, . Controls removal fixed-effects observation. auto parsing powers. Now don’t need use () powers variables RHS, automatically done (.e. x^3 becomes (x^3)): Estimation options can set globally setFixest_estimation(). demean function enhanced (contribution Sebastian Krantz).","code":"base = iris names(base) = c(\"y\", \"x1\", \"x2\", \"x3\", \"species\")  # The multiple estimation below works just fine feols(y ~ csw(x, x^2, x^3), base)"},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"improvements-of-the-internal-algorithm-0-8-0","dir":"Changelog","previous_headings":"","what":"Improvements of the internal algorithm","title":"fixest 0.8.0 (2020-12-14)","text":"Internal demeaning algorithm: copies data avoided using feglm. Internal algorithm to_integer (used estimations): one copy input data now avoided. estimations: smarter handling intercept, thus avoiding reconstruction design matrix.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-071-2020-10-27","dir":"Changelog","previous_headings":"","what":"fixest 0.7.1 (2020-10-27)","title":"fixest 0.7.1 (2020-10-27)","text":"CRAN release: 2020-10-27","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"hotfixes-0-7-1","dir":"Changelog","previous_headings":"","what":"Hotfixes","title":"fixest 0.7.1 (2020-10-27)","text":"Fix bug int overflow estimations one variable. Fix bug tests occurring R old release. Fix bug examples occurring R old release.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"improvements-0-7-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"fixest 0.7.1 (2020-10-27)","text":"Function () now behaves factor(), setting automatically reference appropriate. Internal algorithm () much faster.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-7-1","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.7.1 (2020-10-27)","text":"etable, user can now provide type clustering model. New method rep.fixest replicate fixest objects, mostly useful etable several SEs models reported. Automatic fix variance positive definite.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-070-2020-10-24","dir":"Changelog","previous_headings":"","what":"fixest 0.7.0 (2020-10-24)","title":"fixest 0.7.0 (2020-10-24)","text":"CRAN release: 2020-10-24","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-7-0","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.7.0 (2020-10-24)","text":"Major bug fixed-effects combined ^ contained NAs (thanks @poliquin, #35). Bug using lead/lags estimations. bug due bug dependency (dreamerr) fixed. Now fixest requires dreamerr version >= 1.2.1. Bug spotted @seunghoon001 (#44). Major bug n_obs x n_vars > 2B n_obs x n_fixed-effects > 2B. cases estimations just done, even leading R crash using nthreads > 1. algorithm fixed allow datasets 2B observations estimated circumstances. Bug reported, many help checking provided, Howard Zihao Zhang. coefplot: Problem regarding interactions observations, hence coefficients, removed estimation. Now coefficients removed plot. Bug reported @phisherblack, #45. coefplot: Corrected various bugs asked plotting several estimations. Fix stack imbalance warning (report @shoonlee, #46).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"internal-improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"Internal improvements","title":"fixest 0.7.0 (2020-10-24)","text":"Brand new internal algorithm now uses closed form solutions dealing variables varying slopes. means variables varying slopes present, algorithm incomparably faster accurate. Two deep copies data now avoided demeaning function. improves performance terms memory footprint, also makes algorithm faster.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"standard-errors-important-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Standard-errors, important changes","title":"fixest 0.7.0 (2020-10-24)","text":"New default values standard-errors (concerns multiway clustering). become similar reghdfe increase cross-software comparability. Computing standard-errors old way still possible using argument dof. See dedicated vignette: standard errors. Name change summary/vcov/etable: get heteroskedasticity-robust standard-errors, se = \"hetero\" now replaces se = \"white\" enhance clarity. Note se = \"white\" still works.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-function-fitstat-0-7-0","dir":"Changelog","previous_headings":"","what":"New function: fitstat","title":"fixest 0.7.0 (2020-10-24)","text":"New function fitsat computes various fit statistics. integrated etable can invoked argument fitstat. far two fit statistics included, come.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-in-interact-0-7-0","dir":"Changelog","previous_headings":"","what":"New features in interact()","title":"fixest 0.7.0 (2020-10-24)","text":"can now use (var) treat variable var factor. can select values drop/keep respective arguments. Using (var) leads special treatment variables functions coefplot etable.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-in-etable-0-7-0","dir":"Changelog","previous_headings":"","what":"New features in etable","title":"fixest 0.7.0 (2020-10-24)","text":"New argument placement define position float Latex (suggestion Caleb Kwon). New argument drop.section, can drop ) fixed-effects, b) variables varying slopes, c) statistics, sections (suggestion Caleb Kwon). Fix glitch help pages regarding use ‘%’ (percentage) character regular expressions. Two new arguments .vcov .vcov_args compute standard-errors custom functions. number observations (n) now treated regular statistic can placed one wants. statistics can now custom aliases using argument dict. overdispersion becomes regular fit statistic can included () using fitstat. dictionnary now applies factors interactions, values factors.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"User visible changes","title":"fixest 0.7.0 (2020-10-24)","text":"Argument nthreads: new default argument nthreads 50% available threads. Accepts new values: ) 0 means available threads, b) number strictly 0 1 represent fraction threads use. setting formula macros: functions xpd setFixest_fml now accept character vectors numeric scalars top formulas. demean: speed improvement. coefplot: argument group now accepts special character \"^^\", used, cleans beginning coefficient name. useful , e.g., factors although factors created () need . horiz = TRUE, order coefficients reversed . Improved display numbers print method. Added variables names X_demeaned feols. Lagging functions: Now time.step = NULL default, means choice lag automatically set. means default behavior time variables equal Dates character values appropriate. New operator d difference operator. estimations: new argument mem.clean: internally, intermediary objects removed much possible gc() called memory intensive C++ section. useful ’re edge reaching memory limit. new output: collin.min_norm, value informs possible presence collinearity system variables. first, .env, allows recover environment used perform estimation (.e. preprocessing done estimation). second, env, accepts fixest environment created .env, performs estimation using environment–arguments ignored. changes prerequisite efficient implementation bootstraping (since, applying modifications directly env, cut preprocessing). non-linear estimations: non-numeric variables can now used. argument NL.start now accepts numeric scalars, initializing coefficients value (avoids use argument NL.start.init). summary.fixest: argument .vcov now accepts functions compute vcov. ensures convenient compatibility sandwich package (compatibility still full though: bootstraped SEs don’t work yet). update.fixest: new argument evaluate ensure consistency update method stats. feols & feglm: Cholesky decomposition now checks user interrupts (matters models MANY variables estimate).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"deprecation-0-7-0","dir":"Changelog","previous_headings":"","what":"Deprecation","title":"fixest 0.7.0 (2020-10-24)","text":"Argument na_inf.rm removed. present historical reasons, removed increase code clarity.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-060-2020-07-13","dir":"Changelog","previous_headings":"","what":"fixest 0.6.0 (2020-07-13)","title":"fixest 0.6.0 (2020-07-13)","text":"CRAN release: 2020-07-13","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-6-0","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.6.0 (2020-07-13)","text":"vcov, degree--freedom small sample correction correction fixed “nested” couldn’t modified, now corrected. , “nested” properly accounted , now corrected. etable, fitsat = FALSE fitsat = NA led bug. r2: bug estimation contained fixed effects (thanks Luis Fonseca, #27). Now BIC feglm similar one glm. Bug log-likelihood presence weights, now corrected. Bug coefplot interacted variables removed collinearity. Now corrected.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-vignettes-0-6-0","dir":"Changelog","previous_headings":"","what":"New vignettes","title":"fixest 0.6.0 (2020-07-13)","text":"standard-errors: SEs computed fixest replicate SEs software. Exporting estimation tables: use efficiently etable, particular customize tables.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-changes-etable-0-6-0","dir":"Changelog","previous_headings":"","what":"Major changes: etable","title":"fixest 0.6.0 (2020-07-13)","text":"New arguments: group, extraline, notes, tablefoot. group allows eliminate variables (like drop) adds extra line TRUE/FALSE model contained variables. extraline allows add extra lines content. notes allows add notes table (suggestion @bgchamps, #25). tablefoot controls whether table footer, containing type standard-errors significance codes, displayed. Renaming: yesNoFixef => yesNo. default values can set globally new function setFixest_etable.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-changes-dof-0-6-0","dir":"Changelog","previous_headings":"","what":"Major changes: dof","title":"fixest 0.6.0 (2020-07-13)","text":"Function dof, used adjust small sample corrections, now much complete allows replicate large set estimation results alternative software.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"User visible changes","title":"fixest 0.6.0 (2020-07-13)","text":"can now provide custom VCOVs summary using argument .vcov. warning now prompted maximum number iterations algorithm reached (suggestion @clukewatson , #24]). types standard-errors can now set globally function setFixest_se (suggestion @dlindzee, #28) New feols argument demeaned. TRUE, centered variables returned (y_demeaned X_demeaned). (Suggestion Linus Holtermann.) interact gains two new arguments: drop keep (suggestion @SuperMayo, #23).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-methods-0-6-0","dir":"Changelog","previous_headings":"","what":"New methods","title":"fixest 0.6.0 (2020-07-13)","text":"hatvalues implemented feols feglm estimations. estfun sandwich implemented.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-051-2020-06-18","dir":"Changelog","previous_headings":"","what":"fixest 0.5.1 (2020-06-18)","title":"fixest 0.5.1 (2020-06-18)","text":"CRAN release: 2020-06-18","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"hotfix-0-5-1","dir":"Changelog","previous_headings":"","what":"Hotfix","title":"fixest 0.5.1 (2020-06-18)","text":"Fixed bug introduced previous update (memory access error). affect results lead R crash unexpectedly (odds low though since access adjacent).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bugs-0-5-1","dir":"Changelog","previous_headings":"","what":"Bugs","title":"fixest 0.5.1 (2020-06-18)","text":"Fix image link equation README.md. Fix bug R2 logLik observations removed NA values. Due update residuals.fixest.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-change-0-5-1","dir":"Changelog","previous_headings":"","what":"User visible change","title":"fixest 0.5.1 (2020-06-18)","text":"Rewriting internal algorithm computing VCOV. 1) 30% performance gain estimations many variables. 2) code much less memory hungry.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-update-of-etable-0-5-1","dir":"Changelog","previous_headings":"","what":"Major update of etable","title":"fixest 0.5.1 (2020-06-18)","text":"New argument style allows set many elements output table. (minor) signifCode can equal \"letters\" display letters instead stars.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-5-1","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.5.1 (2020-06-18)","text":"setFixest_nthreads now respects OMP_THREAD_LIMIT environment variable. Rd links now made proper htlm files.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-050-2020-06-10","dir":"Changelog","previous_headings":"","what":"fixest 0.5.0 (2020-06-10)","title":"fixest 0.5.0 (2020-06-10)","text":"CRAN release: 2020-06-10","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fixest 0.5.0 (2020-06-10)","text":"Bug estimations varying slopes fixed-effect relative slope decreasing order (thanks Davide Proserpio). Bug interacting two variables var::fe syntax confirm = TRUE reference. Bug etable standard-errors NA. Fixed minor bug computing SEs (1e-6 difference). Standard-errors feglm non-poisson, non-binomial families, now correct (minor differences). fixef work slope integer, now corrected (thanks @clerousset, #20).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functionality-formula-macros-0-5-0","dir":"Changelog","previous_headings":"","what":"New functionality: formula macros","title":"fixest 0.5.0 (2020-06-10)","text":"can use macros formulas. set macro variable, use e.g., setFixest_fml(..ctrl = ~ var1 + var2). macro variable ..ctrl set value \"var1 + var2\". Now can use macro variable fixest estimation: e.g. data(airquality) ; setFixest_fml(..ctrl = ~ Temp + Day) ; feols(Ozone ~ Wind + ..ctrl, airquality). can use macros non-fixest estimations xpd, expands formulas. E.g. lm(xpd(Ozone ~ Wind + ..ctrl), airquality).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functions-0-5-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"fixest 0.5.0 (2020-06-10)","text":"to_integer: user-level version internal algorithm transforming kind vector (combination vectors) integer ranging 1 number unique elements vector. fast. demean: user-level version demeaning algorithm used feols.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-user-visible-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Major user-visible changes","title":"fixest 0.5.0 (2020-06-10)","text":"New internal algorithm estimate OLS (applies feols feglm): numerically stable. Incomparably faster factors estimated (explicitly used fixed-effects). Collinear variables removed fly.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"User-visible changes","title":"fixest 0.5.0 (2020-06-10)","text":"Interactions var::fe(ref) now accept multiple references (.e. ref can vector). etable, variable names non-Latex output can now changed. can use argument n applying summary choose number coefficients display. Argument confirm removed function interact. r2 allows flexibility keywords accepts. Function dof gains new argument adj allows make different types common small sample corrections. arguments renamed clarity (fixef => fixef.K, exact => fixef.exact, cluster => cluster.adj). Now t-statistics used feols non-poisson, non-binomial models feglm. models, z-statistics used. complies default’s R-stats behavior.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-methods-0-5-0","dir":"Changelog","previous_headings":"","what":"New Methods","title":"fixest 0.5.0 (2020-06-10)","text":"residuals method substantially improved, now allowing different types. New stats methods: sigma, deviance, weights.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"vignette-and-readme-0-5-0","dir":"Changelog","previous_headings":"","what":"Vignette and Readme","title":"fixest 0.5.0 (2020-06-10)","text":"Typos corrected. Images Readme set 1200px.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"issue-found-convergence-problems-with-multiples-variables-with-varying-slopes-0-5-0","dir":"Changelog","previous_headings":"","what":"Issue found: convergence problems with multiples variables with varying slopes","title":"fixest 0.5.0 (2020-06-10)","text":"Convergence problems may arise presence multiple variables varying slopes. Theoretical work helped find solution problem, implementation R proving instantaneous. meantime, now warning prompted algorithm suspects convergence problem leading poor precision estimated coefficients.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"error-handling-0-5-0","dir":"Changelog","previous_headings":"","what":"Error-handling","title":"fixest 0.5.0 (2020-06-10)","text":"Improved error-handling dreamerr’s functions.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-5-0","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.5.0 (2020-06-10)","text":"Dependency MASS removed.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-041-2020-04-13","dir":"Changelog","previous_headings":"","what":"fixest 0.4.1 (2020-04-13)","title":"fixest 0.4.1 (2020-04-13)","text":"CRAN release: 2020-04-14","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fixest 0.4.1 (2020-04-13)","text":"Major bug leading R crash using non-linear--parameters right-hand-sides feNmlm. occured observations removed data set (due NAness perfect fit). [Thanks @marissachilds, GH issue #17.] collinearity help pages: example lead error (due random data generation). removed. collinearity, corrected problem display intercept situations. Defaults arguments cex lwd coefplot changed 1 1 (instead par(“cex”) par(“lwd”)). Otherwise led creation Rplots.pdf working directory (thanks Kurt Hornik). Corrected typo article’s title vignette.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"help-0-4-1","dir":"Changelog","previous_headings":"","what":"Help","title":"fixest 0.4.1 (2020-04-13)","text":"Rewriting sections, correction small mistakes (wrong argument names), dropping completely ‘cluster’ terminology (meant fixed-effects), addition contained fixest objects.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-4-1","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.4.1 (2020-04-13)","text":"Adding README.md. Small corrections vignette.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-040-2020-03-27","dir":"Changelog","previous_headings":"","what":"fixest 0.4.0 (2020-03-27)","title":"fixest 0.4.0 (2020-03-27)","text":"CRAN release: 2020-03-29","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-changes-latex-export-0-4-0","dir":"Changelog","previous_headings":"","what":"User visible changes: Latex export","title":"fixest 0.4.0 (2020-03-27)","text":"Better Latex special character escaping (errors reported @dlindzee, #15). New argument fixef_sizes.simplify, provides sizes fixed-effects parentheses ambiguity. can suppress line significance codes signifCode = NA. New argument float decides whether embed table table environment. default set TRUE title label present. New argument keep select variables keep table. New way keep/drop/order variables special argument “%”. use “%var”, makes reference original variable name, aliased one (default). New argument coefstat defining shown coefficients (standard-errors, t-stats confidence intervals). Suggestion @d712, #16. Better rendering significant digits.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-changes-coefplot-0-4-0","dir":"Changelog","previous_headings":"","what":"User visible changes: coefplot","title":"fixest 0.4.0 (2020-03-27)","text":"Argument horiz. coefficients can now displayed horizontally instead vertically. coefficient labels, x-axis, can now displayed three different ways thanks new argument lab.fit: “simple”, classic axis, “multi”, labels appear across multiple lines avoid collision, “tilted” tilted labels. margins now automatically fit. Argument style allows set styles function setFixest_coefplot, can summon style coefplot argument. Use ampersand set dictionary variables specific coefplot. Better display groups (arguments group group.par).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-methods-0-4-0","dir":"Changelog","previous_headings":"","what":"New methods","title":"fixest 0.4.0 (2020-03-27)","text":"terms.fixest giving terms estimation.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-0-4-0","dir":"Changelog","previous_headings":"","what":"Other","title":"fixest 0.4.0 (2020-03-27)","text":"donttest sections removed help pages.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-031-2020-02-09","dir":"Changelog","previous_headings":"","what":"fixest 0.3.1 (2020-02-09)","title":"fixest 0.3.1 (2020-02-09)","text":"CRAN release: 2020-02-09","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-bug-fix-0-3-1","dir":"Changelog","previous_headings":"","what":"Major bug fix","title":"fixest 0.3.1 (2020-02-09)","text":"[panel] Fixed faulty memory access taking lead variable.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"other-bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Other bug fixes","title":"fixest 0.3.1 (2020-02-09)","text":"[esttable/esttex] two functions replaced function etable. process, arguments “lost”, now corrected. etable Better escaping special characters. [estimations] Bug particular non-numeric vectors used explanatory variables.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"fixest 0.3.1 (2020-02-09)","text":"[coefplot] function coefplot now accepts lists estimations.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-030-2020-02-01","dir":"Changelog","previous_headings":"","what":"fixest 0.3.0 (2020-02-01)","title":"fixest 0.3.0 (2020-02-01)","text":"CRAN release: 2020-02-01","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-feature-lagging-0-3-0","dir":"Changelog","previous_headings":"","what":"New feature: Lagging","title":"fixest 0.3.0 (2020-02-01)","text":"can now add lags leads fixest estimations. need provide panel identifiers new argument panel.id, ’re free use new functions l() lags f() leads. can also set panel data set using function panel allows use lagging functions without provide argument panel.id, dispose options setting panel.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-feature-interactions-0-3-0","dir":"Changelog","previous_headings":"","what":"New feature: Interactions","title":"fixest 0.3.0 (2020-02-01)","text":"can now add interactions formulas new syntax: var::fe(ref) command var::fe(ref) interacts variable var value fe sets ref reference. Note don’t use argument ref, command var::fe identical var:factor(fe). Using var::fe(ref) write interactions opens special treatment variables exporting function etable coefficient plotting function coefplot.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-feature-coefplot-0-3-0","dir":"Changelog","previous_headings":"","what":"New feature: coefplot","title":"fixest 0.3.0 (2020-02-01)","text":"can plot coefficients associated confidence intervals function coefplot. coefplot dispose many options, whose default values can set function setFixest_coefplot. function etable, can easily rename/drop/order coefficients. coefplot detects interactions used offers special display .","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"fixest 0.3.0 (2020-02-01)","text":"etable Estimations table: new function export results multiple estimations. Replaces two functions esttex esttable (two functions still exist deprecated future). [Lagging] New functions related lagging: l, f, panel, unpanel [.fixest_panel. [Utilities] set small utility functions added. allow extract part coefficient table parts (like t-statistics standard-error) estimation. functions coeftable, ctable (alias coeftable), se, tstat pvalue. [coefplot] functions coefplot setFixest_coefplot. [dof] New function set type degree freedom adjustment computing variance-covariance matrix. can permanently set type DoF adjustment new function setFixest_dof().","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"user-visible-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"User visible changes","title":"fixest 0.3.0 (2020-02-01)","text":"estimations key pre-processing step paralellized => algorithm faster general much faster multi-FEs. [predict & fitted] Predict fitted now returns vectors length equal one original data. [standard-errors] New ways compute standard-errors implemented. particular, now account “nestedness” fixed-effects clusters default. can freely change compute degrees freedom correction function dof(). [r2] Computation within-R2 feglm models now self-contained. estimations New, accurate, stopping criterion 2+ fixed-effects. [feols] Estimations slightly faster. [etable/esttex] interactions, R may change order interactions, making two interactions two different estimations look different fact (e.g. x3:x2 x2:x3). Now esstable automatically reorders interactions needed comparison across estimations. [etable/esttable] type standard errors now always shown. [etable/esttex] aliases provided ‘dict’ also applied within interactions. example: dict=c(x1=\"Wind\", x2=\"Rain\"), estimation following variables ‘x1’, ‘x2’, ‘x1:x2’ lead following aliases Latex ‘Wind’, ‘Rain’ ‘Wind times Rain’. [etable/esttex] Interactions similar values different order (e.g. x1:x2 x2:x1) reorderd appear lines. [etable/esttex] ) type standard errors ii) significance codes, now displayed two separate lines (otherwise line wide). [etable/esttex] Argument yesNoFixef can length one, defaulting second element empty string. [etable/esttex] Escaping Latex special characters now much robust.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-correction-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug correction","title":"fixest 0.3.0 (2020-02-01)","text":"estimations Fixed: bug functions formula returned matrices. [update] Fixed: error message data missing. [feglm] Fixed: bug double estimation family equal poisson logit [feglm] Fixed: severe bug occurring families equal poisson logit [predict] Fixed: bug estimation contained combined FEs. [summary] Regarding small sample : now Student t distribution used instead Normal compute pvalue. [esttex] Different variables aliases (given argument ‘dict’) now appear row. [esttex] Arguments ‘drop’ ‘order’ now applied post aliasing (alias given argument ‘dict’). [esttex] exporting multi-way standard errors. [r2] Small bug regarding objects obtained did_estimate_yearly_effects. [estimations] bug using weights feglm.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-021-2019-11-22","dir":"Changelog","previous_headings":"","what":"fixest 0.2.1 (2019-11-22)","title":"fixest 0.2.1 (2019-11-22)","text":"CRAN release: 2019-11-23","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-bug-correction-0-2-1","dir":"Changelog","previous_headings":"","what":"Major bug correction","title":"fixest 0.2.1 (2019-11-22)","text":"lag.formula: Bug introduced previous update lead wrong results. Now fixed.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-user-visible-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Major user visible changes","title":"fixest 0.2.1 (2019-11-22)","text":"[estimation methods] Significant speed improvement fixed-effects variables (.e. identifiers) string vectors.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-020-2019-11-19","dir":"Changelog","previous_headings":"","what":"fixest 0.2.0 (2019-11-19)","title":"fixest 0.2.0 (2019-11-19)","text":"CRAN release: 2019-11-19","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"new-function-0-2-0","dir":"Changelog","previous_headings":"","what":"New function","title":"fixest 0.2.0 (2019-11-19)","text":"-[did_means] New function did_means conveniently compare means groups observations (treat/control pre/post). Contains tools easily export Latex.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-user-visible-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major user visible changes","title":"fixest 0.2.0 (2019-11-19)","text":"[estimation methods] Significant speed improvement fixed-effects variables (.e. identifiers) type integer double. [esttex, esttable] New argument ‘fitstat’ select fit statistic display. default adapts models. Old arguments (loglik, bic, aic, sq.cor) dropped. [esttable] Significantly better rendering SE types. [r2] Now NA returned R2s theoretical justification (e.g. within R2 FEs, ‘regular’ R2 ML models).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"minor-user-visible-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor user visible changes","title":"fixest 0.2.0 (2019-11-19)","text":"[did_plot_yearly_effects] Now name dependent variable appears y-axis. [esttex] Usage sym macro Latex dropped.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"bug-correction-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug correction","title":"fixest 0.2.0 (2019-11-19)","text":"[fixef.fixest] bug appear using varying slopes coefficients specific circumstances (slope FEs different regular FEs). [fixef.fixest] bug many regular FEs jointly varying slopes. [fixef.fixest] regarding slope coefficients: now algorithm also evaluates functions variables. [esttable] Width “separating lines” now appropriately set long dependent variable names. [esttex] Spelling mistake corrected. [estimations] Bug occur extremely small data sets (< 10 observations).","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"error-handling-0-2-0","dir":"Changelog","previous_headings":"","what":"Error handling","title":"fixest 0.2.0 (2019-11-19)","text":"[esttex, esttable] informative error messages functions esttex esttable.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-012-2019-10-04","dir":"Changelog","previous_headings":"","what":"fixest 0.1.2 (2019-10-04)","title":"fixest 0.1.2 (2019-10-04)","text":"CRAN release: 2019-10-04","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-bug-correction-0-1-2","dir":"Changelog","previous_headings":"","what":"Major bug correction","title":"fixest 0.1.2 (2019-10-04)","text":"lag.formula: data particular format, results wrong. Now corrected.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-011-2019-09-20","dir":"Changelog","previous_headings":"","what":"fixest 0.1.1 (2019-09-20)","title":"fixest 0.1.1 (2019-09-20)","text":"CRAN release: 2019-09-20","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"major-bug-correction-0-1-1","dir":"Changelog","previous_headings":"","what":"Major bug correction","title":"fixest 0.1.1 (2019-09-20)","text":"feglm: bug ) deviance initialization higher deviance first iteration IRWLS b) step-halving unable find lower deviance. led estimation fail error although performed properly. did_estimate_yearly_effects: bug estimation involved periods negative values.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"minor-bug-correction-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor bug correction","title":"fixest 0.1.1 (2019-09-20)","text":"esttex: bug regarding number digits negative coefficients displayed esttex: now properly escaping percentage underscore exports Latex esttex: bug changing names dependent variables using dictionnary vcov: warning messages misleading update: bug update using argument nframes update: bug updating function fepois","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"error-handling-0-1-1","dir":"Changelog","previous_headings":"","what":"Error handling","title":"fixest 0.1.1 (2019-09-20)","text":"Better error messages : did_estimate_yearly_effects, main estimation functions, setFixest_dict, fepois fenegbin.","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"fixest-010-2019-09-03","dir":"Changelog","previous_headings":"","what":"fixest 0.1.0 (2019-09-03)","title":"fixest 0.1.0 (2019-09-03)","text":"CRAN release: 2019-09-03","code":""},{"path":"https://lrberge.github.io/fixest/news/index.html","id":"first-version-0-1-0","dir":"Changelog","previous_headings":"","what":"First version","title":"fixest 0.1.0 (2019-09-03)","text":"package effort create family fast user-friendly functions perform estimations multiple fixed-effects (F.E.). Estimations fixed-effects (call factor variables) staple social science. Hence package gathering many methods fast execution time prime importance. time version, fastest existing method perform F.E. estimations (often orders magnitude, compared efficient alternative methods [R Stata]). underlying method obtain F.E. based Berge 2018, workhorse code c++ parallelized via OpenMP (btw thanks Rcpp simplifying coders’ life!). package follow (now deprecated) package FENmlm performed fixed-effects estimations four likelihood families. Package fixest completely supersedes FENmlm extending method regular OLS GLM families, adding new utility functions. , design functions completely overhauled extended towards much user-friendliness. Massive effort put providing set informative error messages user quick debugging workflow (e.g. one functions contains 100 different errors messages).","code":""}]
