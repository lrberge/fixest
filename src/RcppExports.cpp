// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_cluster_coef_r
SEXP compute_cluster_coef_r(int family, int nb_coef, double theta, double diffMax_NR, SEXP r_mu, SEXP r_lhs, SEXP r_sum_y, SEXP r_dum, SEXP r_obsCluster, SEXP r_table, SEXP r_cumtable, int nthreads);
RcppExport SEXP _fixest_compute_cluster_coef_r(SEXP familySEXP, SEXP nb_coefSEXP, SEXP thetaSEXP, SEXP diffMax_NRSEXP, SEXP r_muSEXP, SEXP r_lhsSEXP, SEXP r_sum_ySEXP, SEXP r_dumSEXP, SEXP r_obsClusterSEXP, SEXP r_tableSEXP, SEXP r_cumtableSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type nb_coef(nb_coefSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax_NR(diffMax_NRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mu(r_muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_lhs(r_lhsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_sum_y(r_sum_ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dum(r_dumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_obsCluster(r_obsClusterSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_table(r_tableSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_cumtable(r_cumtableSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cluster_coef_r(family, nb_coef, theta, diffMax_NR, r_mu, r_lhs, r_sum_y, r_dum, r_obsCluster, r_table, r_cumtable, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// update_mu_single_cluster
SEXP update_mu_single_cluster(int family, int nb_cluster, double theta, double diffMax_NR, SEXP mu_in, SEXP lhs, SEXP sum_y, SEXP dum, SEXP obsCluster, SEXP table, SEXP cumtable, int nthreads);
RcppExport SEXP _fixest_update_mu_single_cluster(SEXP familySEXP, SEXP nb_clusterSEXP, SEXP thetaSEXP, SEXP diffMax_NRSEXP, SEXP mu_inSEXP, SEXP lhsSEXP, SEXP sum_ySEXP, SEXP dumSEXP, SEXP obsClusterSEXP, SEXP tableSEXP, SEXP cumtableSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type nb_cluster(nb_clusterSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax_NR(diffMax_NRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu_in(mu_inSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sum_y(sum_ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum(dumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< SEXP >::type table(tableSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cumtable(cumtableSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_single_cluster(family, nb_cluster, theta, diffMax_NR, mu_in, lhs, sum_y, dum, obsCluster, table, cumtable, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conv_acc_gnl
List cpp_conv_acc_gnl(int family, int iterMax, double diffMax, double diffMax_NR, double theta, SEXP nb_cluster_all, SEXP lhs, SEXP mu_init, SEXP dum_vector, SEXP tableCluster_vector, SEXP sum_y_vector, SEXP cumtable_vector, SEXP obsCluster_vector, int nthreads);
RcppExport SEXP _fixest_cpp_conv_acc_gnl(SEXP familySEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP diffMax_NRSEXP, SEXP thetaSEXP, SEXP nb_cluster_allSEXP, SEXP lhsSEXP, SEXP mu_initSEXP, SEXP dum_vectorSEXP, SEXP tableCluster_vectorSEXP, SEXP sum_y_vectorSEXP, SEXP cumtable_vectorSEXP, SEXP obsCluster_vectorSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax_NR(diffMax_NRSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nb_cluster_all(nb_cluster_allSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tableCluster_vector(tableCluster_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sum_y_vector(sum_y_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cumtable_vector(cumtable_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obsCluster_vector(obsCluster_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conv_acc_gnl(family, iterMax, diffMax, diffMax_NR, theta, nb_cluster_all, lhs, mu_init, dum_vector, tableCluster_vector, sum_y_vector, cumtable_vector, obsCluster_vector, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conv_seq_gnl
List cpp_conv_seq_gnl(int family, int iterMax, double diffMax, double diffMax_NR, double theta, SEXP nb_cluster_all, SEXP lhs, SEXP mu_init, SEXP dum_vector, SEXP tableCluster_vector, SEXP sum_y_vector, SEXP cumtable_vector, SEXP obsCluster_vector, int nthreads);
RcppExport SEXP _fixest_cpp_conv_seq_gnl(SEXP familySEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP diffMax_NRSEXP, SEXP thetaSEXP, SEXP nb_cluster_allSEXP, SEXP lhsSEXP, SEXP mu_initSEXP, SEXP dum_vectorSEXP, SEXP tableCluster_vectorSEXP, SEXP sum_y_vectorSEXP, SEXP cumtable_vectorSEXP, SEXP obsCluster_vectorSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax_NR(diffMax_NRSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nb_cluster_all(nb_cluster_allSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tableCluster_vector(tableCluster_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sum_y_vector(sum_y_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cumtable_vector(cumtable_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obsCluster_vector(obsCluster_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conv_seq_gnl(family, iterMax, diffMax, diffMax_NR, theta, nb_cluster_all, lhs, mu_init, dum_vector, tableCluster_vector, sum_y_vector, cumtable_vector, obsCluster_vector, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// get_n_cells
int get_n_cells(IntegerVector index_i, IntegerVector index_j);
RcppExport SEXP _fixest_get_n_cells(SEXP index_iSEXP, SEXP index_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index_j(index_jSEXP);
    rcpp_result_gen = Rcpp::wrap(get_n_cells(index_i, index_j));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conv_acc_poi_2
List cpp_conv_acc_poi_2(int n_i, int n_j, int n_cells, SEXP index_i, SEXP index_j, SEXP dum_vector, SEXP sum_y_vector, int iterMax, double diffMax, SEXP exp_mu_in, SEXP order);
RcppExport SEXP _fixest_cpp_conv_acc_poi_2(SEXP n_iSEXP, SEXP n_jSEXP, SEXP n_cellsSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP dum_vectorSEXP, SEXP sum_y_vectorSEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP exp_mu_inSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sum_y_vector(sum_y_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type exp_mu_in(exp_mu_inSEXP);
    Rcpp::traits::input_parameter< SEXP >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conv_acc_poi_2(n_i, n_j, n_cells, index_i, index_j, dum_vector, sum_y_vector, iterMax, diffMax, exp_mu_in, order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conv_seq_poi_2
List cpp_conv_seq_poi_2(int n_i, int n_j, int n_cells, SEXP index_i, SEXP index_j, SEXP dum_vector, SEXP sum_y_vector, int iterMax, double diffMax, SEXP exp_mu_in, SEXP order);
RcppExport SEXP _fixest_cpp_conv_seq_poi_2(SEXP n_iSEXP, SEXP n_jSEXP, SEXP n_cellsSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP dum_vectorSEXP, SEXP sum_y_vectorSEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP exp_mu_inSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sum_y_vector(sum_y_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type exp_mu_in(exp_mu_inSEXP);
    Rcpp::traits::input_parameter< SEXP >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conv_seq_poi_2(n_i, n_j, n_cells, index_i, index_j, dum_vector, sum_y_vector, iterMax, diffMax, exp_mu_in, order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fixed_cost_gaussian
List cpp_fixed_cost_gaussian(int n_i, int n_cells, SEXP index_i, SEXP index_j, SEXP order, SEXP invTableCluster_vector, SEXP dum_vector);
RcppExport SEXP _fixest_cpp_fixed_cost_gaussian(SEXP n_iSEXP, SEXP n_cellsSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP orderSEXP, SEXP invTableCluster_vectorSEXP, SEXP dum_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type order(orderSEXP);
    Rcpp::traits::input_parameter< SEXP >::type invTableCluster_vector(invTableCluster_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fixed_cost_gaussian(n_i, n_cells, index_i, index_j, order, invTableCluster_vector, dum_vector));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conv_acc_gau_2
List cpp_conv_acc_gau_2(int n_i, int n_j, int n_cells, SEXP r_mat_row, SEXP r_mat_col, SEXP r_mat_value_Ab, SEXP r_mat_value_Ba, SEXP dum_vector, SEXP lhs, SEXP invTableCluster_vector, int iterMax, double diffMax, SEXP mu_in);
RcppExport SEXP _fixest_cpp_conv_acc_gau_2(SEXP n_iSEXP, SEXP n_jSEXP, SEXP n_cellsSEXP, SEXP r_mat_rowSEXP, SEXP r_mat_colSEXP, SEXP r_mat_value_AbSEXP, SEXP r_mat_value_BaSEXP, SEXP dum_vectorSEXP, SEXP lhsSEXP, SEXP invTableCluster_vectorSEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP mu_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_row(r_mat_rowSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_col(r_mat_colSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_value_Ab(r_mat_value_AbSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_value_Ba(r_mat_value_BaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type invTableCluster_vector(invTableCluster_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu_in(mu_inSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conv_acc_gau_2(n_i, n_j, n_cells, r_mat_row, r_mat_col, r_mat_value_Ab, r_mat_value_Ba, dum_vector, lhs, invTableCluster_vector, iterMax, diffMax, mu_in));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conv_seq_gau_2
List cpp_conv_seq_gau_2(int n_i, int n_j, int n_cells, SEXP r_mat_row, SEXP r_mat_col, SEXP r_mat_value_Ab, SEXP r_mat_value_Ba, SEXP dum_vector, SEXP lhs, SEXP invTableCluster_vector, int iterMax, double diffMax, SEXP mu_in);
RcppExport SEXP _fixest_cpp_conv_seq_gau_2(SEXP n_iSEXP, SEXP n_jSEXP, SEXP n_cellsSEXP, SEXP r_mat_rowSEXP, SEXP r_mat_colSEXP, SEXP r_mat_value_AbSEXP, SEXP r_mat_value_BaSEXP, SEXP dum_vectorSEXP, SEXP lhsSEXP, SEXP invTableCluster_vectorSEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP mu_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_row(r_mat_rowSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_col(r_mat_colSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_value_Ab(r_mat_value_AbSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_mat_value_Ba(r_mat_value_BaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type invTableCluster_vector(invTableCluster_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu_in(mu_inSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conv_seq_gau_2(n_i, n_j, n_cells, r_mat_row, r_mat_col, r_mat_value_Ab, r_mat_value_Ba, dum_vector, lhs, invTableCluster_vector, iterMax, diffMax, mu_in));
    return rcpp_result_gen;
END_RCPP
}
// cpp_derivconv_seq_gnl
List cpp_derivconv_seq_gnl(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
RcppExport SEXP _fixest_cpp_derivconv_seq_gnl(SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP n_varsSEXP, SEXP nb_cluster_allSEXP, SEXP ll_d2SEXP, SEXP jacob_vectorSEXP, SEXP deriv_init_vectorSEXP, SEXP dum_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nb_cluster_all(nb_cluster_allSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type jacob_vector(jacob_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type deriv_init_vector(deriv_init_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_derivconv_seq_gnl(iterMax, diffMax, n_vars, nb_cluster_all, ll_d2, jacob_vector, deriv_init_vector, dum_vector));
    return rcpp_result_gen;
END_RCPP
}
// cpp_derivconv_acc_gnl
List cpp_derivconv_acc_gnl(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
RcppExport SEXP _fixest_cpp_derivconv_acc_gnl(SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP n_varsSEXP, SEXP nb_cluster_allSEXP, SEXP ll_d2SEXP, SEXP jacob_vectorSEXP, SEXP deriv_init_vectorSEXP, SEXP dum_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nb_cluster_all(nb_cluster_allSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type jacob_vector(jacob_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type deriv_init_vector(deriv_init_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_derivconv_acc_gnl(iterMax, diffMax, n_vars, nb_cluster_all, ll_d2, jacob_vector, deriv_init_vector, dum_vector));
    return rcpp_result_gen;
END_RCPP
}
// cpp_derivconv_acc_2
List cpp_derivconv_acc_2(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, int n_cells, SEXP index_i, SEXP index_j, SEXP ll_d2, SEXP order, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
RcppExport SEXP _fixest_cpp_derivconv_acc_2(SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP n_varsSEXP, SEXP nb_cluster_allSEXP, SEXP n_cellsSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP ll_d2SEXP, SEXP orderSEXP, SEXP jacob_vectorSEXP, SEXP deriv_init_vectorSEXP, SEXP dum_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nb_cluster_all(nb_cluster_allSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type order(orderSEXP);
    Rcpp::traits::input_parameter< SEXP >::type jacob_vector(jacob_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type deriv_init_vector(deriv_init_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_derivconv_acc_2(iterMax, diffMax, n_vars, nb_cluster_all, n_cells, index_i, index_j, ll_d2, order, jacob_vector, deriv_init_vector, dum_vector));
    return rcpp_result_gen;
END_RCPP
}
// cpp_derivconv_seq_2
List cpp_derivconv_seq_2(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, int n_cells, SEXP index_i, SEXP index_j, SEXP order, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
RcppExport SEXP _fixest_cpp_derivconv_seq_2(SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP n_varsSEXP, SEXP nb_cluster_allSEXP, SEXP n_cellsSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP orderSEXP, SEXP ll_d2SEXP, SEXP jacob_vectorSEXP, SEXP deriv_init_vectorSEXP, SEXP dum_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nb_cluster_all(nb_cluster_allSEXP);
    Rcpp::traits::input_parameter< int >::type n_cells(n_cellsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type order(orderSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type jacob_vector(jacob_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type deriv_init_vector(deriv_init_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dum_vector(dum_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_derivconv_seq_2(iterMax, diffMax, n_vars, nb_cluster_all, n_cells, index_i, index_j, order, ll_d2, jacob_vector, deriv_init_vector, dum_vector));
    return rcpp_result_gen;
END_RCPP
}
// update_deriv_single
NumericMatrix update_deriv_single(int n_vars, int nb_coef, SEXP r_ll_d2, SEXP r_jacob_vector, SEXP r_dum_vector);
RcppExport SEXP _fixest_update_deriv_single(SEXP n_varsSEXP, SEXP nb_coefSEXP, SEXP r_ll_d2SEXP, SEXP r_jacob_vectorSEXP, SEXP r_dum_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< int >::type nb_coef(nb_coefSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_ll_d2(r_ll_d2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_jacob_vector(r_jacob_vectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_dum_vector(r_dum_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(update_deriv_single(n_vars, nb_coef, r_ll_d2, r_jacob_vector, r_dum_vector));
    return rcpp_result_gen;
END_RCPP
}
// cpp_demean
List cpp_demean(SEXP y, SEXP X_raw, SEXP r_weights, int iterMax, double diffMax, SEXP r_nb_id_Q, SEXP fe_id_list, SEXP table_id_I, SEXP slope_flag_Q, SEXP slope_vars_list, SEXP r_init, int nthreads, bool save_fixef);
RcppExport SEXP _fixest_cpp_demean(SEXP ySEXP, SEXP X_rawSEXP, SEXP r_weightsSEXP, SEXP iterMaxSEXP, SEXP diffMaxSEXP, SEXP r_nb_id_QSEXP, SEXP fe_id_listSEXP, SEXP table_id_ISEXP, SEXP slope_flag_QSEXP, SEXP slope_vars_listSEXP, SEXP r_initSEXP, SEXP nthreadsSEXP, SEXP save_fixefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_raw(X_rawSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_weights(r_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< double >::type diffMax(diffMaxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_nb_id_Q(r_nb_id_QSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fe_id_list(fe_id_listSEXP);
    Rcpp::traits::input_parameter< SEXP >::type table_id_I(table_id_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type slope_flag_Q(slope_flag_QSEXP);
    Rcpp::traits::input_parameter< SEXP >::type slope_vars_list(slope_vars_listSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_init(r_initSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type save_fixef(save_fixefSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_demean(y, X_raw, r_weights, iterMax, diffMax, r_nb_id_Q, fe_id_list, table_id_I, slope_flag_Q, slope_vars_list, r_init, nthreads, save_fixef));
    return rcpp_result_gen;
END_RCPP
}
// cpp_which_na_inf
List cpp_which_na_inf(SEXP x, int nthreads);
RcppExport SEXP _fixest_cpp_which_na_inf(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_which_na_inf(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dsb
List cpp_dsb(SEXP Rstr);
RcppExport SEXP _fixest_cpp_dsb(SEXP RstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rstr(RstrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dsb(Rstr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dsb_full_string
List cpp_dsb_full_string(SEXP Rstr);
RcppExport SEXP _fixest_cpp_dsb_full_string(SEXP RstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rstr(RstrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dsb_full_string(Rstr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dsb_if_extract
List cpp_dsb_if_extract(SEXP Rstr);
RcppExport SEXP _fixest_cpp_dsb_if_extract(SEXP RstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rstr(RstrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dsb_if_extract(Rstr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_paste_conditional
StringVector cpp_paste_conditional(StringVector x, IntegerVector id, int n);
RcppExport SEXP _fixest_cpp_paste_conditional(SEXP xSEXP, SEXP idSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_paste_conditional(x, id, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cholesky
List cpp_cholesky(NumericMatrix X, double tol, int nthreads);
RcppExport SEXP _fixest_cpp_cholesky(SEXP XSEXP, SEXP tolSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cholesky(X, tol, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sparse_products
List cpp_sparse_products(NumericMatrix X, NumericVector w, SEXP y, bool correct_0w, int nthreads);
RcppExport SEXP _fixest_cpp_sparse_products(SEXP XSEXP, SEXP wSEXP, SEXP ySEXP, SEXP correct_0wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type correct_0w(correct_0wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sparse_products(X, w, y, correct_0w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_crossprod
NumericMatrix cpppar_crossprod(NumericMatrix X, NumericVector w, int nthreads);
RcppExport SEXP _fixest_cpppar_crossprod(SEXP XSEXP, SEXP wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_crossprod(X, w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mat_reconstruct
NumericMatrix cpp_mat_reconstruct(NumericMatrix X, Rcpp::LogicalVector id_excl);
RcppExport SEXP _fixest_cpp_mat_reconstruct(SEXP XSEXP, SEXP id_exclSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type id_excl(id_exclSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mat_reconstruct(X, id_excl));
    return rcpp_result_gen;
END_RCPP
}
// cpp_iv_products
List cpp_iv_products(NumericMatrix X, SEXP y, NumericMatrix Z, SEXP u, NumericVector w, int nthreads);
RcppExport SEXP _fixest_cpp_iv_products(SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP uSEXP, SEXP wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_iv_products(X, y, Z, u, w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_iv_product_completion
List cpp_iv_product_completion(NumericMatrix XtX, NumericVector Xty, NumericMatrix X, NumericVector y, NumericMatrix U, NumericVector w, int nthreads);
RcppExport SEXP _fixest_cpp_iv_product_completion(SEXP XtXSEXP, SEXP XtySEXP, SEXP XSEXP, SEXP ySEXP, SEXP USEXP, SEXP wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_iv_product_completion(XtX, Xty, X, y, U, w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_iv_resid
NumericVector cpp_iv_resid(NumericVector resid_2nd, NumericVector coef, SEXP resid_1st, bool is_int, int nthreads);
RcppExport SEXP _fixest_cpp_iv_resid(SEXP resid_2ndSEXP, SEXP coefSEXP, SEXP resid_1stSEXP, SEXP is_intSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resid_2nd(resid_2ndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< SEXP >::type resid_1st(resid_1stSEXP);
    Rcpp::traits::input_parameter< bool >::type is_int(is_intSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_iv_resid(resid_2nd, coef, resid_1st, is_int, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lgamma
NumericVector cpp_lgamma(NumericVector x);
RcppExport SEXP _fixest_cpp_lgamma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lgamma(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_log_a_exp
NumericVector cpp_log_a_exp(double a, NumericVector mu, NumericVector exp_mu);
RcppExport SEXP _fixest_cpp_log_a_exp(SEXP aSEXP, SEXP muSEXP, SEXP exp_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_log_a_exp(a, mu, exp_mu));
    return rcpp_result_gen;
END_RCPP
}
// cpp_partialDerivative_other
NumericVector cpp_partialDerivative_other(int iterMax, int Q, int N, double epsDeriv, NumericVector ll_d2, NumericVector dx_dother, NumericVector init, IntegerMatrix dumMat, IntegerVector nbCluster);
RcppExport SEXP _fixest_cpp_partialDerivative_other(SEXP iterMaxSEXP, SEXP QSEXP, SEXP NSEXP, SEXP epsDerivSEXP, SEXP ll_d2SEXP, SEXP dx_dotherSEXP, SEXP initSEXP, SEXP dumMatSEXP, SEXP nbClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dx_dother(dx_dotherSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_partialDerivative_other(iterMax, Q, N, epsDeriv, ll_d2, dx_dother, init, dumMat, nbCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tapply_sum
NumericMatrix cpp_tapply_sum(int Q, NumericMatrix x, IntegerVector dum);
RcppExport SEXP _fixest_cpp_tapply_sum(SEXP QSEXP, SEXP xSEXP, SEXP dumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tapply_sum(Q, x, dum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tapply_vsum
NumericVector cpp_tapply_vsum(int Q, NumericVector x, IntegerVector dum);
RcppExport SEXP _fixest_cpp_tapply_vsum(SEXP QSEXP, SEXP xSEXP, SEXP dumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tapply_vsum(Q, x, dum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_table
NumericVector cpp_table(int Q, IntegerVector dum);
RcppExport SEXP _fixest_cpp_table(SEXP QSEXP, SEXP dumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_table(Q, dum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_fe_gnl
List cpp_get_fe_gnl(int Q, int N, NumericVector sumFE, IntegerMatrix dumMat, IntegerVector cluster_sizes, IntegerVector obsCluster);
RcppExport SEXP _fixest_cpp_get_fe_gnl(SEXP QSEXP, SEXP NSEXP, SEXP sumFESEXP, SEXP dumMatSEXP, SEXP cluster_sizesSEXP, SEXP obsClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sumFE(sumFESEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cluster_sizes(cluster_sizesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_fe_gnl(Q, N, sumFE, dumMat, cluster_sizes, obsCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ssr_null
double cpp_ssr_null(NumericVector y, NumericVector w);
RcppExport SEXP _fixest_cpp_ssr_null(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ssr_null(y, w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ssq
double cpp_ssq(NumericVector x, NumericVector w);
RcppExport SEXP _fixest_cpp_ssq(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ssq(x, w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_isConstant
bool cpp_isConstant(NumericVector x);
RcppExport SEXP _fixest_cpp_isConstant(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_isConstant(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_any_na_null
bool cpp_any_na_null(SEXP x);
RcppExport SEXP _fixest_cpp_any_na_null(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_any_na_null(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_constant_dum
int cpp_constant_dum(int k, NumericVector x, IntegerVector dum, bool only_0);
RcppExport SEXP _fixest_cpp_constant_dum(SEXP kSEXP, SEXP xSEXP, SEXP dumSEXP, SEXP only_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    Rcpp::traits::input_parameter< bool >::type only_0(only_0SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_constant_dum(k, x, dum, only_0));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_duplicates
List cpp_find_duplicates(IntegerVector id, IntegerVector time);
RcppExport SEXP _fixest_cpp_find_duplicates(SEXP idSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_duplicates(id, time));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pgcd
int cpp_pgcd(IntegerVector x);
RcppExport SEXP _fixest_cpp_pgcd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pgcd(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lag_obs
IntegerVector cpp_lag_obs(IntegerVector id, IntegerVector time, int nlag);
RcppExport SEXP _fixest_cpp_lag_obs(SEXP idSEXP, SEXP timeSEXP, SEXP nlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type nlag(nlagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lag_obs(id, time, nlag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_check_nested
IntegerVector cpp_check_nested(SEXP fe_list, SEXP cluster_list, IntegerVector fe_sizes, int n);
RcppExport SEXP _fixest_cpp_check_nested(SEXP fe_listSEXP, SEXP cluster_listSEXP, SEXP fe_sizesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fe_list(fe_listSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cluster_list(cluster_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fe_sizes(fe_sizesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_check_nested(fe_list, cluster_list, fe_sizes, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diag_XUtX
NumericVector cpp_diag_XUtX(NumericMatrix X, NumericMatrix U);
RcppExport SEXP _fixest_cpp_diag_XUtX(SEXP XSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diag_XUtX(X, U));
    return rcpp_result_gen;
END_RCPP
}
// cpp_factor_matrix
NumericVector cpp_factor_matrix(IntegerVector fact, LogicalVector is_na_all, IntegerVector who_is_dropped, SEXP var, CharacterVector col_names);
RcppExport SEXP _fixest_cpp_factor_matrix(SEXP factSEXP, SEXP is_na_allSEXP, SEXP who_is_droppedSEXP, SEXP varSEXP, SEXP col_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type fact(factSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_na_all(is_na_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type who_is_dropped(who_is_droppedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type var(varSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type col_names(col_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_factor_matrix(fact, is_na_all, who_is_dropped, var, col_names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_add_commas
std::string cpp_add_commas(double x, int r, bool whole);
RcppExport SEXP _fixest_cpp_add_commas(SEXP xSEXP, SEXP rSEXP, SEXP wholeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< bool >::type whole(wholeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_add_commas(x, r, whole));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_never_always_treated
List cpp_find_never_always_treated(IntegerVector cohort, NumericVector period);
RcppExport SEXP _fixest_cpp_find_never_always_treated(SEXP cohortSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_never_always_treated(cohort, period));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_first_item
IntegerVector cpp_get_first_item(IntegerVector x, int n_items);
RcppExport SEXP _fixest_cpp_get_first_item(SEXP xSEXP, SEXP n_itemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n_items(n_itemsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_first_item(x, n_items));
    return rcpp_result_gen;
END_RCPP
}
// cpp_combine_clusters
IntegerVector cpp_combine_clusters(SEXP cluster_list, IntegerVector index);
RcppExport SEXP _fixest_cpp_combine_clusters(SEXP cluster_listSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cluster_list(cluster_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_combine_clusters(cluster_list, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cut
List cpp_cut(NumericVector x_sorted, NumericVector cut_points, IntegerVector is_included);
RcppExport SEXP _fixest_cpp_cut(SEXP x_sortedSEXP, SEXP cut_pointsSEXP, SEXP is_includedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_sorted(x_sortedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_points(cut_pointsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type is_included(is_includedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cut(x_sorted, cut_points, is_included));
    return rcpp_result_gen;
END_RCPP
}
// cpp_is_int
bool cpp_is_int(SEXP x);
RcppExport SEXP _fixest_cpp_is_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_is_int(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hash_string
double cpp_hash_string(std::string x);
RcppExport SEXP _fixest_cpp_hash_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hash_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_escape_markup
StringVector cpp_escape_markup(SEXP Rstr);
RcppExport SEXP _fixest_cpp_escape_markup(SEXP RstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rstr(RstrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_escape_markup(Rstr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_is_binary
bool cpp_is_binary(SEXP x);
RcppExport SEXP _fixest_cpp_is_binary(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_is_binary(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_nb_threads
int cpp_get_nb_threads();
RcppExport SEXP _fixest_cpp_get_nb_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_get_nb_threads());
    return rcpp_result_gen;
END_RCPP
}
// cpppar_exp
NumericVector cpppar_exp(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_exp(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_exp(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_log
NumericVector cpppar_log(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_log(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_log(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_log_a_exp
NumericVector cpppar_log_a_exp(int nthreads, double a, NumericVector mu, NumericVector exp_mu);
RcppExport SEXP _fixest_cpppar_log_a_exp(SEXP nthreadsSEXP, SEXP aSEXP, SEXP muSEXP, SEXP exp_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_log_a_exp(nthreads, a, mu, exp_mu));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_lgamma
NumericVector cpppar_lgamma(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_lgamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_lgamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_digamma
NumericVector cpppar_digamma(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_digamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_digamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_trigamma
NumericVector cpppar_trigamma(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_trigamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_trigamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_poisson_linkinv
NumericVector cpppar_poisson_linkinv(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_poisson_linkinv(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_poisson_linkinv(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_poisson_validmu
bool cpppar_poisson_validmu(SEXP x, int nthreads);
RcppExport SEXP _fixest_cpppar_poisson_validmu(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_poisson_validmu(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_linkfun
NumericVector cpppar_logit_linkfun(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_logit_linkfun(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_linkfun(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_linkinv
NumericVector cpppar_logit_linkinv(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_logit_linkinv(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_linkinv(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_mueta
NumericVector cpppar_logit_mueta(NumericVector x, int nthreads);
RcppExport SEXP _fixest_cpppar_logit_mueta(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_mueta(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_devresids
NumericVector cpppar_logit_devresids(NumericVector y, NumericVector mu, NumericVector wt, int nthreads);
RcppExport SEXP _fixest_cpppar_logit_devresids(SEXP ySEXP, SEXP muSEXP, SEXP wtSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_devresids(y, mu, wt, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_xwy
NumericVector cpppar_xwy(NumericMatrix X, NumericVector y, NumericVector w, int nthreads);
RcppExport SEXP _fixest_cpppar_xwy(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_xwy(X, y, w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_xbeta
NumericVector cpppar_xbeta(NumericMatrix X, NumericVector beta, int nthreads);
RcppExport SEXP _fixest_cpppar_xbeta(SEXP XSEXP, SEXP betaSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_xbeta(X, beta, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_matprod
NumericMatrix cpppar_matprod(NumericMatrix x, NumericMatrix y, int nthreads);
RcppExport SEXP _fixest_cpppar_matprod(SEXP xSEXP, SEXP ySEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_matprod(x, y, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_which_na_inf_vec
List cpppar_which_na_inf_vec(SEXP x, int nthreads);
RcppExport SEXP _fixest_cpppar_which_na_inf_vec(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_which_na_inf_vec(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_which_na_inf_mat
List cpppar_which_na_inf_mat(NumericMatrix mat, int nthreads);
RcppExport SEXP _fixest_cpppar_which_na_inf_mat(SEXP matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_which_na_inf_mat(mat, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_which_na_inf_df
List cpppar_which_na_inf_df(SEXP df, int nthreads);
RcppExport SEXP _fixest_cpppar_which_na_inf_df(SEXP dfSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_which_na_inf_df(df, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_cond_means
List cpppar_cond_means(NumericMatrix mat_vars, IntegerVector treat, int nthreads);
RcppExport SEXP _fixest_cpppar_cond_means(SEXP mat_varsSEXP, SEXP treatSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat_vars(mat_varsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_cond_means(mat_vars, treat, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_check_only_0
IntegerVector cpppar_check_only_0(NumericMatrix x_mat, int nthreads);
RcppExport SEXP _fixest_cpppar_check_only_0(SEXP x_matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_check_only_0(x_mat, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_quf_gnl
List cpp_quf_gnl(SEXP x);
RcppExport SEXP _fixest_cpp_quf_gnl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_quf_gnl(x));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_quf_table_sum
List cpppar_quf_table_sum(SEXP x, SEXP y, bool do_sum_y, bool rm_0, bool rm_1, bool rm_single, IntegerVector only_slope, int nthreads, bool do_refactor, SEXP r_x_sizes, IntegerVector obs2keep);
RcppExport SEXP _fixest_cpppar_quf_table_sum(SEXP xSEXP, SEXP ySEXP, SEXP do_sum_ySEXP, SEXP rm_0SEXP, SEXP rm_1SEXP, SEXP rm_singleSEXP, SEXP only_slopeSEXP, SEXP nthreadsSEXP, SEXP do_refactorSEXP, SEXP r_x_sizesSEXP, SEXP obs2keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type do_sum_y(do_sum_ySEXP);
    Rcpp::traits::input_parameter< bool >::type rm_0(rm_0SEXP);
    Rcpp::traits::input_parameter< bool >::type rm_1(rm_1SEXP);
    Rcpp::traits::input_parameter< bool >::type rm_single(rm_singleSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type only_slope(only_slopeSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type do_refactor(do_refactorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type r_x_sizes(r_x_sizesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obs2keep(obs2keepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_quf_table_sum(x, y, do_sum_y, rm_0, rm_1, rm_single, only_slope, nthreads, do_refactor, r_x_sizes, obs2keep));
    return rcpp_result_gen;
END_RCPP
}
// cpp_colon_to_star
StringVector cpp_colon_to_star(SEXP Rstr);
RcppExport SEXP _fixest_cpp_colon_to_star(SEXP RstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rstr(RstrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_colon_to_star(Rstr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_newey_west
NumericMatrix cpp_newey_west(NumericMatrix S, NumericVector w, int nthreads);
RcppExport SEXP _fixest_cpp_newey_west(SEXP SSEXP, SEXP wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_newey_west(S, w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_newey_west_panel
NumericMatrix cpp_newey_west_panel(NumericMatrix S, NumericVector w, IntegerVector unit, int G, IntegerVector time, int T, int nthreads);
RcppExport SEXP _fixest_cpp_newey_west_panel(SEXP SSEXP, SEXP wSEXP, SEXP unitSEXP, SEXP GSEXP, SEXP timeSEXP, SEXP TSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_newey_west_panel(S, w, unit, G, time, T, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_driscoll_kraay
NumericMatrix cpp_driscoll_kraay(NumericMatrix S, NumericVector w, IntegerVector time, int T, int nthreads);
RcppExport SEXP _fixest_cpp_driscoll_kraay(SEXP SSEXP, SEXP wSEXP, SEXP timeSEXP, SEXP TSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_driscoll_kraay(S, w, time, T, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vcov_conley
NumericMatrix cpp_vcov_conley(NumericMatrix S, NumericVector lon_rad, NumericVector lat_rad, const int distance, const double cutoff, int nthreads);
RcppExport SEXP _fixest_cpp_vcov_conley(SEXP SSEXP, SEXP lon_radSEXP, SEXP lat_radSEXP, SEXP distanceSEXP, SEXP cutoffSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon_rad(lon_radSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat_rad(lat_radSEXP);
    Rcpp::traits::input_parameter< const int >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vcov_conley(S, lon_rad, lat_rad, distance, cutoff, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fixest_compute_cluster_coef_r", (DL_FUNC) &_fixest_compute_cluster_coef_r, 12},
    {"_fixest_update_mu_single_cluster", (DL_FUNC) &_fixest_update_mu_single_cluster, 12},
    {"_fixest_cpp_conv_acc_gnl", (DL_FUNC) &_fixest_cpp_conv_acc_gnl, 14},
    {"_fixest_cpp_conv_seq_gnl", (DL_FUNC) &_fixest_cpp_conv_seq_gnl, 14},
    {"_fixest_get_n_cells", (DL_FUNC) &_fixest_get_n_cells, 2},
    {"_fixest_cpp_conv_acc_poi_2", (DL_FUNC) &_fixest_cpp_conv_acc_poi_2, 11},
    {"_fixest_cpp_conv_seq_poi_2", (DL_FUNC) &_fixest_cpp_conv_seq_poi_2, 11},
    {"_fixest_cpp_fixed_cost_gaussian", (DL_FUNC) &_fixest_cpp_fixed_cost_gaussian, 7},
    {"_fixest_cpp_conv_acc_gau_2", (DL_FUNC) &_fixest_cpp_conv_acc_gau_2, 13},
    {"_fixest_cpp_conv_seq_gau_2", (DL_FUNC) &_fixest_cpp_conv_seq_gau_2, 13},
    {"_fixest_cpp_derivconv_seq_gnl", (DL_FUNC) &_fixest_cpp_derivconv_seq_gnl, 8},
    {"_fixest_cpp_derivconv_acc_gnl", (DL_FUNC) &_fixest_cpp_derivconv_acc_gnl, 8},
    {"_fixest_cpp_derivconv_acc_2", (DL_FUNC) &_fixest_cpp_derivconv_acc_2, 12},
    {"_fixest_cpp_derivconv_seq_2", (DL_FUNC) &_fixest_cpp_derivconv_seq_2, 12},
    {"_fixest_update_deriv_single", (DL_FUNC) &_fixest_update_deriv_single, 5},
    {"_fixest_cpp_demean", (DL_FUNC) &_fixest_cpp_demean, 13},
    {"_fixest_cpp_which_na_inf", (DL_FUNC) &_fixest_cpp_which_na_inf, 2},
    {"_fixest_cpp_dsb", (DL_FUNC) &_fixest_cpp_dsb, 1},
    {"_fixest_cpp_dsb_full_string", (DL_FUNC) &_fixest_cpp_dsb_full_string, 1},
    {"_fixest_cpp_dsb_if_extract", (DL_FUNC) &_fixest_cpp_dsb_if_extract, 1},
    {"_fixest_cpp_paste_conditional", (DL_FUNC) &_fixest_cpp_paste_conditional, 3},
    {"_fixest_cpp_cholesky", (DL_FUNC) &_fixest_cpp_cholesky, 3},
    {"_fixest_cpp_sparse_products", (DL_FUNC) &_fixest_cpp_sparse_products, 5},
    {"_fixest_cpppar_crossprod", (DL_FUNC) &_fixest_cpppar_crossprod, 3},
    {"_fixest_cpp_mat_reconstruct", (DL_FUNC) &_fixest_cpp_mat_reconstruct, 2},
    {"_fixest_cpp_iv_products", (DL_FUNC) &_fixest_cpp_iv_products, 6},
    {"_fixest_cpp_iv_product_completion", (DL_FUNC) &_fixest_cpp_iv_product_completion, 7},
    {"_fixest_cpp_iv_resid", (DL_FUNC) &_fixest_cpp_iv_resid, 5},
    {"_fixest_cpp_lgamma", (DL_FUNC) &_fixest_cpp_lgamma, 1},
    {"_fixest_cpp_log_a_exp", (DL_FUNC) &_fixest_cpp_log_a_exp, 3},
    {"_fixest_cpp_partialDerivative_other", (DL_FUNC) &_fixest_cpp_partialDerivative_other, 9},
    {"_fixest_cpp_tapply_sum", (DL_FUNC) &_fixest_cpp_tapply_sum, 3},
    {"_fixest_cpp_tapply_vsum", (DL_FUNC) &_fixest_cpp_tapply_vsum, 3},
    {"_fixest_cpp_table", (DL_FUNC) &_fixest_cpp_table, 2},
    {"_fixest_cpp_get_fe_gnl", (DL_FUNC) &_fixest_cpp_get_fe_gnl, 6},
    {"_fixest_cpp_ssr_null", (DL_FUNC) &_fixest_cpp_ssr_null, 2},
    {"_fixest_cpp_ssq", (DL_FUNC) &_fixest_cpp_ssq, 2},
    {"_fixest_cpp_isConstant", (DL_FUNC) &_fixest_cpp_isConstant, 1},
    {"_fixest_cpp_any_na_null", (DL_FUNC) &_fixest_cpp_any_na_null, 1},
    {"_fixest_cpp_constant_dum", (DL_FUNC) &_fixest_cpp_constant_dum, 4},
    {"_fixest_cpp_find_duplicates", (DL_FUNC) &_fixest_cpp_find_duplicates, 2},
    {"_fixest_cpp_pgcd", (DL_FUNC) &_fixest_cpp_pgcd, 1},
    {"_fixest_cpp_lag_obs", (DL_FUNC) &_fixest_cpp_lag_obs, 3},
    {"_fixest_cpp_check_nested", (DL_FUNC) &_fixest_cpp_check_nested, 4},
    {"_fixest_cpp_diag_XUtX", (DL_FUNC) &_fixest_cpp_diag_XUtX, 2},
    {"_fixest_cpp_factor_matrix", (DL_FUNC) &_fixest_cpp_factor_matrix, 5},
    {"_fixest_cpp_add_commas", (DL_FUNC) &_fixest_cpp_add_commas, 3},
    {"_fixest_cpp_find_never_always_treated", (DL_FUNC) &_fixest_cpp_find_never_always_treated, 2},
    {"_fixest_cpp_get_first_item", (DL_FUNC) &_fixest_cpp_get_first_item, 2},
    {"_fixest_cpp_combine_clusters", (DL_FUNC) &_fixest_cpp_combine_clusters, 2},
    {"_fixest_cpp_cut", (DL_FUNC) &_fixest_cpp_cut, 3},
    {"_fixest_cpp_is_int", (DL_FUNC) &_fixest_cpp_is_int, 1},
    {"_fixest_cpp_hash_string", (DL_FUNC) &_fixest_cpp_hash_string, 1},
    {"_fixest_cpp_escape_markup", (DL_FUNC) &_fixest_cpp_escape_markup, 1},
    {"_fixest_cpp_is_binary", (DL_FUNC) &_fixest_cpp_is_binary, 1},
    {"_fixest_cpp_get_nb_threads", (DL_FUNC) &_fixest_cpp_get_nb_threads, 0},
    {"_fixest_cpppar_exp", (DL_FUNC) &_fixest_cpppar_exp, 2},
    {"_fixest_cpppar_log", (DL_FUNC) &_fixest_cpppar_log, 2},
    {"_fixest_cpppar_log_a_exp", (DL_FUNC) &_fixest_cpppar_log_a_exp, 4},
    {"_fixest_cpppar_lgamma", (DL_FUNC) &_fixest_cpppar_lgamma, 2},
    {"_fixest_cpppar_digamma", (DL_FUNC) &_fixest_cpppar_digamma, 2},
    {"_fixest_cpppar_trigamma", (DL_FUNC) &_fixest_cpppar_trigamma, 2},
    {"_fixest_cpppar_poisson_linkinv", (DL_FUNC) &_fixest_cpppar_poisson_linkinv, 2},
    {"_fixest_cpppar_poisson_validmu", (DL_FUNC) &_fixest_cpppar_poisson_validmu, 2},
    {"_fixest_cpppar_logit_linkfun", (DL_FUNC) &_fixest_cpppar_logit_linkfun, 2},
    {"_fixest_cpppar_logit_linkinv", (DL_FUNC) &_fixest_cpppar_logit_linkinv, 2},
    {"_fixest_cpppar_logit_mueta", (DL_FUNC) &_fixest_cpppar_logit_mueta, 2},
    {"_fixest_cpppar_logit_devresids", (DL_FUNC) &_fixest_cpppar_logit_devresids, 4},
    {"_fixest_cpppar_xwy", (DL_FUNC) &_fixest_cpppar_xwy, 4},
    {"_fixest_cpppar_xbeta", (DL_FUNC) &_fixest_cpppar_xbeta, 3},
    {"_fixest_cpppar_matprod", (DL_FUNC) &_fixest_cpppar_matprod, 3},
    {"_fixest_cpppar_which_na_inf_vec", (DL_FUNC) &_fixest_cpppar_which_na_inf_vec, 2},
    {"_fixest_cpppar_which_na_inf_mat", (DL_FUNC) &_fixest_cpppar_which_na_inf_mat, 2},
    {"_fixest_cpppar_which_na_inf_df", (DL_FUNC) &_fixest_cpppar_which_na_inf_df, 2},
    {"_fixest_cpppar_cond_means", (DL_FUNC) &_fixest_cpppar_cond_means, 3},
    {"_fixest_cpppar_check_only_0", (DL_FUNC) &_fixest_cpppar_check_only_0, 2},
    {"_fixest_cpp_quf_gnl", (DL_FUNC) &_fixest_cpp_quf_gnl, 1},
    {"_fixest_cpppar_quf_table_sum", (DL_FUNC) &_fixest_cpppar_quf_table_sum, 11},
    {"_fixest_cpp_colon_to_star", (DL_FUNC) &_fixest_cpp_colon_to_star, 1},
    {"_fixest_cpp_newey_west", (DL_FUNC) &_fixest_cpp_newey_west, 3},
    {"_fixest_cpp_newey_west_panel", (DL_FUNC) &_fixest_cpp_newey_west_panel, 7},
    {"_fixest_cpp_driscoll_kraay", (DL_FUNC) &_fixest_cpp_driscoll_kraay, 5},
    {"_fixest_cpp_vcov_conley", (DL_FUNC) &_fixest_cpp_vcov_conley, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_fixest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
